/*
 * m2r_registers.h
 *
 * $Id$
 */
#ifndef _M2R_REGISTERS_H_
#define _M2R_REGISTERS_H_

#include "cs_types.h"


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * MicroIF::mpif
 */

#define MPIF_CHIPIdLsb                           0x00000
#define MPIF_CHIPIdLsb_dft                       0x53e5
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IdLsb                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IdLsb                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_CHIPIdLsb_t;

#define MPIF_CHIPIdMsb                           0x00001
#define MPIF_CHIPIdMsb_dft                       0x3000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IdMsb                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IdMsb                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_CHIPIdMsb_t;

#define MPIF_GlobalReset                         0x00002
#define MPIF_GlobalReset_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PPRBSSReset          :  1 ; /* bits 15:15 */
    cs_uint16 XETHSReset           :  1 ; /* bits 14:14 */
    cs_uint16 XgxsSReset           :  1 ; /* bits 13:13 */
    cs_uint16 LifSReset            :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 SPI4P2SReset         :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RingMacSReset        :  1 ; /* bits 8:8 */
    cs_uint16 PPRBSHReset          :  1 ; /* bits 7:7 */
    cs_uint16 XETHHReset           :  1 ; /* bits 6:6 */
    cs_uint16 XgxsHReset           :  1 ; /* bits 5:5 */
    cs_uint16 LifHReset            :  1 ; /* bits 4:4 */
    cs_uint16 FramerHReset         :  1 ; /* bits 3:3 */
    cs_uint16 SPI4P2HReset         :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RingMacHReset        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RingMacHReset        :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SPI4P2HReset         :  1 ; /* bits 2:2 */
    cs_uint16 FramerHReset         :  1 ; /* bits 3:3 */
    cs_uint16 LifHReset            :  1 ; /* bits 4:4 */
    cs_uint16 XgxsHReset           :  1 ; /* bits 5:5 */
    cs_uint16 XETHHReset           :  1 ; /* bits 6:6 */
    cs_uint16 PPRBSHReset          :  1 ; /* bits 7:7 */
    cs_uint16 RingMacSReset        :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 SPI4P2SReset         :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 LifSReset            :  1 ; /* bits 12:12 */
    cs_uint16 XgxsSReset           :  1 ; /* bits 13:13 */
    cs_uint16 XETHSReset           :  1 ; /* bits 14:14 */
    cs_uint16 PPRBSSReset          :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_GlobalReset_t;

#define MPIF_GlobalInt                           0x00003
#define MPIF_GlobalInt_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 PPRBSI               :  1 ; /* bits 6:6 */
    cs_uint16 XETHI                :  1 ; /* bits 5:5 */
    cs_uint16 LIFI                 :  1 ; /* bits 4:4 */
    cs_uint16 XGXSI                :  1 ; /* bits 3:3 */
    cs_uint16 FramerI              :  1 ; /* bits 2:2 */
    cs_uint16 RingMACI             :  1 ; /* bits 1:1 */
    cs_uint16 SPI4P2I              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPI4P2I              :  1 ; /* bits 0:0 */
    cs_uint16 RingMACI             :  1 ; /* bits 1:1 */
    cs_uint16 FramerI              :  1 ; /* bits 2:2 */
    cs_uint16 XGXSI                :  1 ; /* bits 3:3 */
    cs_uint16 LIFI                 :  1 ; /* bits 4:4 */
    cs_uint16 XETHI                :  1 ; /* bits 5:5 */
    cs_uint16 PPRBSI               :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_GlobalInt_t;

#define MPIF_GlobalIntEnable                     0x00004
#define MPIF_GlobalIntEnable_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 PPRBSE               :  1 ; /* bits 6:6 */
    cs_uint16 XETHE                :  1 ; /* bits 5:5 */
    cs_uint16 LIFE                 :  1 ; /* bits 4:4 */
    cs_uint16 XGXSE                :  1 ; /* bits 3:3 */
    cs_uint16 FramerE              :  1 ; /* bits 2:2 */
    cs_uint16 RingMACE             :  1 ; /* bits 1:1 */
    cs_uint16 SPI4P2E              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPI4P2E              :  1 ; /* bits 0:0 */
    cs_uint16 RingMACE             :  1 ; /* bits 1:1 */
    cs_uint16 FramerE              :  1 ; /* bits 2:2 */
    cs_uint16 XGXSE                :  1 ; /* bits 3:3 */
    cs_uint16 LIFE                 :  1 ; /* bits 4:4 */
    cs_uint16 XETHE                :  1 ; /* bits 5:5 */
    cs_uint16 PPRBSE               :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_GlobalIntEnable_t;

#define MPIF_Mode                                0x00005
#define MPIF_Mode_dft                            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 OC48MD               :  1 ; /* bits 13:13 */
    cs_uint16 OC48MD_Ovride        :  1 ; /* bits 12:12 */
    cs_uint16 OC48MD_Ovride_val    :  1 ; /* bits 11:11 */
    cs_uint16 XGEMD                :  1 ; /* bits 10:10 */
    cs_uint16 XGEMD_Ovride         :  1 ; /* bits 9:9 */
    cs_uint16 XGEMD_Ovride_val     :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 DiagBus              :  3 ; /* bits 5:3 */
    cs_uint16 FRMD                 :  1 ; /* bits 2:2 */
    cs_uint16 RingMac_Bypass_Ovride :  1 ; /* bits 1:1 */
    cs_uint16 RingMac_Bypass       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RingMac_Bypass       :  1 ; /* bits 0:0 */
    cs_uint16 RingMac_Bypass_Ovride :  1 ; /* bits 1:1 */
    cs_uint16 FRMD                 :  1 ; /* bits 2:2 */
    cs_uint16 DiagBus              :  3 ; /* bits 5:3 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 XGEMD_Ovride_val     :  1 ; /* bits 8:8 */
    cs_uint16 XGEMD_Ovride         :  1 ; /* bits 9:9 */
    cs_uint16 XGEMD                :  1 ; /* bits 10:10 */
    cs_uint16 OC48MD_Ovride_val    :  1 ; /* bits 11:11 */
    cs_uint16 OC48MD_Ovride        :  1 ; /* bits 12:12 */
    cs_uint16 OC48MD               :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_Mode_t;
#define     DiagBus_DEFAULT                               0x00
#define     DiagBus_FRAMER                                0x01
#define     DiagBus_RPR                                   0x02
#define     DiagBus_XGXS                                  0x03
#define     DiagBus_Bridge                                0x04
#define     DiagBus_XETH                                  0x05
#define     DiagBus_LIF                                   0x06
#define     DiagBus_PMON                                  0x07
#define     RingMac_Bypass_NORMAL_MODE                    0x00
#define     RingMac_Bypass_BYPASS_MODE                    0x01

#define MPIF_SysClkPLLControl                    0x00006
#define MPIF_SysClkPLLControl_dft                0x8010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FREQTUNE             :  4 ; /* bits 15:12 */
    cs_uint16 TCKI_EN              :  1 ; /* bits 11:11 */
    cs_uint16 TCKO_EN              :  1 ; /* bits 10:10 */
    cs_uint16 TCKO_SEL             :  3 ; /* bits 9:7 */
    cs_uint16 CHPI50UA_EN          :  1 ; /* bits 6:6 */
    cs_uint16 PWRDWN               :  1 ; /* bits 5:5 */
    cs_uint16 INT_FILTER_EN        :  1 ; /* bits 4:4 */
    cs_uint16 BYPASS_LOOP_RES      :  1 ; /* bits 3:3 */
    cs_uint16 FILTPN_EN            :  1 ; /* bits 2:2 */
    cs_uint16 SPARE                :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE                :  2 ; /* bits 1:0 */
    cs_uint16 FILTPN_EN            :  1 ; /* bits 2:2 */
    cs_uint16 BYPASS_LOOP_RES      :  1 ; /* bits 3:3 */
    cs_uint16 INT_FILTER_EN        :  1 ; /* bits 4:4 */
    cs_uint16 PWRDWN               :  1 ; /* bits 5:5 */
    cs_uint16 CHPI50UA_EN          :  1 ; /* bits 6:6 */
    cs_uint16 TCKO_SEL             :  3 ; /* bits 9:7 */
    cs_uint16 TCKO_EN              :  1 ; /* bits 10:10 */
    cs_uint16 TCKI_EN              :  1 ; /* bits 11:11 */
    cs_uint16 FREQTUNE             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_SysClkPLLControl_t;
#define     TCKO_SEL_CKOUT_PH1                            0x00
#define     TCKO_SEL_CKOUT_DIV2                           0x04
#define     TCKO_SEL_CKOUT_DIV4                           0x05
#define     TCKO_SEL_CKOUT_DIV8                           0x06
#define     TCKO_SEL_CKOUT_DIV16                          0x07

#define MPIF_BISTCONTROL                         0x00007
#define MPIF_BISTCONTROL_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 START_FIFO_BIST      :  1 ; /* bits 15:15 */
    cs_uint16 START_PROD_BIST      :  1 ; /* bits 14:14 */
    cs_uint16 CANCEL_AUTOBIST      :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 REPAIR_DONE          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 REPAIR_DONE          :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 CANCEL_AUTOBIST      :  1 ; /* bits 13:13 */
    cs_uint16 START_PROD_BIST      :  1 ; /* bits 14:14 */
    cs_uint16 START_FIFO_BIST      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTCONTROL_t;

#define MPIF_BISTSTATUS0                         0x00008
#define MPIF_BISTSTATUS0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRAMER_RX_0          :  2 ; /* bits 15:14 */
    cs_uint16 FRAMER_RX_1          :  2 ; /* bits 13:12 */
    cs_uint16 FRAMER_RX_2          :  2 ; /* bits 11:10 */
    cs_uint16 FRAMER_RX_3          :  2 ; /* bits 9:8 */
    cs_uint16 FRAMER_TX_0          :  2 ; /* bits 7:6 */
    cs_uint16 FRAMER_TX_1          :  2 ; /* bits 5:4 */
    cs_uint16 FRAMER_TX_2          :  2 ; /* bits 3:2 */
    cs_uint16 FRAMER_TX_3          :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRAMER_TX_3          :  2 ; /* bits 1:0 */
    cs_uint16 FRAMER_TX_2          :  2 ; /* bits 3:2 */
    cs_uint16 FRAMER_TX_1          :  2 ; /* bits 5:4 */
    cs_uint16 FRAMER_TX_0          :  2 ; /* bits 7:6 */
    cs_uint16 FRAMER_RX_3          :  2 ; /* bits 9:8 */
    cs_uint16 FRAMER_RX_2          :  2 ; /* bits 11:10 */
    cs_uint16 FRAMER_RX_1          :  2 ; /* bits 13:12 */
    cs_uint16 FRAMER_RX_0          :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTATUS0_t;

#define MPIF_BISTSTATUS1                         0x00009
#define MPIF_BISTSTATUS1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BRIDGE_RX_0          :  2 ; /* bits 15:14 */
    cs_uint16 BRIDGE_RX_1          :  2 ; /* bits 13:12 */
    cs_uint16 BRIDGE_RX_2          :  2 ; /* bits 11:10 */
    cs_uint16 BRIDGE_RX_3          :  2 ; /* bits 9:8 */
    cs_uint16 XETH_RX_0            :  2 ; /* bits 7:6 */
    cs_uint16 XETH_RX_1            :  2 ; /* bits 5:4 */
    cs_uint16 XETH_TX_0            :  2 ; /* bits 3:2 */
    cs_uint16 XETH_TX_1            :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 XETH_TX_1            :  2 ; /* bits 1:0 */
    cs_uint16 XETH_TX_0            :  2 ; /* bits 3:2 */
    cs_uint16 XETH_RX_1            :  2 ; /* bits 5:4 */
    cs_uint16 XETH_RX_0            :  2 ; /* bits 7:6 */
    cs_uint16 BRIDGE_RX_3          :  2 ; /* bits 9:8 */
    cs_uint16 BRIDGE_RX_2          :  2 ; /* bits 11:10 */
    cs_uint16 BRIDGE_RX_1          :  2 ; /* bits 13:12 */
    cs_uint16 BRIDGE_RX_0          :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTATUS1_t;

#define MPIF_BISTSTATUS2                         0x0000a
#define MPIF_BISTSTATUS2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RINGMAC              :  2 ; /* bits 15:14 */
    cs_uint16 Reserved             : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Reserved             : 14 ; /* bits 13:0 */
    cs_uint16 RINGMAC              :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTATUS2_t;

#define MPIF_BISTSTATUS3                         0x0000b
#define MPIF_BISTSTATUS3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Reserved             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Reserved             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTATUS3_t;

#define MPIF_BISTSTATUS4                         0x0000c
#define MPIF_BISTSTATUS4_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STAR_BIST_DONE       :  1 ; /* bits 15:15 */
    cs_uint16 STAR_BIST_BRIDGE     :  1 ; /* bits 14:14 */
    cs_uint16 STAR_BIST_FRAMER     :  1 ; /* bits 13:13 */
    cs_uint16 STAR_BIST_RPR        :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               : 12 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 STAR_BIST_RPR        :  1 ; /* bits 12:12 */
    cs_uint16 STAR_BIST_FRAMER     :  1 ; /* bits 13:13 */
    cs_uint16 STAR_BIST_BRIDGE     :  1 ; /* bits 14:14 */
    cs_uint16 STAR_BIST_DONE       :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTATUS4_t;

#define MPIF_BISTSTARCTL                         0x0000d
#define MPIF_BISTSTARCTL_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ACTIVATE             :  1 ; /* bits 15:15 */
    cs_uint16 CODE                 :  3 ; /* bits 14:12 */
    cs_uint16 NUM_SHIFT            :  8 ; /* bits 11:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 RET                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RET                  :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 NUM_SHIFT            :  8 ; /* bits 11:4 */
    cs_uint16 CODE                 :  3 ; /* bits 14:12 */
    cs_uint16 ACTIVATE             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTARCTL_t;
#define     CODE_STAR_CAP                                 0x00
#define     CODE_STAR_UP                                  0x01
#define     CODE_STAR_SI                                  0x02
#define     CODE_STAR_SO                                  0x03
#define     CODE_STAR_CAPDR                               0x04
#define     CODE_RSVD_UPDR                                0x05
#define     CODE_RSVD_SIDR                                0x06
#define     CODE_RSVD_SODR                                0x07

#define MPIF_BISTSTARDIN                         0x0000e
#define MPIF_BISTSTARDIN_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 WIR_data_in          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 WIR_data_in          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTARDIN_t;

#define MPIF_BISTSTARDOUT                        0x0000f
#define MPIF_BISTSTARDOUT_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 WIR_data_out         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 WIR_data_out         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_BISTSTARDOUT_t;

#define MPIF_GPLL                                0x00010
#define MPIF_GPLL_dft                            0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 VCO_CLKDIV16_EN      :  1 ; /* bits 3:3 */
    cs_uint16 VCO_CLKDIV8_EN       :  1 ; /* bits 2:2 */
    cs_uint16 VCO_CLKDIV4_EN       :  1 ; /* bits 1:1 */
    cs_uint16 VCO_CLKDIV2_EN       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VCO_CLKDIV2_EN       :  1 ; /* bits 0:0 */
    cs_uint16 VCO_CLKDIV4_EN       :  1 ; /* bits 1:1 */
    cs_uint16 VCO_CLKDIV8_EN       :  1 ; /* bits 2:2 */
    cs_uint16 VCO_CLKDIV16_EN      :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} MPIF_GPLL_t;


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* MicroIF */

typedef struct {
  MPIF_CHIPIdLsb_t                         CHIPIdLsb;                     /* addr: 0x0000 */
  MPIF_CHIPIdMsb_t                         CHIPIdMsb;                     /* addr: 0x0001 */
  MPIF_GlobalReset_t                       GlobalReset;                   /* addr: 0x0002 */
  MPIF_GlobalInt_t                         GlobalInt;                     /* addr: 0x0003 */
  MPIF_GlobalIntEnable_t                   GlobalIntEnable;               /* addr: 0x0004 */
  MPIF_Mode_t                              Mode;                          /* addr: 0x0005 */
  MPIF_SysClkPLLControl_t                  SysClkPLLControl;              /* addr: 0x0006 */
  MPIF_BISTCONTROL_t                       BISTCONTROL;                   /* addr: 0x0007 */
  MPIF_BISTSTATUS0_t                       BISTSTATUS0;                   /* addr: 0x0008 */
  MPIF_BISTSTATUS1_t                       BISTSTATUS1;                   /* addr: 0x0009 */
  MPIF_BISTSTATUS2_t                       BISTSTATUS2;                   /* addr: 0x000a */
  MPIF_BISTSTATUS3_t                       BISTSTATUS3;                   /* addr: 0x000b */
  MPIF_BISTSTATUS4_t                       BISTSTATUS4;                   /* addr: 0x000c */
  MPIF_BISTSTARCTL_t                       BISTSTARCTL;                   /* addr: 0x000d */
  MPIF_BISTSTARDIN_t                       BISTSTARDIN;                   /* addr: 0x000e */
  MPIF_BISTSTARDOUT_t                      BISTSTARDOUT;                  /* addr: 0x000f */
  MPIF_GPLL_t                              GPLL;                          /* addr: 0x0010 */
} MicroIF_t;

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * PPRBS::pprbs
 */

#define PPRBS_GenCntl0                           0x02000
#define PPRBS_GenCntl0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 ignore_bp            :  1 ; /* bits 12:12 */
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 sz_val               :  3 ; /* bits 10:8 */
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 sz_disable           :  1 ; /* bits 5:5 */
    cs_uint16 rewrite              :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 enable               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 enable               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 rewrite              :  1 ; /* bits 4:4 */
    cs_uint16 sz_disable           :  1 ; /* bits 5:5 */
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 sz_val               :  3 ; /* bits 10:8 */
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 ignore_bp            :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenCntl0_t;

#define PPRBS_GenIPG0                            0x02001
#define PPRBS_GenIPG0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ipg                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ipg                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenIPG0_t;

#define PPRBS_GenMinLen0                         0x02002
#define PPRBS_GenMinLen0_dft                     0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 min_len              : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 min_len              : 11 ; /* bits 10:0 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenMinLen0_t;

#define PPRBS_GenMaxLen0                         0x02003
#define PPRBS_GenMaxLen0_dft                     0x007f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 max_len              : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 max_len              : 11 ; /* bits 10:0 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenMaxLen0_t;

#define PPRBS_GenNum0                            0x02004
#define PPRBS_GenNum0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 num                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 num                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenNum0_t;

#define PPRBS_GenErr0                            0x02005
#define PPRBS_GenErr0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 cont_err             :  1 ; /* bits 1:1 */
    cs_uint16 single_err           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 single_err           :  1 ; /* bits 0:0 */
    cs_uint16 cont_err             :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenErr0_t;

#define PPRBS_ChkCntl0                           0x02006
#define PPRBS_ChkCntl0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 resync               :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd3               :  3 ;
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 enable               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 enable               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd3               :  3 ;
    cs_uint16 resync               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkCntl0_t;

#define PPRBS_ChkSync0                           0x02007
#define PPRBS_ChkSync0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 sync                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sync                 :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkSync0_t;

#define PPRBS_ChkErr0                            0x02008
#define PPRBS_ChkErr0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 error                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 error                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkErr0_t;

#define PPRBS_ChkByteMSB0                        0x02009
#define PPRBS_ChkByteMSB0_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkByteMSB0_t;

#define PPRBS_ChkByteLSB0                        0x0200a
#define PPRBS_ChkByteLSB0_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkByteLSB0_t;

#define PPRBS_ChkPacketMSB0                      0x0200b
#define PPRBS_ChkPacketMSB0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkPacketMSB0_t;

#define PPRBS_ChkPacketLSB0                      0x0200c
#define PPRBS_ChkPacketLSB0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkPacketLSB0_t;

#define PPRBS_GenByteMSB0                        0x0200d
#define PPRBS_GenByteMSB0_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenByteMSB0_t;

#define PPRBS_GenByteLSB0                        0x0200e
#define PPRBS_GenByteLSB0_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenByteLSB0_t;

#define PPRBS_GenPacketMSB0                      0x0200f
#define PPRBS_GenPacketMSB0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenPacketMSB0_t;

#define PPRBS_GenPacketLSB0                      0x02010
#define PPRBS_GenPacketLSB0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenPacketLSB0_t;

#define PPRBS_GenCntl1                           0x02011
#define PPRBS_GenCntl1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 ignore_bp            :  1 ; /* bits 12:12 */
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 sz_val               :  3 ; /* bits 10:8 */
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 sz_disable           :  1 ; /* bits 5:5 */
    cs_uint16 rewrite              :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 enable               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 enable               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 rewrite              :  1 ; /* bits 4:4 */
    cs_uint16 sz_disable           :  1 ; /* bits 5:5 */
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 sz_val               :  3 ; /* bits 10:8 */
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 ignore_bp            :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenCntl1_t;

#define PPRBS_GenIPG1                            0x02012
#define PPRBS_GenIPG1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ipg                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ipg                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenIPG1_t;

#define PPRBS_GenMinLen1                         0x02013
#define PPRBS_GenMinLen1_dft                     0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 min_len              : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 min_len              : 11 ; /* bits 10:0 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenMinLen1_t;

#define PPRBS_GenMaxLen1                         0x02014
#define PPRBS_GenMaxLen1_dft                     0x007f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 max_len              : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 max_len              : 11 ; /* bits 10:0 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenMaxLen1_t;

#define PPRBS_GenNum1                            0x02015
#define PPRBS_GenNum1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 num                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 num                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenNum1_t;

#define PPRBS_GenErr1                            0x02016
#define PPRBS_GenErr1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 cont_err             :  1 ; /* bits 1:1 */
    cs_uint16 single_err           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 single_err           :  1 ; /* bits 0:0 */
    cs_uint16 cont_err             :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenErr1_t;

#define PPRBS_ChkCntl1                           0x02017
#define PPRBS_ChkCntl1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 resync               :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd3               :  3 ;
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 enable               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 enable               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 chan                 :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 fixed_format         :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd3               :  3 ;
    cs_uint16 resync               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkCntl1_t;

#define PPRBS_ChkSync1                           0x02018
#define PPRBS_ChkSync1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 sync                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sync                 :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkSync1_t;

#define PPRBS_ChkErr1                            0x02019
#define PPRBS_ChkErr1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 error                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 error                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkErr1_t;

#define PPRBS_ChkByteMSB1                        0x0201a
#define PPRBS_ChkByteMSB1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkByteMSB1_t;

#define PPRBS_ChkByteLSB1                        0x0201b
#define PPRBS_ChkByteLSB1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkByteLSB1_t;

#define PPRBS_ChkPacketMSB1                      0x0201c
#define PPRBS_ChkPacketMSB1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkPacketMSB1_t;

#define PPRBS_ChkPacketLSB1                      0x0201d
#define PPRBS_ChkPacketLSB1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_ChkPacketLSB1_t;

#define PPRBS_GenByteMSB1                        0x0201e
#define PPRBS_GenByteMSB1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenByteMSB1_t;

#define PPRBS_GenByteLSB1                        0x0201f
#define PPRBS_GenByteLSB1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenByteLSB1_t;

#define PPRBS_GenPacketMSB1                      0x02020
#define PPRBS_GenPacketMSB1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenPacketMSB1_t;

#define PPRBS_GenPacketLSB1                      0x02021
#define PPRBS_GenPacketLSB1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 count                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_GenPacketLSB1_t;

#define PPRBS_Interrupt                          0x02022
#define PPRBS_Interrupt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RolloverTxPacket1I   :  1 ; /* bits 15:15 */
    cs_uint16 RolloverTxByte1I     :  1 ; /* bits 14:14 */
    cs_uint16 SentPackets1I        :  1 ; /* bits 13:13 */
    cs_uint16 RolloverPacket1I     :  1 ; /* bits 12:12 */
    cs_uint16 RolloverByte1I       :  1 ; /* bits 11:11 */
    cs_uint16 Rollover1I           :  1 ; /* bits 10:10 */
    cs_uint16 BitError1I           :  1 ; /* bits 9:9 */
    cs_uint16 SyncState1I          :  1 ; /* bits 8:8 */
    cs_uint16 RolloverTxPacket0I   :  1 ; /* bits 7:7 */
    cs_uint16 RolloverTxByte0I     :  1 ; /* bits 6:6 */
    cs_uint16 SentPackets0I        :  1 ; /* bits 5:5 */
    cs_uint16 RolloverPacket0I     :  1 ; /* bits 4:4 */
    cs_uint16 RolloverByte0I       :  1 ; /* bits 3:3 */
    cs_uint16 Rollover0I           :  1 ; /* bits 2:2 */
    cs_uint16 BitError0I           :  1 ; /* bits 1:1 */
    cs_uint16 SyncState0I          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SyncState0I          :  1 ; /* bits 0:0 */
    cs_uint16 BitError0I           :  1 ; /* bits 1:1 */
    cs_uint16 Rollover0I           :  1 ; /* bits 2:2 */
    cs_uint16 RolloverByte0I       :  1 ; /* bits 3:3 */
    cs_uint16 RolloverPacket0I     :  1 ; /* bits 4:4 */
    cs_uint16 SentPackets0I        :  1 ; /* bits 5:5 */
    cs_uint16 RolloverTxByte0I     :  1 ; /* bits 6:6 */
    cs_uint16 RolloverTxPacket0I   :  1 ; /* bits 7:7 */
    cs_uint16 SyncState1I          :  1 ; /* bits 8:8 */
    cs_uint16 BitError1I           :  1 ; /* bits 9:9 */
    cs_uint16 Rollover1I           :  1 ; /* bits 10:10 */
    cs_uint16 RolloverByte1I       :  1 ; /* bits 11:11 */
    cs_uint16 RolloverPacket1I     :  1 ; /* bits 12:12 */
    cs_uint16 SentPackets1I        :  1 ; /* bits 13:13 */
    cs_uint16 RolloverTxByte1I     :  1 ; /* bits 14:14 */
    cs_uint16 RolloverTxPacket1I   :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_Interrupt_t;

#define PPRBS_IntMask                            0x02023
#define PPRBS_IntMask_dft                        0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RolloverTxPacket1M   :  1 ; /* bits 15:15 */
    cs_uint16 RolloverTxByte1M     :  1 ; /* bits 14:14 */
    cs_uint16 SentPackets1M        :  1 ; /* bits 13:13 */
    cs_uint16 RolloverPacket1M     :  1 ; /* bits 12:12 */
    cs_uint16 RolloverByte1M       :  1 ; /* bits 11:11 */
    cs_uint16 Rollover1M           :  1 ; /* bits 10:10 */
    cs_uint16 BitError1M           :  1 ; /* bits 9:9 */
    cs_uint16 SyncState1M          :  1 ; /* bits 8:8 */
    cs_uint16 RolloverTxPacket0M   :  1 ; /* bits 7:7 */
    cs_uint16 RolloverTxByte0M     :  1 ; /* bits 6:6 */
    cs_uint16 SentPackets0M        :  1 ; /* bits 5:5 */
    cs_uint16 RolloverPacket0M     :  1 ; /* bits 4:4 */
    cs_uint16 RolloverByte0M       :  1 ; /* bits 3:3 */
    cs_uint16 Rollover0M           :  1 ; /* bits 2:2 */
    cs_uint16 BitError0M           :  1 ; /* bits 1:1 */
    cs_uint16 SyncState0M          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SyncState0M          :  1 ; /* bits 0:0 */
    cs_uint16 BitError0M           :  1 ; /* bits 1:1 */
    cs_uint16 Rollover0M           :  1 ; /* bits 2:2 */
    cs_uint16 RolloverByte0M       :  1 ; /* bits 3:3 */
    cs_uint16 RolloverPacket0M     :  1 ; /* bits 4:4 */
    cs_uint16 SentPackets0M        :  1 ; /* bits 5:5 */
    cs_uint16 RolloverTxByte0M     :  1 ; /* bits 6:6 */
    cs_uint16 RolloverTxPacket0M   :  1 ; /* bits 7:7 */
    cs_uint16 SyncState1M          :  1 ; /* bits 8:8 */
    cs_uint16 BitError1M           :  1 ; /* bits 9:9 */
    cs_uint16 Rollover1M           :  1 ; /* bits 10:10 */
    cs_uint16 RolloverByte1M       :  1 ; /* bits 11:11 */
    cs_uint16 RolloverPacket1M     :  1 ; /* bits 12:12 */
    cs_uint16 SentPackets1M        :  1 ; /* bits 13:13 */
    cs_uint16 RolloverTxByte1M     :  1 ; /* bits 14:14 */
    cs_uint16 RolloverTxPacket1M   :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PPRBS_IntMask_t;


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* PPRBS */

typedef struct {
  PPRBS_GenCntl0_t                         GenCntl0;                      /* addr: 0x0000 */
  PPRBS_GenIPG0_t                          GenIPG0;                       /* addr: 0x0001 */
  PPRBS_GenMinLen0_t                       GenMinLen0;                    /* addr: 0x0002 */
  PPRBS_GenMaxLen0_t                       GenMaxLen0;                    /* addr: 0x0003 */
  PPRBS_GenNum0_t                          GenNum0;                       /* addr: 0x0004 */
  PPRBS_GenErr0_t                          GenErr0;                       /* addr: 0x0005 */
  PPRBS_ChkCntl0_t                         ChkCntl0;                      /* addr: 0x0006 */
  PPRBS_ChkSync0_t                         ChkSync0;                      /* addr: 0x0007 */
  PPRBS_ChkErr0_t                          ChkErr0;                       /* addr: 0x0008 */
  PPRBS_ChkByteMSB0_t                      ChkByteMSB0;                   /* addr: 0x0009 */
  PPRBS_ChkByteLSB0_t                      ChkByteLSB0;                   /* addr: 0x000a */
  PPRBS_ChkPacketMSB0_t                    ChkPacketMSB0;                 /* addr: 0x000b */
  PPRBS_ChkPacketLSB0_t                    ChkPacketLSB0;                 /* addr: 0x000c */
  PPRBS_GenByteMSB0_t                      GenByteMSB0;                   /* addr: 0x000d */
  PPRBS_GenByteLSB0_t                      GenByteLSB0;                   /* addr: 0x000e */
  PPRBS_GenPacketMSB0_t                    GenPacketMSB0;                 /* addr: 0x000f */
  PPRBS_GenPacketLSB0_t                    GenPacketLSB0;                 /* addr: 0x0010 */
  PPRBS_GenCntl1_t                         GenCntl1;                      /* addr: 0x0011 */
  PPRBS_GenIPG1_t                          GenIPG1;                       /* addr: 0x0012 */
  PPRBS_GenMinLen1_t                       GenMinLen1;                    /* addr: 0x0013 */
  PPRBS_GenMaxLen1_t                       GenMaxLen1;                    /* addr: 0x0014 */
  PPRBS_GenNum1_t                          GenNum1;                       /* addr: 0x0015 */
  PPRBS_GenErr1_t                          GenErr1;                       /* addr: 0x0016 */
  PPRBS_ChkCntl1_t                         ChkCntl1;                      /* addr: 0x0017 */
  PPRBS_ChkSync1_t                         ChkSync1;                      /* addr: 0x0018 */
  PPRBS_ChkErr1_t                          ChkErr1;                       /* addr: 0x0019 */
  PPRBS_ChkByteMSB1_t                      ChkByteMSB1;                   /* addr: 0x001a */
  PPRBS_ChkByteLSB1_t                      ChkByteLSB1;                   /* addr: 0x001b */
  PPRBS_ChkPacketMSB1_t                    ChkPacketMSB1;                 /* addr: 0x001c */
  PPRBS_ChkPacketLSB1_t                    ChkPacketLSB1;                 /* addr: 0x001d */
  PPRBS_GenByteMSB1_t                      GenByteMSB1;                   /* addr: 0x001e */
  PPRBS_GenByteLSB1_t                      GenByteLSB1;                   /* addr: 0x001f */
  PPRBS_GenPacketMSB1_t                    GenPacketMSB1;                 /* addr: 0x0020 */
  PPRBS_GenPacketLSB1_t                    GenPacketLSB1;                 /* addr: 0x0021 */
  PPRBS_Interrupt_t                        Interrupt;                     /* addr: 0x0022 */
  PPRBS_IntMask_t                          IntMask;                       /* addr: 0x0023 */
} PPRBS_t;

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::global
 */

#define FR_GLOBAL_JTAGIdLsb                      0x08000
#define FR_GLOBAL_JTAGIdLsb_dft                  0x9049
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IdLsb                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IdLsb                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_JTAGIdLsb_t;

#define FR_GLOBAL_JTAGIdMsb                      0x08001
#define FR_GLOBAL_JTAGIdMsb_dft                  0x2422
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IdMsb                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IdMsb                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_JTAGIdMsb_t;

#define FR_GLOBAL_MasterReset                    0x08004
#define FR_GLOBAL_MasterReset_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GlobalReset          :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd4               :  3 ;
    cs_uint16 RxReset              :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TxReset              :  1 ; /* bits 9:9 */
    cs_uint16 DtReset              :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  4 ;
    cs_uint16 RxLogicReset         :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TxLogicReset         :  1 ; /* bits 1:1 */
    cs_uint16 DtLogicReset         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DtLogicReset         :  1 ; /* bits 0:0 */
    cs_uint16 TxLogicReset         :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RxLogicReset         :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd2               :  4 ;
    cs_uint16 DtReset              :  1 ; /* bits 8:8 */
    cs_uint16 TxReset              :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RxReset              :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd4               :  3 ;
    cs_uint16 GlobalReset          :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_MasterReset_t;

#define FR_GLOBAL_MasterInt                      0x08010
#define FR_GLOBAL_MasterInt_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TxFrStartI           :  1 ; /* bits 15:15 */
    cs_uint16 APSI                 :  1 ; /* bits 14:14 */
    cs_uint16 ClkFailI             :  1 ; /* bits 13:13 */
    cs_uint16 GPIOI                :  1 ; /* bits 12:12 */
    cs_uint16 TxI                  :  1 ; /* bits 11:11 */
    cs_uint16 DatacomTxI           :  1 ; /* bits 10:10 */
    cs_uint16 TxCellPI             :  1 ; /* bits 9:9 */
    cs_uint16 TxPktPI              :  1 ; /* bits 8:8 */
    cs_uint16 RxFrStartI           :  1 ; /* bits 7:7 */
    cs_uint16 MbusTimeoutI         :  1 ; /* bits 6:6 */
    cs_uint16 RxSI                 :  1 ; /* bits 5:5 */
    cs_uint16 RxLI                 :  1 ; /* bits 4:4 */
    cs_uint16 RxPI                 :  1 ; /* bits 3:3 */
    cs_uint16 ResetI               :  1 ; /* bits 2:2 */
    cs_uint16 RxCellPI             :  1 ; /* bits 1:1 */
    cs_uint16 RxPktPI              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RxPktPI              :  1 ; /* bits 0:0 */
    cs_uint16 RxCellPI             :  1 ; /* bits 1:1 */
    cs_uint16 ResetI               :  1 ; /* bits 2:2 */
    cs_uint16 RxPI                 :  1 ; /* bits 3:3 */
    cs_uint16 RxLI                 :  1 ; /* bits 4:4 */
    cs_uint16 RxSI                 :  1 ; /* bits 5:5 */
    cs_uint16 MbusTimeoutI         :  1 ; /* bits 6:6 */
    cs_uint16 RxFrStartI           :  1 ; /* bits 7:7 */
    cs_uint16 TxPktPI              :  1 ; /* bits 8:8 */
    cs_uint16 TxCellPI             :  1 ; /* bits 9:9 */
    cs_uint16 DatacomTxI           :  1 ; /* bits 10:10 */
    cs_uint16 TxI                  :  1 ; /* bits 11:11 */
    cs_uint16 GPIOI                :  1 ; /* bits 12:12 */
    cs_uint16 ClkFailI             :  1 ; /* bits 13:13 */
    cs_uint16 APSI                 :  1 ; /* bits 14:14 */
    cs_uint16 TxFrStartI           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_MasterInt_t;

#define FR_GLOBAL_MasterMask                     0x08014
#define FR_GLOBAL_MasterMask_dft                 0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TxFrStartM           :  1 ; /* bits 15:15 */
    cs_uint16 APSM                 :  1 ; /* bits 14:14 */
    cs_uint16 ClkFailM             :  1 ; /* bits 13:13 */
    cs_uint16 GPIOM                :  1 ; /* bits 12:12 */
    cs_uint16 TxM                  :  1 ; /* bits 11:11 */
    cs_uint16 DatacomTxM           :  1 ; /* bits 10:10 */
    cs_uint16 TxCellPM             :  1 ; /* bits 9:9 */
    cs_uint16 TxPktPM              :  1 ; /* bits 8:8 */
    cs_uint16 RxFrStartM           :  1 ; /* bits 7:7 */
    cs_uint16 MbusTimeoutM         :  1 ; /* bits 6:6 */
    cs_uint16 RxSM                 :  1 ; /* bits 5:5 */
    cs_uint16 RxLM                 :  1 ; /* bits 4:4 */
    cs_uint16 RxPM                 :  1 ; /* bits 3:3 */
    cs_uint16 ResetM               :  1 ; /* bits 2:2 */
    cs_uint16 RxCellPM             :  1 ; /* bits 1:1 */
    cs_uint16 RxPktPM              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RxPktPM              :  1 ; /* bits 0:0 */
    cs_uint16 RxCellPM             :  1 ; /* bits 1:1 */
    cs_uint16 ResetM               :  1 ; /* bits 2:2 */
    cs_uint16 RxPM                 :  1 ; /* bits 3:3 */
    cs_uint16 RxLM                 :  1 ; /* bits 4:4 */
    cs_uint16 RxSM                 :  1 ; /* bits 5:5 */
    cs_uint16 MbusTimeoutM         :  1 ; /* bits 6:6 */
    cs_uint16 RxFrStartM           :  1 ; /* bits 7:7 */
    cs_uint16 TxPktPM              :  1 ; /* bits 8:8 */
    cs_uint16 TxCellPM             :  1 ; /* bits 9:9 */
    cs_uint16 DatacomTxM           :  1 ; /* bits 10:10 */
    cs_uint16 TxM                  :  1 ; /* bits 11:11 */
    cs_uint16 GPIOM                :  1 ; /* bits 12:12 */
    cs_uint16 ClkFailM             :  1 ; /* bits 13:13 */
    cs_uint16 APSM                 :  1 ; /* bits 14:14 */
    cs_uint16 TxFrStartM           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_MasterMask_t;

#define FR_GLOBAL_MasterInt2                     0x08015
#define FR_GLOBAL_MasterInt2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 StreamTx_GFP_I       :  1 ; /* bits 2:2 */
    cs_uint16 StreamRx_GFP_I       :  1 ; /* bits 1:1 */
    cs_uint16 DatacomRxI           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DatacomRxI           :  1 ; /* bits 0:0 */
    cs_uint16 StreamRx_GFP_I       :  1 ; /* bits 1:1 */
    cs_uint16 StreamTx_GFP_I       :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_MasterInt2_t;

#define FR_GLOBAL_MasterMask2                    0x08016
#define FR_GLOBAL_MasterMask2_dft                0x0007
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 StreamTx_GFP_M       :  1 ; /* bits 2:2 */
    cs_uint16 StreamRx_GFP_M       :  1 ; /* bits 1:1 */
    cs_uint16 DatacomRxM           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DatacomRxM           :  1 ; /* bits 0:0 */
    cs_uint16 StreamRx_GFP_M       :  1 ; /* bits 1:1 */
    cs_uint16 StreamTx_GFP_M       :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_MasterMask2_t;

#define FR_GLOBAL_ClockStatus                    0x08020
#define FR_GLOBAL_ClockStatus_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RxClkS               :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd2               : 12 ;
    cs_uint16 DtTxClkS             :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TxClkS               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxClkS               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DtTxClkS             :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               : 12 ;
    cs_uint16 RxClkS               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_ClockStatus_t;

#define FR_GLOBAL_ClockInt                       0x08021
#define FR_GLOBAL_ClockInt_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RxClkI               :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd2               : 12 ;
    cs_uint16 DtTxClkI             :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TxClkI               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxClkI               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DtTxClkI             :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               : 12 ;
    cs_uint16 RxClkI               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_ClockInt_t;

#define FR_GLOBAL_ClockMask                      0x08022
#define FR_GLOBAL_ClockMask_dft                  0x8005
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RxClkM               :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd2               : 12 ;
    cs_uint16 DtTxClkM             :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TxClkM               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxClkM               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DtTxClkM             :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               : 12 ;
    cs_uint16 RxClkM               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_ClockMask_t;

#define FR_GLOBAL_CellRxInt                      0x08028
#define FR_GLOBAL_CellRxInt_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 CellRxI              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CellRxI              :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_CellRxInt_t;

#define FR_GLOBAL_CellRxMask                     0x08029
#define FR_GLOBAL_CellRxMask_dft                 0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 CellRxM              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CellRxM              :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_CellRxMask_t;

#define FR_GLOBAL_PacketRxInt                    0x0802a
#define FR_GLOBAL_PacketRxInt_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 PacketRxI            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PacketRxI            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_PacketRxInt_t;

#define FR_GLOBAL_PacketRxMask                   0x0802b
#define FR_GLOBAL_PacketRxMask_dft               0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 PacketRxM            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PacketRxM            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_PacketRxMask_t;

#define FR_GLOBAL_CellTxInt                      0x0802c
#define FR_GLOBAL_CellTxInt_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 CellTxI              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CellTxI              :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_CellTxInt_t;

#define FR_GLOBAL_CellTxMask                     0x0802d
#define FR_GLOBAL_CellTxMask_dft                 0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 CellTxM              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CellTxM              :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_CellTxMask_t;

#define FR_GLOBAL_PacketTxInt                    0x0802e
#define FR_GLOBAL_PacketTxInt_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 PacketTxI            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PacketTxI            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_PacketTxInt_t;

#define FR_GLOBAL_PacketTxMask                   0x0802f
#define FR_GLOBAL_PacketTxMask_dft               0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 PacketTxM            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PacketTxM            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_PacketTxMask_t;

#define FR_GLOBAL_GPIOControl                    0x08030
#define FR_GLOBAL_GPIOControl_dft                0xf0c0
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DIR                  :  8 ; /* bits 15:8 */
    cs_uint16 O                    :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 O                    :  8 ; /* bits 7:0 */
    cs_uint16 DIR                  :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_GPIOControl_t;

#define FR_GLOBAL_GPIOValue                      0x08031
#define FR_GLOBAL_GPIOValue_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 I                    :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 I                    :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_GPIOValue_t;

#define FR_GLOBAL_GPIOInt                        0x08032
#define FR_GLOBAL_GPIOInt_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RI                   :  8 ; /* bits 15:8 */
    cs_uint16 FI                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FI                   :  8 ; /* bits 7:0 */
    cs_uint16 RI                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_GPIOInt_t;

#define FR_GLOBAL_GPIOMask                       0x08033
#define FR_GLOBAL_GPIOMask_dft                   0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RM                   :  8 ; /* bits 15:8 */
    cs_uint16 FM                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FM                   :  8 ; /* bits 7:0 */
    cs_uint16 RM                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_GPIOMask_t;

#define FR_GLOBAL_LoopBack                       0x08034
#define FR_GLOBAL_LoopBack_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 loopTimeMode         :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 Terminal             :  1 ; /* bits 1:1 */
    cs_uint16 Line                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Line                 :  1 ; /* bits 0:0 */
    cs_uint16 Terminal             :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 loopTimeMode         :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_LoopBack_t;

#define FR_GLOBAL_DebugPort                      0x08035
#define FR_GLOBAL_DebugPort_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 MuxSel               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MuxSel               :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_DebugPort_t;

#define FR_GLOBAL_Rx_Carrier_Msk                 0x08036
#define FR_GLOBAL_Rx_Carrier_Msk_dft             0x00ee
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Carrier_Act_High     :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 C_Mask_LO_TxS_Clk    :  1 ; /* bits 13:13 */
    cs_uint16 C_Mask_LO_RxS_Clk    :  1 ; /* bits 12:12 */
    cs_uint16 C_Mask_dLOS          :  1 ; /* bits 11:11 */
    cs_uint16 C_Mask_dLOF          :  1 ; /* bits 10:10 */
    cs_uint16 C_Mask_dSEF          :  1 ; /* bits 9:9 */
    cs_uint16 C_Mask_dAISL         :  1 ; /* bits 8:8 */
    cs_uint16 C_Mask_dLOP          :  4 ; /* bits 7:4 */
    cs_uint16 C_Mask_dAISP         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 C_Mask_dAISP         :  4 ; /* bits 3:0 */
    cs_uint16 C_Mask_dLOP          :  4 ; /* bits 7:4 */
    cs_uint16 C_Mask_dAISL         :  1 ; /* bits 8:8 */
    cs_uint16 C_Mask_dSEF          :  1 ; /* bits 9:9 */
    cs_uint16 C_Mask_dLOF          :  1 ; /* bits 10:10 */
    cs_uint16 C_Mask_dLOS          :  1 ; /* bits 11:11 */
    cs_uint16 C_Mask_LO_RxS_Clk    :  1 ; /* bits 12:12 */
    cs_uint16 C_Mask_LO_TxS_Clk    :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Carrier_Act_High     :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_Rx_Carrier_Msk_t;

#define FR_GLOBAL_LineSkewControl                0x08038
#define FR_GLOBAL_LineSkewControl_dft            0x0c0c
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 TxCoarse             :  4 ; /* bits 13:10 */
    cs_uint16 TxFine               :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 RxCoarse             :  4 ; /* bits 5:2 */
    cs_uint16 RxFine               :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RxFine               :  2 ; /* bits 1:0 */
    cs_uint16 RxCoarse             :  4 ; /* bits 5:2 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 TxFine               :  2 ; /* bits 9:8 */
    cs_uint16 TxCoarse             :  4 ; /* bits 13:10 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_LineSkewControl_t;

#define FR_GLOBAL_DatacomSkewControl             0x08039
#define FR_GLOBAL_DatacomSkewControl_dft         0x0c0c
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 DtTxCoarse           :  4 ; /* bits 13:10 */
    cs_uint16 DtTxFine             :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 DtRxCoarse           :  4 ; /* bits 5:2 */
    cs_uint16 DtRxFine             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DtRxFine             :  2 ; /* bits 1:0 */
    cs_uint16 DtRxCoarse           :  4 ; /* bits 5:2 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 DtTxFine             :  2 ; /* bits 9:8 */
    cs_uint16 DtTxCoarse           :  4 ; /* bits 13:10 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GLOBAL_DatacomSkewControl_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::datacomRx
 */

#define FR_DATACOMRX_Control                     0x08200
#define FR_DATACOMRX_Control_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 reset                :  1 ; /* bits 1:1 */
    cs_uint16 evenParity           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 evenParity           :  1 ; /* bits 0:0 */
    cs_uint16 reset                :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMRX_Control_t;

#define FR_DATACOMRX_Interrupt                   0x08201
#define FR_DATACOMRX_Interrupt_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 streamRxS            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 streamRxS            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMRX_Interrupt_t;

#define FR_DATACOMRX_Mask                        0x08202
#define FR_DATACOMRX_Mask_dft                    0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 streamRxM            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 streamRxM            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMRX_Mask_t;

#define FR_DATACOMRX_StrConfig                   0x08240
#define FR_DATACOMRX_StrConfig_STRIDE            4
#define FR_DATACOMRX_StrConfig_COUNT             4
#define FR_DATACOMRX_StrConfig_dft               0x8000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 dataType             :  2 ; /* bits 15:14 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 burstLength          :  8 ; /* bits 11:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 reset                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 burstLength          :  8 ; /* bits 11:4 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 dataType             :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMRX_StrConfig_t;
#define     dataType_CELL                                 0x00
#define     dataType_PACKET                               0x02
#define     dataType_CLEAR                                0x03

#define FR_DATACOMRX_StrInt                      0x08241
#define FR_DATACOMRX_StrInt_STRIDE               4
#define FR_DATACOMRX_StrInt_COUNT                4
#define FR_DATACOMRX_StrInt_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               : 13 ;
    cs_uint16 FIFO_Par_Err_I       :  1 ; /* bits 2:2 */
    cs_uint16 badFrameI            :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 badFrameI            :  1 ; /* bits 1:1 */
    cs_uint16 FIFO_Par_Err_I       :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMRX_StrInt_t;

#define FR_DATACOMRX_StrMask                     0x08242
#define FR_DATACOMRX_StrMask_STRIDE              4
#define FR_DATACOMRX_StrMask_COUNT               4
#define FR_DATACOMRX_StrMask_dft                 0x0006
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               : 13 ;
    cs_uint16 FIFO_Par_Err_M       :  1 ; /* bits 2:2 */
    cs_uint16 badFrameM            :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 badFrameM            :  1 ; /* bits 1:1 */
    cs_uint16 FIFO_Par_Err_M       :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMRX_StrMask_t;

#define FR_DATACOMRX_StrStatus                   0x08243
#define FR_DATACOMRX_StrStatus_STRIDE            4
#define FR_DATACOMRX_StrStatus_COUNT             4
#define FR_DATACOMRX_StrStatus_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               : 14 ;
    cs_uint16 badFrameS            :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 badFrameS            :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd2               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMRX_StrStatus_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::gfp_rx
 */

#define FR_GFP_RX_GFP_Control_0                  0x08850
#define FR_GFP_RX_GFP_Control_0_dft              0x0094
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GFP_Reset            :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 GFP_Error_Pkt_on_CRC_Err :  1 ; /* bits 7:7 */
    cs_uint16 GFP_Dis_1bit_Err_Corr :  1 ; /* bits 6:6 */
    cs_uint16 GFP_Alpha            :  3 ; /* bits 5:3 */
    cs_uint16 GFP_Delta            :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GFP_Delta            :  3 ; /* bits 2:0 */
    cs_uint16 GFP_Alpha            :  3 ; /* bits 5:3 */
    cs_uint16 GFP_Dis_1bit_Err_Corr :  1 ; /* bits 6:6 */
    cs_uint16 GFP_Error_Pkt_on_CRC_Err :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 GFP_Reset            :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_RX_GFP_Control_0_t;

#define FR_GFP_RX_GFP_Control_1                  0x08851
#define FR_GFP_RX_GFP_Control_1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 GFP_Dis_Header_XOR   :  1 ; /* bits 12:12 */
    cs_uint16 GFP_Dis_Core_Header_descr :  1 ; /* bits 11:11 */
    cs_uint16 GFP_Dis_Descrambler  :  1 ; /* bits 10:10 */
    cs_uint16 GFP_Pass_Core_Hdr    :  1 ; /* bits 9:9 */
    cs_uint16 GFP_Dis_Payload_Hdr_Proc :  1 ; /* bits 8:8 */
    cs_uint16 GFP_Pass_CM_Frame    :  1 ; /* bits 7:7 */
    cs_uint16 GFP_Dis_PTI          :  1 ; /* bits 6:6 */
    cs_uint16 GFP_Send_Payload_Hdr :  1 ; /* bits 5:5 */
    cs_uint16 GFP_Pass_FCS         :  1 ; /* bits 4:4 */
    cs_uint16 GFP_Dis_drop_if_thec_err :  1 ; /* bits 3:3 */
    cs_uint16 GFP_Sel_FCS_Order    :  1 ; /* bits 2:2 */
    cs_uint16 GFP_Drop_Short_pkts  :  1 ; /* bits 1:1 */
    cs_uint16 GFP_Drop_Long_pkts   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GFP_Drop_Long_pkts   :  1 ; /* bits 0:0 */
    cs_uint16 GFP_Drop_Short_pkts  :  1 ; /* bits 1:1 */
    cs_uint16 GFP_Sel_FCS_Order    :  1 ; /* bits 2:2 */
    cs_uint16 GFP_Dis_drop_if_thec_err :  1 ; /* bits 3:3 */
    cs_uint16 GFP_Pass_FCS         :  1 ; /* bits 4:4 */
    cs_uint16 GFP_Send_Payload_Hdr :  1 ; /* bits 5:5 */
    cs_uint16 GFP_Dis_PTI          :  1 ; /* bits 6:6 */
    cs_uint16 GFP_Pass_CM_Frame    :  1 ; /* bits 7:7 */
    cs_uint16 GFP_Dis_Payload_Hdr_Proc :  1 ; /* bits 8:8 */
    cs_uint16 GFP_Pass_Core_Hdr    :  1 ; /* bits 9:9 */
    cs_uint16 GFP_Dis_Descrambler  :  1 ; /* bits 10:10 */
    cs_uint16 GFP_Dis_Core_Header_descr :  1 ; /* bits 11:11 */
    cs_uint16 GFP_Dis_Header_XOR   :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_RX_GFP_Control_1_t;
#define     GFP_Drop_Long_pkts_GFP_Rx_RPR_mode            0x83
#define     GFP_Drop_Long_pkts_GFP_Rx_RPR_F_mode          0x93
#define     GFP_Drop_Long_pkts_GFP_Rx_pass_pH_mode        0xa3
#define     GFP_Drop_Long_pkts_GFP_Rx_pass_pH_F_mode      0xb3
#define     GFP_Drop_Long_pkts_GFP_Rx_pass_pH_X_mode      0x1fb
#define     GFP_Drop_Long_pkts_GFP_Rx_semi_tran_mode      0xaeb
#define     GFP_Drop_Long_pkts_GFP_Rx_semi_tran_F_mode    0xafb
#define     GFP_Drop_Long_pkts_GFP_Rx_transparent_mode    0xffb

#define FR_GFP_RX_GFP_Control_2                  0x08852
#define FR_GFP_RX_GFP_Control_2_dft              0x0100
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 GFP_Dis_Exp_UPI      :  1 ; /* bits 8:8 */
    cs_uint16 GFP_Exp_UPI          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GFP_Exp_UPI          :  8 ; /* bits 7:0 */
    cs_uint16 GFP_Dis_Exp_UPI      :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_RX_GFP_Control_2_t;

#define FR_GFP_RX_GFP_Intr                       0x08854
#define FR_GFP_RX_GFP_Intr_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 Long_Pkt_I           :  1 ; /* bits 9:9 */
    cs_uint16 Short_Pkt_I          :  1 ; /* bits 8:8 */
    cs_uint16 Onebit_HEC_Err_I     :  1 ; /* bits 7:7 */
    cs_uint16 Mbit_HEC_Err_I       :  1 ; /* bits 6:6 */
    cs_uint16 OverFlow_I           :  1 ; /* bits 5:5 */
    cs_uint16 Dropped_Pkt_I        :  1 ; /* bits 4:4 */
    cs_uint16 Sync_Err_I           :  1 ; /* bits 3:3 */
    cs_uint16 Loss_Client_I        :  1 ; /* bits 2:2 */
    cs_uint16 Loss_Sync_I          :  1 ; /* bits 1:1 */
    cs_uint16 CRC_Err_I            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CRC_Err_I            :  1 ; /* bits 0:0 */
    cs_uint16 Loss_Sync_I          :  1 ; /* bits 1:1 */
    cs_uint16 Loss_Client_I        :  1 ; /* bits 2:2 */
    cs_uint16 Sync_Err_I           :  1 ; /* bits 3:3 */
    cs_uint16 Dropped_Pkt_I        :  1 ; /* bits 4:4 */
    cs_uint16 OverFlow_I           :  1 ; /* bits 5:5 */
    cs_uint16 Mbit_HEC_Err_I       :  1 ; /* bits 6:6 */
    cs_uint16 Onebit_HEC_Err_I     :  1 ; /* bits 7:7 */
    cs_uint16 Short_Pkt_I          :  1 ; /* bits 8:8 */
    cs_uint16 Long_Pkt_I           :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_RX_GFP_Intr_t;

#define FR_GFP_RX_GFP_Mask                       0x08855
#define FR_GFP_RX_GFP_Mask_dft                   0x03ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 Long_Pkt_M           :  1 ; /* bits 9:9 */
    cs_uint16 Short_Pkt_M          :  1 ; /* bits 8:8 */
    cs_uint16 Onebit_HEC_Err_M     :  1 ; /* bits 7:7 */
    cs_uint16 Mbit_HEC_Err_M       :  1 ; /* bits 6:6 */
    cs_uint16 OverFlow_M           :  1 ; /* bits 5:5 */
    cs_uint16 Dropped_Pkt_M        :  1 ; /* bits 4:4 */
    cs_uint16 Sync_Err_M           :  1 ; /* bits 3:3 */
    cs_uint16 Loss_Client_M        :  1 ; /* bits 2:2 */
    cs_uint16 Loss_Sync_M          :  1 ; /* bits 1:1 */
    cs_uint16 CRC_Err_M            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CRC_Err_M            :  1 ; /* bits 0:0 */
    cs_uint16 Loss_Sync_M          :  1 ; /* bits 1:1 */
    cs_uint16 Loss_Client_M        :  1 ; /* bits 2:2 */
    cs_uint16 Sync_Err_M           :  1 ; /* bits 3:3 */
    cs_uint16 Dropped_Pkt_M        :  1 ; /* bits 4:4 */
    cs_uint16 OverFlow_M           :  1 ; /* bits 5:5 */
    cs_uint16 Mbit_HEC_Err_M       :  1 ; /* bits 6:6 */
    cs_uint16 Onebit_HEC_Err_M     :  1 ; /* bits 7:7 */
    cs_uint16 Short_Pkt_M          :  1 ; /* bits 8:8 */
    cs_uint16 Long_Pkt_M           :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_RX_GFP_Mask_t;

#define FR_GFP_RX_GFP_Status                     0x08856
#define FR_GFP_RX_GFP_Status_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               : 12 ;
    cs_uint16 Sync_Err_S           :  1 ; /* bits 3:3 */
    cs_uint16 Loss_Client_S        :  1 ; /* bits 2:2 */
    cs_uint16 Loss_Sync_S          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Loss_Sync_S          :  1 ; /* bits 1:1 */
    cs_uint16 Loss_Client_S        :  1 ; /* bits 2:2 */
    cs_uint16 Sync_Err_S           :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd2               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_RX_GFP_Status_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::stream[0..3]Rx
 */

#define FR_STREAMRX_STRIDE                       256
#define FR_STREAMRX_COUNT                        4
#define FR_STREAMRX_CellControl                  0x08800
#define FR_STREAMRX_CellControl_dft              0x4009
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
    cs_uint16 cosAdd               :  1 ; /* bits 14:14 */
    cs_uint16 LCDtimer             :  2 ; /* bits 13:12 */
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 DropCells            :  1 ; /* bits 4:4 */
    cs_uint16 DropIdle             :  1 ; /* bits 3:3 */
    cs_uint16 DisDScr              :  1 ; /* bits 2:2 */
    cs_uint16 PassHEC              :  1 ; /* bits 1:1 */
    cs_uint16 CorrHec              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CorrHec              :  1 ; /* bits 0:0 */
    cs_uint16 PassHEC              :  1 ; /* bits 1:1 */
    cs_uint16 DisDScr              :  1 ; /* bits 2:2 */
    cs_uint16 DropIdle             :  1 ; /* bits 3:3 */
    cs_uint16 DropCells            :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 LCDtimer             :  2 ; /* bits 13:12 */
    cs_uint16 cosAdd               :  1 ; /* bits 14:14 */
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_CellControl_t;
#define     LCDtimer_LCD_4                                0x00
#define     LCDtimer_LCD_2                                0x01
#define     LCDtimer_LCD_1                                0x02
#define     LCDtimer_LCD_HALF                             0x03

#define FR_STREAMRX_CellPattern                  0x08801
#define FR_STREAMRX_CellPattern_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GFC                  :  4 ; /* bits 15:12 */
    cs_uint16 PTI                  :  3 ; /* bits 11:9 */
    cs_uint16 CLP                  :  1 ; /* bits 8:8 */
    cs_uint16 GFCmask              :  4 ; /* bits 7:4 */
    cs_uint16 PTImask              :  3 ; /* bits 3:1 */
    cs_uint16 CLPmask              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CLPmask              :  1 ; /* bits 0:0 */
    cs_uint16 PTImask              :  3 ; /* bits 3:1 */
    cs_uint16 GFCmask              :  4 ; /* bits 7:4 */
    cs_uint16 CLP                  :  1 ; /* bits 8:8 */
    cs_uint16 PTI                  :  3 ; /* bits 11:9 */
    cs_uint16 GFC                  :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_CellPattern_t;

#define FR_STREAMRX_CellIntr                     0x08802
#define FR_STREAMRX_CellIntr_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CellCntI             :  1 ; /* bits 15:15 */
    cs_uint16 IdleCntI             :  1 ; /* bits 14:14 */
    cs_uint16 HECDropI             :  1 ; /* bits 13:13 */
    cs_uint16 HECCorrI             :  1 ; /* bits 12:12 */
    cs_uint16 OVFCntI              :  1 ; /* bits 11:11 */
    cs_uint16 SynExI               :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 OvrFloI              :  1 ; /* bits 3:3 */
    cs_uint16 HECErrI              :  1 ; /* bits 2:2 */
    cs_uint16 LCDI                 :  1 ; /* bits 1:1 */
    cs_uint16 OCDI                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 OCDI                 :  1 ; /* bits 0:0 */
    cs_uint16 LCDI                 :  1 ; /* bits 1:1 */
    cs_uint16 HECErrI              :  1 ; /* bits 2:2 */
    cs_uint16 OvrFloI              :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 SynExI               :  1 ; /* bits 10:10 */
    cs_uint16 OVFCntI              :  1 ; /* bits 11:11 */
    cs_uint16 HECCorrI             :  1 ; /* bits 12:12 */
    cs_uint16 HECDropI             :  1 ; /* bits 13:13 */
    cs_uint16 IdleCntI             :  1 ; /* bits 14:14 */
    cs_uint16 CellCntI             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_CellIntr_t;

#define FR_STREAMRX_CellMask                     0x08803
#define FR_STREAMRX_CellMask_dft                 0xfc0f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 cellCntM             :  1 ; /* bits 15:15 */
    cs_uint16 IdleCntM             :  1 ; /* bits 14:14 */
    cs_uint16 HECDropM             :  1 ; /* bits 13:13 */
    cs_uint16 HECCorrM             :  1 ; /* bits 12:12 */
    cs_uint16 OVFCntM              :  1 ; /* bits 11:11 */
    cs_uint16 SynExM               :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 ovrFloM              :  1 ; /* bits 3:3 */
    cs_uint16 HECErrM              :  1 ; /* bits 2:2 */
    cs_uint16 LCDM                 :  1 ; /* bits 1:1 */
    cs_uint16 OCDM                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 OCDM                 :  1 ; /* bits 0:0 */
    cs_uint16 LCDM                 :  1 ; /* bits 1:1 */
    cs_uint16 HECErrM              :  1 ; /* bits 2:2 */
    cs_uint16 ovrFloM              :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 SynExM               :  1 ; /* bits 10:10 */
    cs_uint16 OVFCntM              :  1 ; /* bits 11:11 */
    cs_uint16 HECCorrM             :  1 ; /* bits 12:12 */
    cs_uint16 HECDropM             :  1 ; /* bits 13:13 */
    cs_uint16 IdleCntM             :  1 ; /* bits 14:14 */
    cs_uint16 cellCntM             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_CellMask_t;

#define FR_STREAMRX_CellSts                      0x08804
#define FR_STREAMRX_CellSts_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CellCntS             :  1 ; /* bits 15:15 */
    cs_uint16 IdleCntS             :  1 ; /* bits 14:14 */
    cs_uint16 HECDropS             :  1 ; /* bits 13:13 */
    cs_uint16 HECCorrS             :  1 ; /* bits 12:12 */
    cs_uint16 OVFCntS              :  1 ; /* bits 11:11 */
    cs_uint16 SynExS               :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 OvrFloS              :  1 ; /* bits 3:3 */
    cs_uint16 HECErrS              :  1 ; /* bits 2:2 */
    cs_uint16 LCDS                 :  1 ; /* bits 1:1 */
    cs_uint16 OCDS                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 OCDS                 :  1 ; /* bits 0:0 */
    cs_uint16 LCDS                 :  1 ; /* bits 1:1 */
    cs_uint16 HECErrS              :  1 ; /* bits 2:2 */
    cs_uint16 OvrFloS              :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 SynExS               :  1 ; /* bits 10:10 */
    cs_uint16 OVFCntS              :  1 ; /* bits 11:11 */
    cs_uint16 HECCorrS             :  1 ; /* bits 12:12 */
    cs_uint16 HECDropS             :  1 ; /* bits 13:13 */
    cs_uint16 IdleCntS             :  1 ; /* bits 14:14 */
    cs_uint16 CellCntS             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_CellSts_t;

#define FR_STREAMRX_Cellfsm                      0x08805
#define FR_STREAMRX_Cellfsm_dft                  0x003e
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 GAMMA                :  2 ; /* bits 7:6 */
    cs_uint16 ALPHA                :  3 ; /* bits 5:3 */
    cs_uint16 DELTA                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DELTA                :  3 ; /* bits 2:0 */
    cs_uint16 ALPHA                :  3 ; /* bits 5:3 */
    cs_uint16 GAMMA                :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cellfsm_t;
#define     GAMMA_GAMMA_0                                 0x00
#define     GAMMA_GAMMA_2                                 0x01
#define     GAMMA_GAMMA_4                                 0x02
#define     GAMMA_GAMMA_8                                 0x03

#define FR_STREAMRX_PktControl                   0x08816
#define FR_STREAMRX_PktControl_dft               0x0010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 reset                :  1 ; /* bits 15:15 */
    cs_uint16 dropIdle             :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 enDscrBeforeFIFO     :  1 ; /* bits 10:10 */
    cs_uint16 dropBit              :  1 ; /* bits 9:9 */
    cs_uint16 nullFCS              :  1 ; /* bits 8:8 */
    cs_uint16 dropShort            :  1 ; /* bits 7:7 */
    cs_uint16 dropLong             :  1 ; /* bits 6:6 */
    cs_uint16 passFCS              :  1 ; /* bits 5:5 */
    cs_uint16 modePOS              :  1 ; /* bits 4:4 */
    cs_uint16 modeDropFF03         :  1 ; /* bits 3:3 */
    cs_uint16 disDscr              :  1 ; /* bits 2:2 */
    cs_uint16 crc32                :  1 ; /* bits 1:1 */
    cs_uint16 FCSDir               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FCSDir               :  1 ; /* bits 0:0 */
    cs_uint16 crc32                :  1 ; /* bits 1:1 */
    cs_uint16 disDscr              :  1 ; /* bits 2:2 */
    cs_uint16 modeDropFF03         :  1 ; /* bits 3:3 */
    cs_uint16 modePOS              :  1 ; /* bits 4:4 */
    cs_uint16 passFCS              :  1 ; /* bits 5:5 */
    cs_uint16 dropLong             :  1 ; /* bits 6:6 */
    cs_uint16 dropShort            :  1 ; /* bits 7:7 */
    cs_uint16 nullFCS              :  1 ; /* bits 8:8 */
    cs_uint16 dropBit              :  1 ; /* bits 9:9 */
    cs_uint16 enDscrBeforeFIFO     :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 dropIdle             :  1 ; /* bits 14:14 */
    cs_uint16 reset                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_PktControl_t;

#define FR_STREAMRX_MaxLengthMSB                 0x08817
#define FR_STREAMRX_MaxLengthMSB_dft             0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 maxLength            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 maxLength            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_MaxLengthMSB_t;

#define FR_STREAMRX_MaxLengthLSB                 0x08818
#define FR_STREAMRX_MaxLengthLSB_dft             0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 maxLength            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 maxLength            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_MaxLengthLSB_t;

#define FR_STREAMRX_MinLength                    0x08819
#define FR_STREAMRX_MinLength_dft                0x0010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Rx_Alt_Scramble      :  1 ; /* bits 15:15 */
    cs_uint16 Rx_Unused            :  7 ; /* bits 14:8 */
    cs_uint16 minLength            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 minLength            :  8 ; /* bits 7:0 */
    cs_uint16 Rx_Unused            :  7 ; /* bits 14:8 */
    cs_uint16 Rx_Alt_Scramble      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_MinLength_t;

#define FR_STREAMRX_PktFillControl               0x0881a
#define FR_STREAMRX_PktFillControl_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 idle                 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 idle                 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_PktFillControl_t;

#define FR_STREAMRX_PktIntr                      0x0881b
#define FR_STREAMRX_PktIntr_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 shrtPkt              :  1 ; /* bits 15:15 */
    cs_uint16 lngPkt               :  1 ; /* bits 14:14 */
    cs_uint16 Ovrflow              :  1 ; /* bits 13:13 */
    cs_uint16 FCSErr               :  1 ; /* bits 12:12 */
    cs_uint16 formatErr            :  1 ; /* bits 11:11 */
    cs_uint16 abort                :  1 ; /* bits 10:10 */
    cs_uint16 InvCnt               :  1 ; /* bits 9:9 */
    cs_uint16 DropCnt              :  1 ; /* bits 8:8 */
    cs_uint16 FCSECnt              :  1 ; /* bits 7:7 */
    cs_uint16 pktCnt               :  1 ; /* bits 6:6 */
    cs_uint16 byteCnt              :  1 ; /* bits 5:5 */
    cs_uint16 shrtPktCnt           :  1 ; /* bits 4:4 */
    cs_uint16 longPktCnt           :  1 ; /* bits 3:3 */
    cs_uint16 OvrPktCnt            :  1 ; /* bits 2:2 */
    cs_uint16 abortPktCnt          :  1 ; /* bits 1:1 */
    cs_uint16 GdPktCnt             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GdPktCnt             :  1 ; /* bits 0:0 */
    cs_uint16 abortPktCnt          :  1 ; /* bits 1:1 */
    cs_uint16 OvrPktCnt            :  1 ; /* bits 2:2 */
    cs_uint16 longPktCnt           :  1 ; /* bits 3:3 */
    cs_uint16 shrtPktCnt           :  1 ; /* bits 4:4 */
    cs_uint16 byteCnt              :  1 ; /* bits 5:5 */
    cs_uint16 pktCnt               :  1 ; /* bits 6:6 */
    cs_uint16 FCSECnt              :  1 ; /* bits 7:7 */
    cs_uint16 DropCnt              :  1 ; /* bits 8:8 */
    cs_uint16 InvCnt               :  1 ; /* bits 9:9 */
    cs_uint16 abort                :  1 ; /* bits 10:10 */
    cs_uint16 formatErr            :  1 ; /* bits 11:11 */
    cs_uint16 FCSErr               :  1 ; /* bits 12:12 */
    cs_uint16 Ovrflow              :  1 ; /* bits 13:13 */
    cs_uint16 lngPkt               :  1 ; /* bits 14:14 */
    cs_uint16 shrtPkt              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_PktIntr_t;

#define FR_STREAMRX_PktStatus                    0x0881c
#define FR_STREAMRX_PktStatus_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 shrtPktS             :  1 ; /* bits 15:15 */
    cs_uint16 lngPktS              :  1 ; /* bits 14:14 */
    cs_uint16 OvrflowS             :  1 ; /* bits 13:13 */
    cs_uint16 FCSErrS              :  1 ; /* bits 12:12 */
    cs_uint16 formatErrS           :  1 ; /* bits 11:11 */
    cs_uint16 abortS               :  1 ; /* bits 10:10 */
    cs_uint16 InvCntS              :  1 ; /* bits 9:9 */
    cs_uint16 DropCntS             :  1 ; /* bits 8:8 */
    cs_uint16 FCSECntS             :  1 ; /* bits 7:7 */
    cs_uint16 pktCntS              :  1 ; /* bits 6:6 */
    cs_uint16 byteCntS             :  1 ; /* bits 5:5 */
    cs_uint16 shrtPktCntS          :  1 ; /* bits 4:4 */
    cs_uint16 longPktCntS          :  1 ; /* bits 3:3 */
    cs_uint16 OvrPktCntS           :  1 ; /* bits 2:2 */
    cs_uint16 abortPktCntS         :  1 ; /* bits 1:1 */
    cs_uint16 GdPktCntS            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GdPktCntS            :  1 ; /* bits 0:0 */
    cs_uint16 abortPktCntS         :  1 ; /* bits 1:1 */
    cs_uint16 OvrPktCntS           :  1 ; /* bits 2:2 */
    cs_uint16 longPktCntS          :  1 ; /* bits 3:3 */
    cs_uint16 shrtPktCntS          :  1 ; /* bits 4:4 */
    cs_uint16 byteCntS             :  1 ; /* bits 5:5 */
    cs_uint16 pktCntS              :  1 ; /* bits 6:6 */
    cs_uint16 FCSECntS             :  1 ; /* bits 7:7 */
    cs_uint16 DropCntS             :  1 ; /* bits 8:8 */
    cs_uint16 InvCntS              :  1 ; /* bits 9:9 */
    cs_uint16 abortS               :  1 ; /* bits 10:10 */
    cs_uint16 formatErrS           :  1 ; /* bits 11:11 */
    cs_uint16 FCSErrS              :  1 ; /* bits 12:12 */
    cs_uint16 OvrflowS             :  1 ; /* bits 13:13 */
    cs_uint16 lngPktS              :  1 ; /* bits 14:14 */
    cs_uint16 shrtPktS             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_PktStatus_t;

#define FR_STREAMRX_PktMask                      0x0881d
#define FR_STREAMRX_PktMask_dft                  0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 shrtPktM             :  1 ; /* bits 15:15 */
    cs_uint16 lngPktM              :  1 ; /* bits 14:14 */
    cs_uint16 OvrflowM             :  1 ; /* bits 13:13 */
    cs_uint16 FCSErrM              :  1 ; /* bits 12:12 */
    cs_uint16 formatErrM           :  1 ; /* bits 11:11 */
    cs_uint16 abortM               :  1 ; /* bits 10:10 */
    cs_uint16 InvCntM              :  1 ; /* bits 9:9 */
    cs_uint16 DropCntM             :  1 ; /* bits 8:8 */
    cs_uint16 FCSECntM             :  1 ; /* bits 7:7 */
    cs_uint16 pktCntM              :  1 ; /* bits 6:6 */
    cs_uint16 byteCntM             :  1 ; /* bits 5:5 */
    cs_uint16 shrtPktCntM          :  1 ; /* bits 4:4 */
    cs_uint16 longPktCntM          :  1 ; /* bits 3:3 */
    cs_uint16 OvrPktCntM           :  1 ; /* bits 2:2 */
    cs_uint16 abortPktCntM         :  1 ; /* bits 1:1 */
    cs_uint16 GdPktCntM            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GdPktCntM            :  1 ; /* bits 0:0 */
    cs_uint16 abortPktCntM         :  1 ; /* bits 1:1 */
    cs_uint16 OvrPktCntM           :  1 ; /* bits 2:2 */
    cs_uint16 longPktCntM          :  1 ; /* bits 3:3 */
    cs_uint16 shrtPktCntM          :  1 ; /* bits 4:4 */
    cs_uint16 byteCntM             :  1 ; /* bits 5:5 */
    cs_uint16 pktCntM              :  1 ; /* bits 6:6 */
    cs_uint16 FCSECntM             :  1 ; /* bits 7:7 */
    cs_uint16 DropCntM             :  1 ; /* bits 8:8 */
    cs_uint16 InvCntM              :  1 ; /* bits 9:9 */
    cs_uint16 abortM               :  1 ; /* bits 10:10 */
    cs_uint16 formatErrM           :  1 ; /* bits 11:11 */
    cs_uint16 FCSErrM              :  1 ; /* bits 12:12 */
    cs_uint16 OvrflowM             :  1 ; /* bits 13:13 */
    cs_uint16 lngPktM              :  1 ; /* bits 14:14 */
    cs_uint16 shrtPktM             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_PktMask_t;

#define FR_STREAMRX_Cnt1Q1                       0x08820
#define FR_STREAMRX_Cnt1Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt1Q1_t;

#define FR_STREAMRX_Cnt1Q2                       0x08821
#define FR_STREAMRX_Cnt1Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt1Q2_t;

#define FR_STREAMRX_Cnt1Q3                       0x08822
#define FR_STREAMRX_Cnt1Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt1Q3_t;

#define FR_STREAMRX_Cnt2Q1                       0x08824
#define FR_STREAMRX_Cnt2Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt2Q1_t;

#define FR_STREAMRX_Cnt2Q2                       0x08825
#define FR_STREAMRX_Cnt2Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt2Q2_t;

#define FR_STREAMRX_Cnt2Q3                       0x08826
#define FR_STREAMRX_Cnt2Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt2Q3_t;

#define FR_STREAMRX_Cnt3Q1                       0x08828
#define FR_STREAMRX_Cnt3Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt3Q1_t;

#define FR_STREAMRX_Cnt3Q2                       0x08829
#define FR_STREAMRX_Cnt3Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt3Q2_t;

#define FR_STREAMRX_Cnt3Q3                       0x0882a
#define FR_STREAMRX_Cnt3Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt3Q3_t;

#define FR_STREAMRX_Cnt4Q1                       0x0882c
#define FR_STREAMRX_Cnt4Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt4Q1_t;

#define FR_STREAMRX_Cnt4Q2                       0x0882d
#define FR_STREAMRX_Cnt4Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt4Q2_t;

#define FR_STREAMRX_Cnt4Q3                       0x0882e
#define FR_STREAMRX_Cnt4Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt4Q3_t;

#define FR_STREAMRX_Cnt5Q1                       0x08830
#define FR_STREAMRX_Cnt5Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt5Q1_t;

#define FR_STREAMRX_Cnt5Q2                       0x08831
#define FR_STREAMRX_Cnt5Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt5Q2_t;

#define FR_STREAMRX_Cnt5Q3                       0x08832
#define FR_STREAMRX_Cnt5Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt5Q3_t;

#define FR_STREAMRX_Cnt6Q1                       0x08834
#define FR_STREAMRX_Cnt6Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt6Q1_t;

#define FR_STREAMRX_Cnt6Q2                       0x08835
#define FR_STREAMRX_Cnt6Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt6Q2_t;

#define FR_STREAMRX_Cnt6Q3                       0x08836
#define FR_STREAMRX_Cnt6Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt6Q3_t;

#define FR_STREAMRX_Cnt7Q1                       0x08838
#define FR_STREAMRX_Cnt7Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt7Q1_t;

#define FR_STREAMRX_Cnt7Q2                       0x08839
#define FR_STREAMRX_Cnt7Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt7Q2_t;

#define FR_STREAMRX_Cnt7Q3                       0x0883a
#define FR_STREAMRX_Cnt7Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt7Q3_t;

#define FR_STREAMRX_Cnt8Q1                       0x0883c
#define FR_STREAMRX_Cnt8Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt8Q1_t;

#define FR_STREAMRX_Cnt8Q2                       0x0883d
#define FR_STREAMRX_Cnt8Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt8Q2_t;

#define FR_STREAMRX_Cnt8Q3                       0x0883e
#define FR_STREAMRX_Cnt8Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt8Q3_t;

#define FR_STREAMRX_Cnt9Q1                       0x08840
#define FR_STREAMRX_Cnt9Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt9Q1_t;

#define FR_STREAMRX_Cnt9Q2                       0x08841
#define FR_STREAMRX_Cnt9Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt9Q2_t;

#define FR_STREAMRX_Cnt9Q3                       0x08842
#define FR_STREAMRX_Cnt9Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt9Q3_t;

#define FR_STREAMRX_Cnt10Q1                      0x08844
#define FR_STREAMRX_Cnt10Q1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt10Q1_t;

#define FR_STREAMRX_Cnt10Q2                      0x08845
#define FR_STREAMRX_Cnt10Q2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt10Q2_t;

#define FR_STREAMRX_Cnt10Q3                      0x08846
#define FR_STREAMRX_Cnt10Q3_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_Cnt10Q3_t;

#define FR_STREAMRX_debugSelect                  0x08848
#define FR_STREAMRX_debugSelect_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 take_GFP             :  1 ; /* bits 9:9 */
    cs_uint16 takeCell             :  1 ; /* bits 8:8 */
    cs_uint16 testAddr             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 testAddr             :  8 ; /* bits 7:0 */
    cs_uint16 takeCell             :  1 ; /* bits 8:8 */
    cs_uint16 take_GFP             :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMRX_debugSelect_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::datacomTx
 */

#define FR_DATACOMTX_Control                     0x0a200
#define FR_DATACOMTX_Control_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 evenParity           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 evenParity           :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_Control_t;

#define FR_DATACOMTX_Interrupt                   0x0a201
#define FR_DATACOMTX_Interrupt_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 parityI              :  1 ; /* bits 4:4 */
    cs_uint16 streamTxS            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 streamTxS            :  4 ; /* bits 3:0 */
    cs_uint16 parityI              :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_Interrupt_t;

#define FR_DATACOMTX_Mask                        0x0a202
#define FR_DATACOMTX_Mask_dft                    0x001f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 parityM              :  1 ; /* bits 4:4 */
    cs_uint16 streamTxM            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 streamTxM            :  4 ; /* bits 3:0 */
    cs_uint16 parityM              :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_Mask_t;

#define FR_DATACOMTX_Active_Override             0x0a208
#define FR_DATACOMTX_Active_Override_dft         0x000e
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Active_Act_High      :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 Active_Override_E    :  4 ; /* bits 11:8 */
    cs_uint16 Active_Override_V    :  4 ; /* bits 7:4 */
    cs_uint16 Active_Mask          :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Active_Mask          :  4 ; /* bits 3:0 */
    cs_uint16 Active_Override_V    :  4 ; /* bits 7:4 */
    cs_uint16 Active_Override_E    :  4 ; /* bits 11:8 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 Active_Act_High      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_Active_Override_t;

#define FR_DATACOMTX_StrConfig                   0x0a240
#define FR_DATACOMTX_StrConfig_STRIDE            4
#define FR_DATACOMTX_StrConfig_COUNT             4
#define FR_DATACOMTX_StrConfig_dft               0x9100
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 dataType             :  2 ; /* bits 15:14 */
    cs_uint16 cellSkid             :  3 ; /* bits 13:11 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 packetSkid           :  6 ; /* bits 9:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 dropShort            :  1 ; /* bits 1:1 */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
    cs_uint16 dropShort            :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 packetSkid           :  6 ; /* bits 9:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 cellSkid             :  3 ; /* bits 13:11 */
    cs_uint16 dataType             :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_StrConfig_t;

#define FR_DATACOMTX_StrInt                      0x0a241
#define FR_DATACOMTX_StrInt_STRIDE               4
#define FR_DATACOMTX_StrInt_COUNT                4
#define FR_DATACOMTX_StrInt_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 FIFO_Par_Err_I       :  1 ; /* bits 3:3 */
    cs_uint16 overflowI            :  1 ; /* bits 2:2 */
    cs_uint16 badFrameI            :  1 ; /* bits 1:1 */
    cs_uint16 shortCellI           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 shortCellI           :  1 ; /* bits 0:0 */
    cs_uint16 badFrameI            :  1 ; /* bits 1:1 */
    cs_uint16 overflowI            :  1 ; /* bits 2:2 */
    cs_uint16 FIFO_Par_Err_I       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_StrInt_t;

#define FR_DATACOMTX_StrMask                     0x0a242
#define FR_DATACOMTX_StrMask_STRIDE              4
#define FR_DATACOMTX_StrMask_COUNT               4
#define FR_DATACOMTX_StrMask_dft                 0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 FIFO_Par_Err_M       :  1 ; /* bits 3:3 */
    cs_uint16 overflowM            :  1 ; /* bits 2:2 */
    cs_uint16 badFrameM            :  1 ; /* bits 1:1 */
    cs_uint16 shortCellM           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 shortCellM           :  1 ; /* bits 0:0 */
    cs_uint16 badFrameM            :  1 ; /* bits 1:1 */
    cs_uint16 overflowM            :  1 ; /* bits 2:2 */
    cs_uint16 FIFO_Par_Err_M       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_StrMask_t;

#define FR_DATACOMTX_StrStatus                   0x0a243
#define FR_DATACOMTX_StrStatus_STRIDE            4
#define FR_DATACOMTX_StrStatus_COUNT             4
#define FR_DATACOMTX_StrStatus_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 overflowS            :  1 ; /* bits 2:2 */
    cs_uint16 badFrameS            :  1 ; /* bits 1:1 */
    cs_uint16 shortCellS           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 shortCellS           :  1 ; /* bits 0:0 */
    cs_uint16 badFrameS            :  1 ; /* bits 1:1 */
    cs_uint16 overflowS            :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_DATACOMTX_StrStatus_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::stream[0..3]Tx
 */

#define FR_STREAMTX_STRIDE                       256
#define FR_STREAMTX_COUNT                        4
#define FR_STREAMTX_CellControl                  0x0a800
#define FR_STREAMTX_CellControl_dft              0x4000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
    cs_uint16 CosAdd               :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 Drop                 :  1 ; /* bits 3:3 */
    cs_uint16 DisScr               :  1 ; /* bits 2:2 */
    cs_uint16 HECDis               :  1 ; /* bits 1:1 */
    cs_uint16 ErrHEC               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrHEC               :  1 ; /* bits 0:0 */
    cs_uint16 HECDis               :  1 ; /* bits 1:1 */
    cs_uint16 DisScr               :  1 ; /* bits 2:2 */
    cs_uint16 Drop                 :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 CosAdd               :  1 ; /* bits 14:14 */
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_CellControl_t;

#define FR_STREAMTX_CellPattern                  0x0a801
#define FR_STREAMTX_CellPattern_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GFC                  :  4 ; /* bits 15:12 */
    cs_uint16 PTI                  :  3 ; /* bits 11:9 */
    cs_uint16 CLP                  :  1 ; /* bits 8:8 */
    cs_uint16 Idle                 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Idle                 :  8 ; /* bits 7:0 */
    cs_uint16 CLP                  :  1 ; /* bits 8:8 */
    cs_uint16 PTI                  :  3 ; /* bits 11:9 */
    cs_uint16 GFC                  :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_CellPattern_t;

#define FR_STREAMTX_CellIntr                     0x0a802
#define FR_STREAMTX_CellIntr_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  3 ;
    cs_uint16 CellCntS             :  1 ; /* bits 12:12 */
    cs_uint16 IdleCntS             :  1 ; /* bits 11:11 */
    cs_uint16 UndFloS              :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd2               :  5 ;
    cs_uint16 CellCntI             :  1 ; /* bits 4:4 */
    cs_uint16 IdleCntI             :  1 ; /* bits 3:3 */
    cs_uint16 UndFloI              :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 UndFloI              :  1 ; /* bits 2:2 */
    cs_uint16 IdleCntI             :  1 ; /* bits 3:3 */
    cs_uint16 CellCntI             :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               :  5 ;
    cs_uint16 UndFloS              :  1 ; /* bits 10:10 */
    cs_uint16 IdleCntS             :  1 ; /* bits 11:11 */
    cs_uint16 CellCntS             :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd3               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_CellIntr_t;

#define FR_STREAMTX_CellIMask                    0x0a803
#define FR_STREAMTX_CellIMask_dft                0x001c
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               : 11 ;
    cs_uint16 CellCntM             :  1 ; /* bits 4:4 */
    cs_uint16 IdleCntM             :  1 ; /* bits 3:3 */
    cs_uint16 UndFloM              :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  2 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 UndFloM              :  1 ; /* bits 2:2 */
    cs_uint16 IdleCntM             :  1 ; /* bits 3:3 */
    cs_uint16 CellCntM             :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_CellIMask_t;

#define FR_STREAMTX_PktControl                   0x0a810
#define FR_STREAMTX_PktControl_dft               0x0010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
    cs_uint16 InvFCS               :  1 ; /* bits 14:14 */
    cs_uint16 DropFlag             :  1 ; /* bits 13:13 */
    cs_uint16 EnScrBef             :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 DropLong             :  1 ; /* bits 6:6 */
    cs_uint16 NullFCS              :  1 ; /* bits 5:5 */
    cs_uint16 PosMode              :  1 ; /* bits 4:4 */
    cs_uint16 InsFF03              :  1 ; /* bits 3:3 */
    cs_uint16 DisScr               :  1 ; /* bits 2:2 */
    cs_uint16 crc32                :  1 ; /* bits 1:1 */
    cs_uint16 FCSDir               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FCSDir               :  1 ; /* bits 0:0 */
    cs_uint16 crc32                :  1 ; /* bits 1:1 */
    cs_uint16 DisScr               :  1 ; /* bits 2:2 */
    cs_uint16 InsFF03              :  1 ; /* bits 3:3 */
    cs_uint16 PosMode              :  1 ; /* bits 4:4 */
    cs_uint16 NullFCS              :  1 ; /* bits 5:5 */
    cs_uint16 DropLong             :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 EnScrBef             :  1 ; /* bits 12:12 */
    cs_uint16 DropFlag             :  1 ; /* bits 13:13 */
    cs_uint16 InvFCS               :  1 ; /* bits 14:14 */
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_PktControl_t;

#define FR_STREAMTX_FillerByte                   0x0a811
#define FR_STREAMTX_FillerByte_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 FB                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FB                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_FillerByte_t;

#define FR_STREAMTX_MaxPktMSB                    0x0a812
#define FR_STREAMTX_MaxPktMSB_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MxLenM               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MxLenM               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_MaxPktMSB_t;

#define FR_STREAMTX_MaxPktLSB                    0x0a813
#define FR_STREAMTX_MaxPktLSB_dft                0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MxLenL               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MxLenL               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_MaxPktLSB_t;

#define FR_STREAMTX_MinPkt                       0x0a814
#define FR_STREAMTX_MinPkt_dft                   0x0009
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Tx_Alt_Scramble      :  1 ; /* bits 15:15 */
    cs_uint16 MnLenM               : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MnLenM               : 15 ; /* bits 14:0 */
    cs_uint16 Tx_Alt_Scramble      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_MinPkt_t;

#define FR_STREAMTX_Threshold                    0x0a815
#define FR_STREAMTX_Threshold_dft                0x0040
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Thr                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Thr                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Threshold_t;

#define FR_STREAMTX_NumFlags                     0x0a816
#define FR_STREAMTX_NumFlags_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 AtEnd                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 AtEnd                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_NumFlags_t;

#define FR_STREAMTX_PktSts                       0x0a817
#define FR_STREAMTX_PktSts_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ByteCntS             :  1 ; /* bits 15:15 */
    cs_uint16 TxByteCntS           :  1 ; /* bits 14:14 */
    cs_uint16 PktCntS              :  1 ; /* bits 13:13 */
    cs_uint16 UndCntS              :  1 ; /* bits 12:12 */
    cs_uint16 ErrCntS              :  1 ; /* bits 11:11 */
    cs_uint16 LongCntS             :  1 ; /* bits 10:10 */
    cs_uint16 ShortCntS            :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 TxShrtPktS           :  1 ; /* bits 2:2 */
    cs_uint16 TxLngPktS            :  1 ; /* bits 1:1 */
    cs_uint16 TxUndFlowS           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxUndFlowS           :  1 ; /* bits 0:0 */
    cs_uint16 TxLngPktS            :  1 ; /* bits 1:1 */
    cs_uint16 TxShrtPktS           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 ShortCntS            :  1 ; /* bits 9:9 */
    cs_uint16 LongCntS             :  1 ; /* bits 10:10 */
    cs_uint16 ErrCntS              :  1 ; /* bits 11:11 */
    cs_uint16 UndCntS              :  1 ; /* bits 12:12 */
    cs_uint16 PktCntS              :  1 ; /* bits 13:13 */
    cs_uint16 TxByteCntS           :  1 ; /* bits 14:14 */
    cs_uint16 ByteCntS             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_PktSts_t;

#define FR_STREAMTX_PktInt                       0x0a818
#define FR_STREAMTX_PktInt_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ByteCntI             :  1 ; /* bits 15:15 */
    cs_uint16 TxByteCntI           :  1 ; /* bits 14:14 */
    cs_uint16 PktCntI              :  1 ; /* bits 13:13 */
    cs_uint16 UndCntI              :  1 ; /* bits 12:12 */
    cs_uint16 ErrCntI              :  1 ; /* bits 11:11 */
    cs_uint16 LongCntI             :  1 ; /* bits 10:10 */
    cs_uint16 ShortCntI            :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 TxShrtPktI           :  1 ; /* bits 2:2 */
    cs_uint16 TxLngPktI            :  1 ; /* bits 1:1 */
    cs_uint16 TxUndFlowI           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxUndFlowI           :  1 ; /* bits 0:0 */
    cs_uint16 TxLngPktI            :  1 ; /* bits 1:1 */
    cs_uint16 TxShrtPktI           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 ShortCntI            :  1 ; /* bits 9:9 */
    cs_uint16 LongCntI             :  1 ; /* bits 10:10 */
    cs_uint16 ErrCntI              :  1 ; /* bits 11:11 */
    cs_uint16 UndCntI              :  1 ; /* bits 12:12 */
    cs_uint16 PktCntI              :  1 ; /* bits 13:13 */
    cs_uint16 TxByteCntI           :  1 ; /* bits 14:14 */
    cs_uint16 ByteCntI             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_PktInt_t;

#define FR_STREAMTX_PktMask                      0x0a819
#define FR_STREAMTX_PktMask_dft                  0xfe07
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ByteCntM             :  1 ; /* bits 15:15 */
    cs_uint16 TxByteCntM           :  1 ; /* bits 14:14 */
    cs_uint16 PktCntM              :  1 ; /* bits 13:13 */
    cs_uint16 UndCntM              :  1 ; /* bits 12:12 */
    cs_uint16 ErrCntM              :  1 ; /* bits 11:11 */
    cs_uint16 LongCntM             :  1 ; /* bits 10:10 */
    cs_uint16 ShortCntM            :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 TxShrtPktM           :  1 ; /* bits 2:2 */
    cs_uint16 TxLngPktM            :  1 ; /* bits 1:1 */
    cs_uint16 TxUndFlowM           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxUndFlowM           :  1 ; /* bits 0:0 */
    cs_uint16 TxLngPktM            :  1 ; /* bits 1:1 */
    cs_uint16 TxShrtPktM           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 ShortCntM            :  1 ; /* bits 9:9 */
    cs_uint16 LongCntM             :  1 ; /* bits 10:10 */
    cs_uint16 ErrCntM              :  1 ; /* bits 11:11 */
    cs_uint16 UndCntM              :  1 ; /* bits 12:12 */
    cs_uint16 PktCntM              :  1 ; /* bits 13:13 */
    cs_uint16 TxByteCntM           :  1 ; /* bits 14:14 */
    cs_uint16 ByteCntM             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_PktMask_t;

#define FR_STREAMTX_Cnt1Q1                       0x0a820
#define FR_STREAMTX_Cnt1Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt1Q1_t;

#define FR_STREAMTX_Cnt1Q2                       0x0a821
#define FR_STREAMTX_Cnt1Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt1Q2_t;

#define FR_STREAMTX_Cnt1Q3                       0x0a822
#define FR_STREAMTX_Cnt1Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt1Q3_t;

#define FR_STREAMTX_Cnt2Q1                       0x0a824
#define FR_STREAMTX_Cnt2Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt2Q1_t;

#define FR_STREAMTX_Cnt2Q2                       0x0a825
#define FR_STREAMTX_Cnt2Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt2Q2_t;

#define FR_STREAMTX_Cnt2Q3                       0x0a826
#define FR_STREAMTX_Cnt2Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt2Q3_t;

#define FR_STREAMTX_Cnt3Q1                       0x0a828
#define FR_STREAMTX_Cnt3Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt3Q1_t;

#define FR_STREAMTX_Cnt3Q2                       0x0a829
#define FR_STREAMTX_Cnt3Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt3Q2_t;

#define FR_STREAMTX_Cnt3Q3                       0x0a82a
#define FR_STREAMTX_Cnt3Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt3Q3_t;

#define FR_STREAMTX_Cnt4Q1                       0x0a82c
#define FR_STREAMTX_Cnt4Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt4Q1_t;

#define FR_STREAMTX_Cnt4Q2                       0x0a82d
#define FR_STREAMTX_Cnt4Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt4Q2_t;

#define FR_STREAMTX_Cnt4Q3                       0x0a82e
#define FR_STREAMTX_Cnt4Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt4Q3_t;

#define FR_STREAMTX_Cnt5Q1                       0x0a830
#define FR_STREAMTX_Cnt5Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt5Q1_t;

#define FR_STREAMTX_Cnt5Q2                       0x0a831
#define FR_STREAMTX_Cnt5Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt5Q2_t;

#define FR_STREAMTX_Cnt5Q3                       0x0a832
#define FR_STREAMTX_Cnt5Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt5Q3_t;

#define FR_STREAMTX_Cnt6Q1                       0x0a834
#define FR_STREAMTX_Cnt6Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt6Q1_t;

#define FR_STREAMTX_Cnt6Q2                       0x0a835
#define FR_STREAMTX_Cnt6Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt6Q2_t;

#define FR_STREAMTX_Cnt6Q3                       0x0a836
#define FR_STREAMTX_Cnt6Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt6Q3_t;

#define FR_STREAMTX_Cnt7Q1                       0x0a838
#define FR_STREAMTX_Cnt7Q1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt7Q1_t;

#define FR_STREAMTX_Cnt7Q2                       0x0a839
#define FR_STREAMTX_Cnt7Q2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt7Q2_t;

#define FR_STREAMTX_Cnt7Q3                       0x0a83a
#define FR_STREAMTX_Cnt7Q3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_Cnt7Q3_t;

#define FR_STREAMTX_debugSelect                  0x0a83c
#define FR_STREAMTX_debugSelect_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 take_GFP             :  1 ; /* bits 9:9 */
    cs_uint16 takeCell             :  1 ; /* bits 8:8 */
    cs_uint16 testAddr             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 testAddr             :  8 ; /* bits 7:0 */
    cs_uint16 takeCell             :  1 ; /* bits 8:8 */
    cs_uint16 take_GFP             :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_STREAMTX_debugSelect_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::gfp_tx
 */

#define FR_GFP_TX_GFP_Control_0                  0x0a808
#define FR_GFP_TX_GFP_Control_0_dft              0x4010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
    cs_uint16 Enable               :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 Dis_Idle_XOR         :  1 ; /* bits 11:11 */
    cs_uint16 Enable_Cut_Through   :  1 ; /* bits 10:10 */
    cs_uint16 Dis_Header_XOR       :  1 ; /* bits 9:9 */
    cs_uint16 Dis_Scrambler        :  1 ; /* bits 8:8 */
    cs_uint16 Sel_FCS_Order        :  1 ; /* bits 7:7 */
    cs_uint16 Gen_CRC              :  1 ; /* bits 6:6 */
    cs_uint16 Gen_THEC             :  1 ; /* bits 5:5 */
    cs_uint16 Gen_Core_HEC         :  1 ; /* bits 4:4 */
    cs_uint16 Gen_Core_Header      :  1 ; /* bits 3:3 */
    cs_uint16 Gen_Pld_Header       :  1 ; /* bits 2:2 */
    cs_uint16 Drop_Short_pkts      :  1 ; /* bits 1:1 */
    cs_uint16 Drop_Long_pkts       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Drop_Long_pkts       :  1 ; /* bits 0:0 */
    cs_uint16 Drop_Short_pkts      :  1 ; /* bits 1:1 */
    cs_uint16 Gen_Pld_Header       :  1 ; /* bits 2:2 */
    cs_uint16 Gen_Core_Header      :  1 ; /* bits 3:3 */
    cs_uint16 Gen_Core_HEC         :  1 ; /* bits 4:4 */
    cs_uint16 Gen_THEC             :  1 ; /* bits 5:5 */
    cs_uint16 Gen_CRC              :  1 ; /* bits 6:6 */
    cs_uint16 Sel_FCS_Order        :  1 ; /* bits 7:7 */
    cs_uint16 Dis_Scrambler        :  1 ; /* bits 8:8 */
    cs_uint16 Dis_Header_XOR       :  1 ; /* bits 9:9 */
    cs_uint16 Enable_Cut_Through   :  1 ; /* bits 10:10 */
    cs_uint16 Dis_Idle_XOR         :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 Enable               :  1 ; /* bits 14:14 */
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_GFP_Control_0_t;
#define     Drop_Long_pkts_GFP_Tx_RPR_mode                0x407f
#define     Drop_Long_pkts_GFP_Tx_RPR_F_mode              0x403f
#define     Drop_Long_pkts_GFP_Tx_pass_pH_mode            0x405b
#define     Drop_Long_pkts_GFP_Tx_pass_pH_F_mode          0x401b
#define     Drop_Long_pkts_GFP_Tx_pass_pH_X_mode          0x401b
#define     Drop_Long_pkts_GFP_Tx_semi_tran_mode          0x4243
#define     Drop_Long_pkts_GFP_Tx_semi_tran_F_mode        0x4203
#define     Drop_Long_pkts_GFP_Tx_transparent_mode        0x4303

#define FR_GFP_TX_GFP_Payload_Hdr                0x0a809
#define FR_GFP_TX_GFP_Payload_Hdr_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Payload_Hdr          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Payload_Hdr          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_GFP_Payload_Hdr_t;

#define FR_GFP_TX_GFP_Intr                       0x0a80a
#define FR_GFP_TX_GFP_Intr_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  7 ;
    cs_uint16 Idle_Pkts_MSB_I      :  1 ; /* bits 8:8 */
    cs_uint16 Oversized_Pkts_MSB_I :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Short_Pkt_I          :  1 ; /* bits 5:5 */
    cs_uint16 Long_Pkt_I           :  1 ; /* bits 4:4 */
    cs_uint16 Oversized_Pkt_I      :  1 ; /* bits 3:3 */
    cs_uint16 Under_Flow_I         :  1 ; /* bits 2:2 */
    cs_uint16 ECC_Err_Corr_I       :  1 ; /* bits 1:1 */
    cs_uint16 Mem_Err_I            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Mem_Err_I            :  1 ; /* bits 0:0 */
    cs_uint16 ECC_Err_Corr_I       :  1 ; /* bits 1:1 */
    cs_uint16 Under_Flow_I         :  1 ; /* bits 2:2 */
    cs_uint16 Oversized_Pkt_I      :  1 ; /* bits 3:3 */
    cs_uint16 Long_Pkt_I           :  1 ; /* bits 4:4 */
    cs_uint16 Short_Pkt_I          :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Oversized_Pkts_MSB_I :  1 ; /* bits 7:7 */
    cs_uint16 Idle_Pkts_MSB_I      :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_GFP_Intr_t;

#define FR_GFP_TX_GFP_Mask                       0x0a80b
#define FR_GFP_TX_GFP_Mask_dft                   0x01bf
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  7 ;
    cs_uint16 Idle_Pkts_MSB_M      :  1 ; /* bits 8:8 */
    cs_uint16 Oversized_Pkts_MSB_M :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Short_Pkt_M          :  1 ; /* bits 5:5 */
    cs_uint16 Long_Pkt_M           :  1 ; /* bits 4:4 */
    cs_uint16 Oversized_Pkt_M      :  1 ; /* bits 3:3 */
    cs_uint16 Under_Flow_M         :  1 ; /* bits 2:2 */
    cs_uint16 ECC_Err_Corr_M       :  1 ; /* bits 1:1 */
    cs_uint16 Mem_Err_M            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Mem_Err_M            :  1 ; /* bits 0:0 */
    cs_uint16 ECC_Err_Corr_M       :  1 ; /* bits 1:1 */
    cs_uint16 Under_Flow_M         :  1 ; /* bits 2:2 */
    cs_uint16 Oversized_Pkt_M      :  1 ; /* bits 3:3 */
    cs_uint16 Long_Pkt_M           :  1 ; /* bits 4:4 */
    cs_uint16 Short_Pkt_M          :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Oversized_Pkts_MSB_M :  1 ; /* bits 7:7 */
    cs_uint16 Idle_Pkts_MSB_M      :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_GFP_Mask_t;

#define FR_GFP_TX_GFP_Status                     0x0a80c
#define FR_GFP_TX_GFP_Status_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  7 ;
    cs_uint16 Idle_Pkts_MSB_S      :  1 ; /* bits 8:8 */
    cs_uint16 Oversized_Pkts_MSB_S :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 Mem_Err_S            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Mem_Err_S            :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 Oversized_Pkts_MSB_S :  1 ; /* bits 7:7 */
    cs_uint16 Idle_Pkts_MSB_S      :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_GFP_Status_t;

#define FR_GFP_TX_GFP_Diagnostic                 0x0a80d
#define FR_GFP_TX_GFP_Diagnostic_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 Induce_Mem_Err       :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Induce_Mem_Err       :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_GFP_Diagnostic_t;
#define     Induce_Mem_Err_No_Mem_Err                     0x00
#define     Induce_Mem_Err_One_Bit_Err                    0x01
#define     Induce_Mem_Err_Multi_Bit_Err                  0x02
#define     Induce_Mem_Err_Continuous_Err                 0x03

#define FR_GFP_TX_Cnt8Q1                         0x0a840
#define FR_GFP_TX_Cnt8Q1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_Cnt8Q1_t;

#define FR_GFP_TX_Cnt8Q2                         0x0a841
#define FR_GFP_TX_Cnt8Q2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_Cnt8Q2_t;

#define FR_GFP_TX_Cnt8Q3                         0x0a842
#define FR_GFP_TX_Cnt8Q3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_Cnt8Q3_t;

#define FR_GFP_TX_Cnt9Q1                         0x0a844
#define FR_GFP_TX_Cnt9Q1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_Cnt9Q1_t;

#define FR_GFP_TX_Cnt9Q2                         0x0a845
#define FR_GFP_TX_Cnt9Q2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_Cnt9Q2_t;

#define FR_GFP_TX_Cnt9Q3                         0x0a846
#define FR_GFP_TX_Cnt9Q3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Val                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_GFP_TX_Cnt9Q3_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::sonet32Rx
 */

#define FR_SONET32RX_PathProvision               0x0c000
#define FR_SONET32RX_PathProvision_STRIDE        16
#define FR_SONET32RX_PathProvision_COUNT         4
#define FR_SONET32RX_PathProvision_dft           0x0066
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EnhRDI               :  1 ; /* bits 15:15 */
    cs_uint16 J1Len                :  1 ; /* bits 14:14 */
    cs_uint16 J1Mode               :  1 ; /* bits 13:13 */
    cs_uint16 PBERReset            :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 QID                  :  2 ; /* bits 9:8 */
    cs_uint16 SVC                  :  3 ; /* bits 7:5 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 STSType              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STSType              :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 SVC                  :  3 ; /* bits 7:5 */
    cs_uint16 QID                  :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 PBERReset            :  1 ; /* bits 12:12 */
    cs_uint16 J1Mode               :  1 ; /* bits 13:13 */
    cs_uint16 J1Len                :  1 ; /* bits 14:14 */
    cs_uint16 EnhRDI               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathProvision_t;
#define     QID_SEL_STRM0                                 0x00
#define     QID_SEL_STRM1                                 0x01
#define     QID_SEL_STRM2                                 0x02
#define     QID_SEL_STRM3                                 0x03
#define     SVC_SRVC_ATM                                  0x02
#define     SVC_SRVC_PPP                                  0x03
#define     SVC_SRVC_GFP                                  0x04
#define     SVC_SRVC_PRBS                                 0x06
#define     STSType_STS_12C                               0x02
#define     STSType_STS_48C                               0x04
#define     STSType_STS_192C                              0x06

#define FR_SONET32RX_FilteredG1C2                0x0c001
#define FR_SONET32RX_FilteredG1C2_STRIDE         16
#define FR_SONET32RX_FilteredG1C2_COUNT          4
#define FR_SONET32RX_FilteredG1C2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FilteredG1           :  3 ; /* bits 15:13 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 FilteredC2           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FilteredC2           :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 FilteredG1           :  3 ; /* bits 15:13 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_FilteredG1C2_t;

#define FR_SONET32RX_PRDITxInsert                0x0c002
#define FR_SONET32RX_PRDITxInsert_STRIDE         16
#define FR_SONET32RX_PRDITxInsert_COUNT          4
#define FR_SONET32RX_PRDITxInsert_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 sschk                :  1 ; /* bits 15:15 */
    cs_uint16 Disconc              :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 PTU2RDI              :  1 ; /* bits 12:12 */
    cs_uint16 PTM2RDI              :  1 ; /* bits 11:11 */
    cs_uint16 PSLU2RDI             :  1 ; /* bits 10:10 */
    cs_uint16 PSLM2RDI             :  1 ; /* bits 9:9 */
    cs_uint16 UNEQP2RDI            :  1 ; /* bits 8:8 */
    cs_uint16 ssBits               :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 PTU2Drop             :  1 ; /* bits 4:4 */
    cs_uint16 PTM2Drop             :  1 ; /* bits 3:3 */
    cs_uint16 PSLU2Drop            :  1 ; /* bits 2:2 */
    cs_uint16 PSLM2Drop            :  1 ; /* bits 1:1 */
    cs_uint16 UNEQP2Drop           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 UNEQP2Drop           :  1 ; /* bits 0:0 */
    cs_uint16 PSLM2Drop            :  1 ; /* bits 1:1 */
    cs_uint16 PSLU2Drop            :  1 ; /* bits 2:2 */
    cs_uint16 PTM2Drop             :  1 ; /* bits 3:3 */
    cs_uint16 PTU2Drop             :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ssBits               :  2 ; /* bits 7:6 */
    cs_uint16 UNEQP2RDI            :  1 ; /* bits 8:8 */
    cs_uint16 PSLM2RDI             :  1 ; /* bits 9:9 */
    cs_uint16 PSLU2RDI             :  1 ; /* bits 10:10 */
    cs_uint16 PTM2RDI              :  1 ; /* bits 11:11 */
    cs_uint16 PTU2RDI              :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 Disconc              :  1 ; /* bits 14:14 */
    cs_uint16 sschk                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PRDITxInsert_t;

#define FR_SONET32RX_PathLabel                   0x0c003
#define FR_SONET32RX_PathLabel_STRIDE            16
#define FR_SONET32RX_PathLabel_COUNT             4
#define FR_SONET32RX_PathLabel_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 C2                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 C2                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathLabel_t;

#define FR_SONET32RX_APSPathTxInsert             0x0c004
#define FR_SONET32RX_APSPathTxInsert_STRIDE      16
#define FR_SONET32RX_APSPathTxInsert_COUNT       4
#define FR_SONET32RX_APSPathTxInsert_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 dPSLU                :  1 ; /* bits 7:7 */
    cs_uint16 dPSLM                :  1 ; /* bits 6:6 */
    cs_uint16 dPTU                 :  1 ; /* bits 5:5 */
    cs_uint16 dPTM                 :  1 ; /* bits 4:4 */
    cs_uint16 dUNEQP               :  1 ; /* bits 3:3 */
    cs_uint16 dPRDI                :  1 ; /* bits 2:2 */
    cs_uint16 dPAIS                :  1 ; /* bits 1:1 */
    cs_uint16 dLOP                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 dLOP                 :  1 ; /* bits 0:0 */
    cs_uint16 dPAIS                :  1 ; /* bits 1:1 */
    cs_uint16 dPRDI                :  1 ; /* bits 2:2 */
    cs_uint16 dUNEQP               :  1 ; /* bits 3:3 */
    cs_uint16 dPTM                 :  1 ; /* bits 4:4 */
    cs_uint16 dPTU                 :  1 ; /* bits 5:5 */
    cs_uint16 dPSLM                :  1 ; /* bits 6:6 */
    cs_uint16 dPSLU                :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_APSPathTxInsert_t;

#define FR_SONET32RX_APSPathB3TxInsert           0x0c005
#define FR_SONET32RX_APSPathB3TxInsert_STRIDE    16
#define FR_SONET32RX_APSPathB3TxInsert_COUNT     4
#define FR_SONET32RX_APSPathB3TxInsert_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 aPAIS                :  1 ; /* bits 15:15 */
    cs_uint16 aLOP                 :  1 ; /* bits 14:14 */
    cs_uint16 aPAISConc            :  1 ; /* bits 13:13 */
    cs_uint16 aLOPConc             :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 aLOPConc             :  1 ; /* bits 12:12 */
    cs_uint16 aPAISConc            :  1 ; /* bits 13:13 */
    cs_uint16 aLOP                 :  1 ; /* bits 14:14 */
    cs_uint16 aPAIS                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_APSPathB3TxInsert_t;

#define FR_SONET32RX_PathPointer                 0x0c006
#define FR_SONET32RX_PathPointer_STRIDE          16
#define FR_SONET32RX_PathPointer_COUNT           4
#define FR_SONET32RX_PathPointer_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NDF                  :  4 ; /* bits 15:12 */
    cs_uint16 SS                   :  2 ; /* bits 11:10 */
    cs_uint16 Ptr                  : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Ptr                  : 10 ; /* bits 9:0 */
    cs_uint16 SS                   :  2 ; /* bits 11:10 */
    cs_uint16 NDF                  :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathPointer_t;

#define FR_SONET32RX_PathBIPCount                0x0c007
#define FR_SONET32RX_PathBIPCount_STRIDE         16
#define FR_SONET32RX_PathBIPCount_COUNT          4
#define FR_SONET32RX_PathBIPCount_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 B3BE                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B3BE                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathBIPCount_t;

#define FR_SONET32RX_PathREICount                0x0c008
#define FR_SONET32RX_PathREICount_STRIDE         16
#define FR_SONET32RX_PathREICount_COUNT          4
#define FR_SONET32RX_PathREICount_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 REIP                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 REIP                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathREICount_t;

#define FR_SONET32RX_PathPositiveCount           0x0c009
#define FR_SONET32RX_PathPositiveCount_STRIDE    16
#define FR_SONET32RX_PathPositiveCount_COUNT     4
#define FR_SONET32RX_PathPositiveCount_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Justify              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Justify              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathPositiveCount_t;

#define FR_SONET32RX_PathNegativeCount           0x0c00a
#define FR_SONET32RX_PathNegativeCount_STRIDE    16
#define FR_SONET32RX_PathNegativeCount_COUNT     4
#define FR_SONET32RX_PathNegativeCount_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Justify              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Justify              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathNegativeCount_t;

#define FR_SONET32RX_PathNewPtrCount             0x0c00b
#define FR_SONET32RX_PathNewPtrCount_STRIDE      16
#define FR_SONET32RX_PathNewPtrCount_COUNT       4
#define FR_SONET32RX_PathNewPtrCount_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NewPtr               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NewPtr               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathNewPtrCount_t;

#define FR_SONET32RX_PathInt                     0x0c00c
#define FR_SONET32RX_PathInt_STRIDE              16
#define FR_SONET32RX_PathInt_COUNT               4
#define FR_SONET32RX_PathInt_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NewPtrI              :  1 ; /* bits 15:15 */
    cs_uint16 pathBERI             :  1 ; /* bits 14:14 */
    cs_uint16 PTCapI               :  1 ; /* bits 13:13 */
    cs_uint16 SSI                  :  1 ; /* bits 12:12 */
    cs_uint16 PBGEI                :  1 ; /* bits 11:11 */
    cs_uint16 PBIPI                :  1 ; /* bits 10:10 */
    cs_uint16 PPtrEI               :  1 ; /* bits 9:9 */
    cs_uint16 PREII                :  1 ; /* bits 8:8 */
    cs_uint16 PSLUnsI              :  1 ; /* bits 7:7 */
    cs_uint16 PSLMisI              :  1 ; /* bits 6:6 */
    cs_uint16 PTUnsI               :  1 ; /* bits 5:5 */
    cs_uint16 PTMisI               :  1 ; /* bits 4:4 */
    cs_uint16 PUNEQPI              :  1 ; /* bits 3:3 */
    cs_uint16 PRDII                :  1 ; /* bits 2:2 */
    cs_uint16 PAISI                :  1 ; /* bits 1:1 */
    cs_uint16 LOPI                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOPI                 :  1 ; /* bits 0:0 */
    cs_uint16 PAISI                :  1 ; /* bits 1:1 */
    cs_uint16 PRDII                :  1 ; /* bits 2:2 */
    cs_uint16 PUNEQPI              :  1 ; /* bits 3:3 */
    cs_uint16 PTMisI               :  1 ; /* bits 4:4 */
    cs_uint16 PTUnsI               :  1 ; /* bits 5:5 */
    cs_uint16 PSLMisI              :  1 ; /* bits 6:6 */
    cs_uint16 PSLUnsI              :  1 ; /* bits 7:7 */
    cs_uint16 PREII                :  1 ; /* bits 8:8 */
    cs_uint16 PPtrEI               :  1 ; /* bits 9:9 */
    cs_uint16 PBIPI                :  1 ; /* bits 10:10 */
    cs_uint16 PBGEI                :  1 ; /* bits 11:11 */
    cs_uint16 SSI                  :  1 ; /* bits 12:12 */
    cs_uint16 PTCapI               :  1 ; /* bits 13:13 */
    cs_uint16 pathBERI             :  1 ; /* bits 14:14 */
    cs_uint16 NewPtrI              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathInt_t;

#define FR_SONET32RX_PathMask                    0x0c00d
#define FR_SONET32RX_PathMask_STRIDE             16
#define FR_SONET32RX_PathMask_COUNT              4
#define FR_SONET32RX_PathMask_dft                0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NewPtrM              :  1 ; /* bits 15:15 */
    cs_uint16 pathBERM             :  1 ; /* bits 14:14 */
    cs_uint16 PTCapM               :  1 ; /* bits 13:13 */
    cs_uint16 SSM                  :  1 ; /* bits 12:12 */
    cs_uint16 PBGEM                :  1 ; /* bits 11:11 */
    cs_uint16 PBIPM                :  1 ; /* bits 10:10 */
    cs_uint16 PPtrEM               :  1 ; /* bits 9:9 */
    cs_uint16 PREIM                :  1 ; /* bits 8:8 */
    cs_uint16 PSLUnsM              :  1 ; /* bits 7:7 */
    cs_uint16 PSLMisM              :  1 ; /* bits 6:6 */
    cs_uint16 PTUnsM               :  1 ; /* bits 5:5 */
    cs_uint16 PTMisM               :  1 ; /* bits 4:4 */
    cs_uint16 PUNEQPM              :  1 ; /* bits 3:3 */
    cs_uint16 PRDIM                :  1 ; /* bits 2:2 */
    cs_uint16 PAISM                :  1 ; /* bits 1:1 */
    cs_uint16 LOPM                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOPM                 :  1 ; /* bits 0:0 */
    cs_uint16 PAISM                :  1 ; /* bits 1:1 */
    cs_uint16 PRDIM                :  1 ; /* bits 2:2 */
    cs_uint16 PUNEQPM              :  1 ; /* bits 3:3 */
    cs_uint16 PTMisM               :  1 ; /* bits 4:4 */
    cs_uint16 PTUnsM               :  1 ; /* bits 5:5 */
    cs_uint16 PSLMisM              :  1 ; /* bits 6:6 */
    cs_uint16 PSLUnsM              :  1 ; /* bits 7:7 */
    cs_uint16 PREIM                :  1 ; /* bits 8:8 */
    cs_uint16 PPtrEM               :  1 ; /* bits 9:9 */
    cs_uint16 PBIPM                :  1 ; /* bits 10:10 */
    cs_uint16 PBGEM                :  1 ; /* bits 11:11 */
    cs_uint16 SSM                  :  1 ; /* bits 12:12 */
    cs_uint16 PTCapM               :  1 ; /* bits 13:13 */
    cs_uint16 pathBERM             :  1 ; /* bits 14:14 */
    cs_uint16 NewPtrM              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathMask_t;

#define FR_SONET32RX_PathStatus                  0x0c00e
#define FR_SONET32RX_PathStatus_STRIDE           16
#define FR_SONET32RX_PathStatus_COUNT            4
#define FR_SONET32RX_PathStatus_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NewPtrS              :  1 ; /* bits 15:15 */
    cs_uint16 pathBERS             :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SSS                  :  1 ; /* bits 12:12 */
    cs_uint16 PBGES                :  1 ; /* bits 11:11 */
    cs_uint16 PBIPS                :  1 ; /* bits 10:10 */
    cs_uint16 PPtrES               :  1 ; /* bits 9:9 */
    cs_uint16 PREIS                :  1 ; /* bits 8:8 */
    cs_uint16 PSLUnsS              :  1 ; /* bits 7:7 */
    cs_uint16 PSLMisS              :  1 ; /* bits 6:6 */
    cs_uint16 PTUnsS               :  1 ; /* bits 5:5 */
    cs_uint16 PTMisS               :  1 ; /* bits 4:4 */
    cs_uint16 PUNEQPS              :  1 ; /* bits 3:3 */
    cs_uint16 PRDIS                :  1 ; /* bits 2:2 */
    cs_uint16 PAISS                :  1 ; /* bits 1:1 */
    cs_uint16 LOPS                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOPS                 :  1 ; /* bits 0:0 */
    cs_uint16 PAISS                :  1 ; /* bits 1:1 */
    cs_uint16 PRDIS                :  1 ; /* bits 2:2 */
    cs_uint16 PUNEQPS              :  1 ; /* bits 3:3 */
    cs_uint16 PTMisS               :  1 ; /* bits 4:4 */
    cs_uint16 PTUnsS               :  1 ; /* bits 5:5 */
    cs_uint16 PSLMisS              :  1 ; /* bits 6:6 */
    cs_uint16 PSLUnsS              :  1 ; /* bits 7:7 */
    cs_uint16 PREIS                :  1 ; /* bits 8:8 */
    cs_uint16 PPtrES               :  1 ; /* bits 9:9 */
    cs_uint16 PBIPS                :  1 ; /* bits 10:10 */
    cs_uint16 PBGES                :  1 ; /* bits 11:11 */
    cs_uint16 SSS                  :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 pathBERS             :  1 ; /* bits 14:14 */
    cs_uint16 NewPtrS              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathStatus_t;

#define FR_SONET32RX_Configuration               0x0c300
#define FR_SONET32RX_Configuration_dft           0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 reset                :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 rxAlmPort            :  4 ; /* bits 12:9 */
    cs_uint16 SDH                  :  1 ; /* bits 8:8 */
    cs_uint16 ShortFrame           :  1 ; /* bits 7:7 */
    cs_uint16 Fixed_Z0             :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 EvenParity           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EvenParity           :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 Fixed_Z0             :  1 ; /* bits 6:6 */
    cs_uint16 ShortFrame           :  1 ; /* bits 7:7 */
    cs_uint16 SDH                  :  1 ; /* bits 8:8 */
    cs_uint16 rxAlmPort            :  4 ; /* bits 12:9 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 reset                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_Configuration_t;
#define     rxAlmPort_LOS                                 0x00
#define     rxAlmPort_LOF                                 0x01
#define     rxAlmPort_AISL                                0x02
#define     rxAlmPort_SF                                  0x03
#define     rxAlmPort_AISP_0                              0x08
#define     rxAlmPort_AISP_1                              0x09
#define     rxAlmPort_AISP_2                              0x0a
#define     rxAlmPort_AISP_3                              0x0b
#define     rxAlmPort_LOP_0                               0x0c
#define     rxAlmPort_LOP_1                               0x0d
#define     rxAlmPort_LOP_2                               0x0e
#define     rxAlmPort_LOP_3                               0x0f

#define FR_SONET32RX_LOSThreshold                0x0c301
#define FR_SONET32RX_LOSThreshold_dft            0x0006
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 LOSD                 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOSD                 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LOSThreshold_t;
#define     LOSD_LOSD_23us                                0x03
#define     LOSD_LOSD_5us                                 0x06
#define     LOSD_LOSD_25us                                0x1e
#define     LOSD_LOSD_50us                                0x3c
#define     LOSD_LOSD_75us                                0x60
#define     LOSD_LOSD_100us                               0xd8

#define FR_SONET32RX_SectionLineControl          0x0c302
#define FR_SONET32RX_SectionLineControl_dft      0x8000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 J0Len                :  1 ; /* bits 15:15 */
    cs_uint16 J0Mode               :  1 ; /* bits 14:14 */
    cs_uint16 FramerReset          :  1 ; /* bits 13:13 */
    cs_uint16 PRBSLoad             :  1 ; /* bits 12:12 */
    cs_uint16 LBERReset            :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 numA1A2              :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 BlkREI               :  1 ; /* bits 4:4 */
    cs_uint16 BlkB2EO              :  1 ; /* bits 3:3 */
    cs_uint16 BlkB2E               :  1 ; /* bits 2:2 */
    cs_uint16 BlkB1E               :  1 ; /* bits 1:1 */
    cs_uint16 DisDScr              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DisDScr              :  1 ; /* bits 0:0 */
    cs_uint16 BlkB1E               :  1 ; /* bits 1:1 */
    cs_uint16 BlkB2E               :  1 ; /* bits 2:2 */
    cs_uint16 BlkB2EO              :  1 ; /* bits 3:3 */
    cs_uint16 BlkREI               :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 numA1A2              :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 LBERReset            :  1 ; /* bits 11:11 */
    cs_uint16 PRBSLoad             :  1 ; /* bits 12:12 */
    cs_uint16 FramerReset          :  1 ; /* bits 13:13 */
    cs_uint16 J0Mode               :  1 ; /* bits 14:14 */
    cs_uint16 J0Len                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_SectionLineControl_t;
#define     numA1A2_CMP_4A1_4A2                           0x00
#define     numA1A2_CMP_8A1_8A2                           0x01
#define     numA1A2_CMP_12A1_12A2                         0x02
#define     numA1A2_CMP_16A1_16A2                         0x03

#define FR_SONET32RX_SecLineAlarmtoTxControl     0x0c303
#define FR_SONET32RX_SecLineAlarmtoTxControl_dft 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STM2AISL             :  1 ; /* bits 15:15 */
    cs_uint16 STU2AISL             :  1 ; /* bits 14:14 */
    cs_uint16 BERSF2AISL           :  1 ; /* bits 13:13 */
    cs_uint16 SD2AISL              :  1 ; /* bits 12:12 */
    cs_uint16 STM2RDIL             :  1 ; /* bits 11:11 */
    cs_uint16 STU2RDIL             :  1 ; /* bits 10:10 */
    cs_uint16 BERSF2RDIL           :  1 ; /* bits 9:9 */
    cs_uint16 SD2RDIL              :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 AutoIns              :  1 ; /* bits 4:4 */
    cs_uint16 STM2Drop             :  1 ; /* bits 3:3 */
    cs_uint16 STU2Drop             :  1 ; /* bits 2:2 */
    cs_uint16 BERSF2Drop           :  1 ; /* bits 1:1 */
    cs_uint16 SD2Drop              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SD2Drop              :  1 ; /* bits 0:0 */
    cs_uint16 BERSF2Drop           :  1 ; /* bits 1:1 */
    cs_uint16 STU2Drop             :  1 ; /* bits 2:2 */
    cs_uint16 STM2Drop             :  1 ; /* bits 3:3 */
    cs_uint16 AutoIns              :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 SD2RDIL              :  1 ; /* bits 8:8 */
    cs_uint16 BERSF2RDIL           :  1 ; /* bits 9:9 */
    cs_uint16 STU2RDIL             :  1 ; /* bits 10:10 */
    cs_uint16 STM2RDIL             :  1 ; /* bits 11:11 */
    cs_uint16 SD2AISL              :  1 ; /* bits 12:12 */
    cs_uint16 BERSF2AISL           :  1 ; /* bits 13:13 */
    cs_uint16 STU2AISL             :  1 ; /* bits 14:14 */
    cs_uint16 STM2AISL             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_SecLineAlarmtoTxControl_t;

#define FR_SONET32RX_APSTxSecLineAlarm           0x0c304
#define FR_SONET32RX_APSTxSecLineAlarm_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 dSTU                 :  1 ; /* bits 8:8 */
    cs_uint16 dSTM                 :  1 ; /* bits 7:7 */
    cs_uint16 dRDIL                :  1 ; /* bits 6:6 */
    cs_uint16 dSD                  :  1 ; /* bits 5:5 */
    cs_uint16 dAISL                :  1 ; /* bits 4:4 */
    cs_uint16 dSF                  :  1 ; /* bits 3:3 */
    cs_uint16 dLOF                 :  1 ; /* bits 2:2 */
    cs_uint16 dSEF                 :  1 ; /* bits 1:1 */
    cs_uint16 dLOS                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 dLOS                 :  1 ; /* bits 0:0 */
    cs_uint16 dSEF                 :  1 ; /* bits 1:1 */
    cs_uint16 dLOF                 :  1 ; /* bits 2:2 */
    cs_uint16 dSF                  :  1 ; /* bits 3:3 */
    cs_uint16 dAISL                :  1 ; /* bits 4:4 */
    cs_uint16 dSD                  :  1 ; /* bits 5:5 */
    cs_uint16 dRDIL                :  1 ; /* bits 6:6 */
    cs_uint16 dSTM                 :  1 ; /* bits 7:7 */
    cs_uint16 dSTU                 :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_APSTxSecLineAlarm_t;

#define FR_SONET32RX_APSTxLineB2Count            0x0c305
#define FR_SONET32RX_APSTxLineB2Count_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 REILCnt              :  8 ; /* bits 15:8 */
    cs_uint16 B2ErrCnt             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B2ErrCnt             :  8 ; /* bits 7:0 */
    cs_uint16 REILCnt              :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_APSTxLineB2Count_t;

#define FR_SONET32RX_SectionInterrupt            0x0c306
#define FR_SONET32RX_SectionInterrupt_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 X_LOS_raw_I          :  1 ; /* bits 13:13 */
    cs_uint16 X_LOS_qual_I         :  1 ; /* bits 12:12 */
    cs_uint16 SerialHDLCI          :  1 ; /* bits 11:11 */
    cs_uint16 ParityErrI           :  1 ; /* bits 10:10 */
    cs_uint16 PRBSErrI             :  1 ; /* bits 9:9 */
    cs_uint16 SecTrRcvI            :  1 ; /* bits 8:8 */
    cs_uint16 B1BIPI               :  1 ; /* bits 7:7 */
    cs_uint16 B1BIPEI              :  1 ; /* bits 6:6 */
    cs_uint16 SecTrMisI            :  1 ; /* bits 5:5 */
    cs_uint16 SecTrUnsI            :  1 ; /* bits 4:4 */
    cs_uint16 SEFI                 :  1 ; /* bits 3:3 */
    cs_uint16 dZ0InconI            :  1 ; /* bits 2:2 */
    cs_uint16 LOFI                 :  1 ; /* bits 1:1 */
    cs_uint16 LOSI                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOSI                 :  1 ; /* bits 0:0 */
    cs_uint16 LOFI                 :  1 ; /* bits 1:1 */
    cs_uint16 dZ0InconI            :  1 ; /* bits 2:2 */
    cs_uint16 SEFI                 :  1 ; /* bits 3:3 */
    cs_uint16 SecTrUnsI            :  1 ; /* bits 4:4 */
    cs_uint16 SecTrMisI            :  1 ; /* bits 5:5 */
    cs_uint16 B1BIPEI              :  1 ; /* bits 6:6 */
    cs_uint16 B1BIPI               :  1 ; /* bits 7:7 */
    cs_uint16 SecTrRcvI            :  1 ; /* bits 8:8 */
    cs_uint16 PRBSErrI             :  1 ; /* bits 9:9 */
    cs_uint16 ParityErrI           :  1 ; /* bits 10:10 */
    cs_uint16 SerialHDLCI          :  1 ; /* bits 11:11 */
    cs_uint16 X_LOS_qual_I         :  1 ; /* bits 12:12 */
    cs_uint16 X_LOS_raw_I          :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_SectionInterrupt_t;

#define FR_SONET32RX_SectionStatus               0x0c307
#define FR_SONET32RX_SectionStatus_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 InFrameS             :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 X_LOS_raw_S          :  1 ; /* bits 13:13 */
    cs_uint16 X_LOS_qual_S         :  1 ; /* bits 12:12 */
    cs_uint16 HuntPRBSS            :  1 ; /* bits 11:11 */
    cs_uint16 ParityErrS           :  1 ; /* bits 10:10 */
    cs_uint16 PRBSErrS             :  1 ; /* bits 9:9 */
    cs_uint16 SecTrRcvS            :  1 ; /* bits 8:8 */
    cs_uint16 B1BIPS               :  1 ; /* bits 7:7 */
    cs_uint16 B1BIPES              :  1 ; /* bits 6:6 */
    cs_uint16 SecTrMisS            :  1 ; /* bits 5:5 */
    cs_uint16 SecTrUnsS            :  1 ; /* bits 4:4 */
    cs_uint16 SEFS                 :  1 ; /* bits 3:3 */
    cs_uint16 dZ0InconS            :  1 ; /* bits 2:2 */
    cs_uint16 LOFS                 :  1 ; /* bits 1:1 */
    cs_uint16 LOSS                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOSS                 :  1 ; /* bits 0:0 */
    cs_uint16 LOFS                 :  1 ; /* bits 1:1 */
    cs_uint16 dZ0InconS            :  1 ; /* bits 2:2 */
    cs_uint16 SEFS                 :  1 ; /* bits 3:3 */
    cs_uint16 SecTrUnsS            :  1 ; /* bits 4:4 */
    cs_uint16 SecTrMisS            :  1 ; /* bits 5:5 */
    cs_uint16 B1BIPES              :  1 ; /* bits 6:6 */
    cs_uint16 B1BIPS               :  1 ; /* bits 7:7 */
    cs_uint16 SecTrRcvS            :  1 ; /* bits 8:8 */
    cs_uint16 PRBSErrS             :  1 ; /* bits 9:9 */
    cs_uint16 ParityErrS           :  1 ; /* bits 10:10 */
    cs_uint16 HuntPRBSS            :  1 ; /* bits 11:11 */
    cs_uint16 X_LOS_qual_S         :  1 ; /* bits 12:12 */
    cs_uint16 X_LOS_raw_S          :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 InFrameS             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_SectionStatus_t;

#define FR_SONET32RX_SectionMask                 0x0c308
#define FR_SONET32RX_SectionMask_dft             0x3fff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 X_LOS_raw_M          :  1 ; /* bits 13:13 */
    cs_uint16 X_LOS_qual_M         :  1 ; /* bits 12:12 */
    cs_uint16 SerialHDLCM          :  1 ; /* bits 11:11 */
    cs_uint16 ParityErrM           :  1 ; /* bits 10:10 */
    cs_uint16 PRBSErrM             :  1 ; /* bits 9:9 */
    cs_uint16 SecTrRcvM            :  1 ; /* bits 8:8 */
    cs_uint16 B1BIPM               :  1 ; /* bits 7:7 */
    cs_uint16 B1BIPEM              :  1 ; /* bits 6:6 */
    cs_uint16 SecTrMisM            :  1 ; /* bits 5:5 */
    cs_uint16 SecTrUnsM            :  1 ; /* bits 4:4 */
    cs_uint16 SEFM                 :  1 ; /* bits 3:3 */
    cs_uint16 dZ0InconM            :  1 ; /* bits 2:2 */
    cs_uint16 LOFM                 :  1 ; /* bits 1:1 */
    cs_uint16 LOSM                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOSM                 :  1 ; /* bits 0:0 */
    cs_uint16 LOFM                 :  1 ; /* bits 1:1 */
    cs_uint16 dZ0InconM            :  1 ; /* bits 2:2 */
    cs_uint16 SEFM                 :  1 ; /* bits 3:3 */
    cs_uint16 SecTrUnsM            :  1 ; /* bits 4:4 */
    cs_uint16 SecTrMisM            :  1 ; /* bits 5:5 */
    cs_uint16 B1BIPEM              :  1 ; /* bits 6:6 */
    cs_uint16 B1BIPM               :  1 ; /* bits 7:7 */
    cs_uint16 SecTrRcvM            :  1 ; /* bits 8:8 */
    cs_uint16 PRBSErrM             :  1 ; /* bits 9:9 */
    cs_uint16 ParityErrM           :  1 ; /* bits 10:10 */
    cs_uint16 SerialHDLCM          :  1 ; /* bits 11:11 */
    cs_uint16 X_LOS_qual_M         :  1 ; /* bits 12:12 */
    cs_uint16 X_LOS_raw_M          :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_SectionMask_t;

#define FR_SONET32RX_B1BIPErrorCount             0x0c309
#define FR_SONET32RX_B1BIPErrorCount_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 B1BE                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B1BE                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_B1BIPErrorCount_t;

#define FR_SONET32RX_LineInterrupt               0x0c30a
#define FR_SONET32RX_LineInterrupt_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SerialHDLCI          :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 LREII                :  1 ; /* bits 6:6 */
    cs_uint16 LEREIEI              :  1 ; /* bits 5:5 */
    cs_uint16 B2BIPI               :  1 ; /* bits 4:4 */
    cs_uint16 B2BIPEI              :  1 ; /* bits 3:3 */
    cs_uint16 NewZ1S1I             :  1 ; /* bits 2:2 */
    cs_uint16 RDILI                :  1 ; /* bits 1:1 */
    cs_uint16 AISLI                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 AISLI                :  1 ; /* bits 0:0 */
    cs_uint16 RDILI                :  1 ; /* bits 1:1 */
    cs_uint16 NewZ1S1I             :  1 ; /* bits 2:2 */
    cs_uint16 B2BIPEI              :  1 ; /* bits 3:3 */
    cs_uint16 B2BIPI               :  1 ; /* bits 4:4 */
    cs_uint16 LEREIEI              :  1 ; /* bits 5:5 */
    cs_uint16 LREII                :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 SerialHDLCI          :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LineInterrupt_t;

#define FR_SONET32RX_LineStatus                  0x0c30b
#define FR_SONET32RX_LineStatus_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 LREIS                :  1 ; /* bits 6:6 */
    cs_uint16 LEREIES              :  1 ; /* bits 5:5 */
    cs_uint16 B2BIPS               :  1 ; /* bits 4:4 */
    cs_uint16 B2BIPES              :  1 ; /* bits 3:3 */
    cs_uint16 NewZ1S1S             :  1 ; /* bits 2:2 */
    cs_uint16 RDILS                :  1 ; /* bits 1:1 */
    cs_uint16 AISLS                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 AISLS                :  1 ; /* bits 0:0 */
    cs_uint16 RDILS                :  1 ; /* bits 1:1 */
    cs_uint16 NewZ1S1S             :  1 ; /* bits 2:2 */
    cs_uint16 B2BIPES              :  1 ; /* bits 3:3 */
    cs_uint16 B2BIPS               :  1 ; /* bits 4:4 */
    cs_uint16 LEREIES              :  1 ; /* bits 5:5 */
    cs_uint16 LREIS                :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LineStatus_t;

#define FR_SONET32RX_LineMask                    0x0c30c
#define FR_SONET32RX_LineMask_dft                0x807f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SerialHDLCM          :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 LREIM                :  1 ; /* bits 6:6 */
    cs_uint16 LEREIEM              :  1 ; /* bits 5:5 */
    cs_uint16 B2BIPM               :  1 ; /* bits 4:4 */
    cs_uint16 B2BIPEM              :  1 ; /* bits 3:3 */
    cs_uint16 NewZ1S1M             :  1 ; /* bits 2:2 */
    cs_uint16 RDILM                :  1 ; /* bits 1:1 */
    cs_uint16 AISLM                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 AISLM                :  1 ; /* bits 0:0 */
    cs_uint16 RDILM                :  1 ; /* bits 1:1 */
    cs_uint16 NewZ1S1M             :  1 ; /* bits 2:2 */
    cs_uint16 B2BIPEM              :  1 ; /* bits 3:3 */
    cs_uint16 B2BIPM               :  1 ; /* bits 4:4 */
    cs_uint16 LEREIEM              :  1 ; /* bits 5:5 */
    cs_uint16 LREIM                :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 SerialHDLCM          :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LineMask_t;

#define FR_SONET32RX_APSInterrupt                0x0c30d
#define FR_SONET32RX_APSInterrupt_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BadK1S               :  1 ; /* bits 15:15 */
    cs_uint16 BadK2S               :  1 ; /* bits 14:14 */
    cs_uint16 BadK3S               :  1 ; /* bits 13:13 */
    cs_uint16 BadF2S               :  1 ; /* bits 12:12 */
    cs_uint16 BadF2I               :  1 ; /* bits 11:11 */
    cs_uint16 NewF2I               :  1 ; /* bits 10:10 */
    cs_uint16 SFS                  :  1 ; /* bits 9:9 */
    cs_uint16 SDS                  :  1 ; /* bits 8:8 */
    cs_uint16 BadK1I               :  1 ; /* bits 7:7 */
    cs_uint16 BadK2I               :  1 ; /* bits 6:6 */
    cs_uint16 BadK3I               :  1 ; /* bits 5:5 */
    cs_uint16 NewK1I               :  1 ; /* bits 4:4 */
    cs_uint16 NewK2I               :  1 ; /* bits 3:3 */
    cs_uint16 NewK3I               :  1 ; /* bits 2:2 */
    cs_uint16 SFI                  :  1 ; /* bits 1:1 */
    cs_uint16 SDI                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SDI                  :  1 ; /* bits 0:0 */
    cs_uint16 SFI                  :  1 ; /* bits 1:1 */
    cs_uint16 NewK3I               :  1 ; /* bits 2:2 */
    cs_uint16 NewK2I               :  1 ; /* bits 3:3 */
    cs_uint16 NewK1I               :  1 ; /* bits 4:4 */
    cs_uint16 BadK3I               :  1 ; /* bits 5:5 */
    cs_uint16 BadK2I               :  1 ; /* bits 6:6 */
    cs_uint16 BadK1I               :  1 ; /* bits 7:7 */
    cs_uint16 SDS                  :  1 ; /* bits 8:8 */
    cs_uint16 SFS                  :  1 ; /* bits 9:9 */
    cs_uint16 NewF2I               :  1 ; /* bits 10:10 */
    cs_uint16 BadF2I               :  1 ; /* bits 11:11 */
    cs_uint16 BadF2S               :  1 ; /* bits 12:12 */
    cs_uint16 BadK3S               :  1 ; /* bits 13:13 */
    cs_uint16 BadK2S               :  1 ; /* bits 14:14 */
    cs_uint16 BadK1S               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_APSInterrupt_t;

#define FR_SONET32RX_APSMask                     0x0c30e
#define FR_SONET32RX_APSMask_dft                 0x0cff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  4 ;
    cs_uint16 BadF2M               :  1 ; /* bits 11:11 */
    cs_uint16 NewF2M               :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 BadK1M               :  1 ; /* bits 7:7 */
    cs_uint16 BadK2M               :  1 ; /* bits 6:6 */
    cs_uint16 BadK3M               :  1 ; /* bits 5:5 */
    cs_uint16 NewK1M               :  1 ; /* bits 4:4 */
    cs_uint16 NewK2M               :  1 ; /* bits 3:3 */
    cs_uint16 NewK3M               :  1 ; /* bits 2:2 */
    cs_uint16 SFM                  :  1 ; /* bits 1:1 */
    cs_uint16 SDM                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SDM                  :  1 ; /* bits 0:0 */
    cs_uint16 SFM                  :  1 ; /* bits 1:1 */
    cs_uint16 NewK3M               :  1 ; /* bits 2:2 */
    cs_uint16 NewK2M               :  1 ; /* bits 3:3 */
    cs_uint16 NewK1M               :  1 ; /* bits 4:4 */
    cs_uint16 BadK3M               :  1 ; /* bits 5:5 */
    cs_uint16 BadK2M               :  1 ; /* bits 6:6 */
    cs_uint16 BadK1M               :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 NewF2M               :  1 ; /* bits 10:10 */
    cs_uint16 BadF2M               :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_APSMask_t;

#define FR_SONET32RX_K1K2                        0x0c30f
#define FR_SONET32RX_K1K2_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_K1K2_t;

#define FR_SONET32RX_K3K4                        0x0c310
#define FR_SONET32RX_K3K4_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_K3K4_t;

#define FR_SONET32RX_Z1S1                        0x0c311
#define FR_SONET32RX_Z1S1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 Z1S1                 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z1S1                 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_Z1S1_t;

#define FR_SONET32RX_LBERAcc                     0x0c312
#define FR_SONET32RX_LBERAcc_dft                 0xc001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Scale                :  2 ; /* bits 15:14 */
    cs_uint16 AccInterval          : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 AccInterval          : 14 ; /* bits 13:0 */
    cs_uint16 Scale                :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LBERAcc_t;
#define     Scale_SCALE_0                                 0x00
#define     Scale_SCALE_1                                 0x01
#define     Scale_SCALE_4                                 0x02
#define     Scale_SCALE_8                                 0x03

#define FR_SONET32RX_LBER                        0x0c313
#define FR_SONET32RX_LBER_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 leakValue            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 leakValue            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LBER_t;

#define FR_SONET32RX_LBERDegradeDeclaring        0x0c314
#define FR_SONET32RX_LBERDegradeDeclaring_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SDDT                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SDDT                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LBERDegradeDeclaring_t;

#define FR_SONET32RX_LBERDegradeClearing         0x0c315
#define FR_SONET32RX_LBERDegradeClearing_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SDCT                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SDCT                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LBERDegradeClearing_t;

#define FR_SONET32RX_LBERFailureDeclaring        0x0c316
#define FR_SONET32RX_LBERFailureDeclaring_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SFDT                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SFDT                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LBERFailureDeclaring_t;

#define FR_SONET32RX_LBERFailureClearing         0x0c317
#define FR_SONET32RX_LBERFailureClearing_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SFCT                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SFCT                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LBERFailureClearing_t;

#define FR_SONET32RX_B2BIPErrorCountHigh         0x0c318
#define FR_SONET32RX_B2BIPErrorCountHigh_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 B2BEH                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B2BEH                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_B2BIPErrorCountHigh_t;

#define FR_SONET32RX_B2BIPErrorCountLow          0x0c319
#define FR_SONET32RX_B2BIPErrorCountLow_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 B2BEL                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B2BEL                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_B2BIPErrorCountLow_t;

#define FR_SONET32RX_LineREICountHigh            0x0c31a
#define FR_SONET32RX_LineREICountHigh_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LREIH                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LREIH                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LineREICountHigh_t;

#define FR_SONET32RX_LineREICountLow             0x0c31b
#define FR_SONET32RX_LineREICountLow_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LREIL                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LREIL                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_LineREICountLow_t;

#define FR_SONET32RX_TestPortSelect              0x0c31c
#define FR_SONET32RX_TestPortSelect_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 mux                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 mux                  :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_TestPortSelect_t;

#define FR_SONET32RX_Z0_byte                     0x0c31e
#define FR_SONET32RX_Z0_byte_dft                 0x00cc
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 Z0_Byte_Value        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z0_Byte_Value        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_Z0_byte_t;

#define FR_SONET32RX_PBERAcc                     0x0c320
#define FR_SONET32RX_PBERAcc_dft                 0xc001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Scale                :  2 ; /* bits 15:14 */
    cs_uint16 AccInterval          : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 AccInterval          : 14 ; /* bits 13:0 */
    cs_uint16 Scale                :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PBERAcc_t;

#define FR_SONET32RX_PBER                        0x0c321
#define FR_SONET32RX_PBER_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 leakValue            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 leakValue            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PBER_t;

#define FR_SONET32RX_PBERFailureDeclaring        0x0c322
#define FR_SONET32RX_PBERFailureDeclaring_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SFDT                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SFDT                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PBERFailureDeclaring_t;

#define FR_SONET32RX_PBERFailureClearing         0x0c323
#define FR_SONET32RX_PBERFailureClearing_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SFCT                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SFCT                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PBERFailureClearing_t;

#define FR_SONET32RX_PathInterrupts              0x0c324
#define FR_SONET32RX_PathInterrupts_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 PathI                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PathI                :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathInterrupts_t;

#define FR_SONET32RX_PathMasks                   0x0c325
#define FR_SONET32RX_PathMasks_dft               0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 PathM                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PathM                :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PathMasks_t;

#define FR_SONET32RX_pathTraceSelect             0x0c328
#define FR_SONET32RX_pathTraceSelect_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  9 ;
    cs_uint16 pathNumber           :  2 ; /* bits 6:5 */
    cs_uint16 rsrvd1               :  5 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 pathNumber           :  2 ; /* bits 6:5 */
    cs_uint16 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_pathTraceSelect_t;
#define     pathNumber_SEL_PATH0                          0x00
#define     pathNumber_SEL_PATH1                          0x01
#define     pathNumber_SEL_PATH2                          0x02
#define     pathNumber_SEL_PATH3                          0x03

#define FR_SONET32RX_F2                          0x0c329
#define FR_SONET32RX_F2_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 F2                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 F2                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_F2_t;

#define FR_SONET32RX_X_LOS_Config                0x0c32a
#define FR_SONET32RX_X_LOS_Config_dft            0x007a
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 X_LOS_act_low        :  1 ; /* bits 6:6 */
    cs_uint16 X_LOS_SEF_e          :  1 ; /* bits 5:5 */
    cs_uint16 X_LOS_d_set_edge     :  1 ; /* bits 4:4 */
    cs_uint16 X_LOS_F_rst_edge     :  1 ; /* bits 3:3 */
    cs_uint16 X_LOS_d_set_dis      :  1 ; /* bits 2:2 */
    cs_uint16 X_LOS_F_rst_dis      :  1 ; /* bits 1:1 */
    cs_uint16 LOS_dLOF_clear_dis   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOS_dLOF_clear_dis   :  1 ; /* bits 0:0 */
    cs_uint16 X_LOS_F_rst_dis      :  1 ; /* bits 1:1 */
    cs_uint16 X_LOS_d_set_dis      :  1 ; /* bits 2:2 */
    cs_uint16 X_LOS_F_rst_edge     :  1 ; /* bits 3:3 */
    cs_uint16 X_LOS_d_set_edge     :  1 ; /* bits 4:4 */
    cs_uint16 X_LOS_SEF_e          :  1 ; /* bits 5:5 */
    cs_uint16 X_LOS_act_low        :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_X_LOS_Config_t;

#define FR_SONET32RX_PRBSErrorCount              0x0c330
#define FR_SONET32RX_PRBSErrorCount_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Cnt                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Cnt                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_PRBSErrorCount_t;

#define FR_SONET32RX_RxSectionTraceExp           0x0c340
#define FR_SONET32RX_RxSectionTraceExp_STRIDE    1
#define FR_SONET32RX_RxSectionTraceExp_COUNT     32
#define FR_SONET32RX_RxSectionTraceExp_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STBfr                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STBfr                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_RxSectionTraceExp_t;

#define FR_SONET32RX_RxPathTraceExp              0x0c360
#define FR_SONET32RX_RxPathTraceExp_STRIDE       1
#define FR_SONET32RX_RxPathTraceExp_COUNT        32
#define FR_SONET32RX_RxPathTraceExp_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PTBfr                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PTBfr                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_SONET32RX_RxPathTraceExp_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::recvOverhead
 */

#define FR_RECVOVERHEAD_alarm3Path               0x0c400
#define FR_RECVOVERHEAD_alarm3Path_STRIDE        16
#define FR_RECVOVERHEAD_alarm3Path_COUNT         4
#define FR_RECVOVERHEAD_alarm3Path_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 dLOPConcat           :  1 ; /* bits 8:8 */
    cs_uint16 dPSLUI               :  1 ; /* bits 7:7 */
    cs_uint16 dPSLM                :  1 ; /* bits 6:6 */
    cs_uint16 dPTU                 :  1 ; /* bits 5:5 */
    cs_uint16 dPTM                 :  1 ; /* bits 4:4 */
    cs_uint16 dUNEQP               :  1 ; /* bits 3:3 */
    cs_uint16 dRDIP                :  1 ; /* bits 2:2 */
    cs_uint16 dPAIS                :  1 ; /* bits 1:1 */
    cs_uint16 dLOP                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 dLOP                 :  1 ; /* bits 0:0 */
    cs_uint16 dPAIS                :  1 ; /* bits 1:1 */
    cs_uint16 dRDIP                :  1 ; /* bits 2:2 */
    cs_uint16 dUNEQP               :  1 ; /* bits 3:3 */
    cs_uint16 dPTM                 :  1 ; /* bits 4:4 */
    cs_uint16 dPTU                 :  1 ; /* bits 5:5 */
    cs_uint16 dPSLM                :  1 ; /* bits 6:6 */
    cs_uint16 dPSLUI               :  1 ; /* bits 7:7 */
    cs_uint16 dLOPConcat           :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_alarm3Path_t;

#define FR_RECVOVERHEAD_alarm4Path               0x0c401
#define FR_RECVOVERHEAD_alarm4Path_STRIDE        16
#define FR_RECVOVERHEAD_alarm4Path_COUNT         4
#define FR_RECVOVERHEAD_alarm4Path_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 REIP                 :  4 ; /* bits 7:4 */
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
    cs_uint16 REIP                 :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_alarm4Path_t;

#define FR_RECVOVERHEAD_pathOverheadA            0x0c402
#define FR_RECVOVERHEAD_pathOverheadA_STRIDE     16
#define FR_RECVOVERHEAD_pathOverheadA_COUNT      4
#define FR_RECVOVERHEAD_pathOverheadA_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 F2                   :  8 ; /* bits 15:8 */
    cs_uint16 C2                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 C2                   :  8 ; /* bits 7:0 */
    cs_uint16 F2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_pathOverheadA_t;

#define FR_RECVOVERHEAD_pathOverheadB            0x0c403
#define FR_RECVOVERHEAD_pathOverheadB_STRIDE     16
#define FR_RECVOVERHEAD_pathOverheadB_COUNT      4
#define FR_RECVOVERHEAD_pathOverheadB_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Z4                   :  8 ; /* bits 15:8 */
    cs_uint16 Z3                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z3                   :  8 ; /* bits 7:0 */
    cs_uint16 Z4                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_pathOverheadB_t;

#define FR_RECVOVERHEAD_pathOverheadC            0x0c404
#define FR_RECVOVERHEAD_pathOverheadC_STRIDE     16
#define FR_RECVOVERHEAD_pathOverheadC_COUNT      4
#define FR_RECVOVERHEAD_pathOverheadC_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 G1                   :  8 ; /* bits 15:8 */
    cs_uint16 Z5                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z5                   :  8 ; /* bits 7:0 */
    cs_uint16 G1                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_pathOverheadC_t;

#define FR_RECVOVERHEAD_Ctrl                     0x0c700
#define FR_RECVOVERHEAD_Ctrl_dft                 0x0344
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 TOHBitOrder          :  1 ; /* bits 9:9 */
    cs_uint16 DCCBitOrder          :  1 ; /* bits 8:8 */
    cs_uint16 APSUpOverRide        :  1 ; /* bits 7:7 */
    cs_uint16 APSen                :  1 ; /* bits 6:6 */
    cs_uint16 APSmode              :  2 ; /* bits 5:4 */
    cs_uint16 DCCclkPolarity       :  1 ; /* bits 3:3 */
    cs_uint16 DCCmode              :  2 ; /* bits 2:1 */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
    cs_uint16 DCCmode              :  2 ; /* bits 2:1 */
    cs_uint16 DCCclkPolarity       :  1 ; /* bits 3:3 */
    cs_uint16 APSmode              :  2 ; /* bits 5:4 */
    cs_uint16 APSen                :  1 ; /* bits 6:6 */
    cs_uint16 APSUpOverRide        :  1 ; /* bits 7:7 */
    cs_uint16 DCCBitOrder          :  1 ; /* bits 8:8 */
    cs_uint16 TOHBitOrder          :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_Ctrl_t;
#define     APSmode_APS_K1_K4_S1                          0x00
#define     APSmode_APS_RECV_ALM                          0x01
#define     APSmode_APS_K1_ALM                            0x02
#define     DCCmode_SEC_DCC                               0x00
#define     DCCmode_LIN_DCC                               0x01
#define     DCCmode_SEC_LIN_DCC                           0x02
#define     DCCmode_DIS_DCC                               0x03

#define FR_RECVOVERHEAD_APS1                     0x0c701
#define FR_RECVOVERHEAD_APS1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_APS1_t;

#define FR_RECVOVERHEAD_APS2                     0x0c702
#define FR_RECVOVERHEAD_APS2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_APS2_t;

#define FR_RECVOVERHEAD_SyncStat                 0x0c703
#define FR_RECVOVERHEAD_SyncStat_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_SyncStat_t;

#define FR_RECVOVERHEAD_alarm1                   0x0c704
#define FR_RECVOVERHEAD_alarm1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 dSTU                 :  1 ; /* bits 8:8 */
    cs_uint16 dSTM                 :  1 ; /* bits 7:7 */
    cs_uint16 dRDIL                :  1 ; /* bits 6:6 */
    cs_uint16 dSD                  :  1 ; /* bits 5:5 */
    cs_uint16 dAISL                :  1 ; /* bits 4:4 */
    cs_uint16 dSF                  :  1 ; /* bits 3:3 */
    cs_uint16 dLOF                 :  1 ; /* bits 2:2 */
    cs_uint16 dSEF                 :  1 ; /* bits 1:1 */
    cs_uint16 dLOS                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 dLOS                 :  1 ; /* bits 0:0 */
    cs_uint16 dSEF                 :  1 ; /* bits 1:1 */
    cs_uint16 dLOF                 :  1 ; /* bits 2:2 */
    cs_uint16 dSF                  :  1 ; /* bits 3:3 */
    cs_uint16 dAISL                :  1 ; /* bits 4:4 */
    cs_uint16 dSD                  :  1 ; /* bits 5:5 */
    cs_uint16 dRDIL                :  1 ; /* bits 6:6 */
    cs_uint16 dSTM                 :  1 ; /* bits 7:7 */
    cs_uint16 dSTU                 :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_alarm1_t;

#define FR_RECVOVERHEAD_alarm2                   0x0c705
#define FR_RECVOVERHEAD_alarm2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 REIL                 :  8 ; /* bits 15:8 */
    cs_uint16 B2ErCnt              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B2ErCnt              :  8 ; /* bits 7:0 */
    cs_uint16 REIL                 :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_alarm2_t;

#define FR_RECVOVERHEAD_SectRow2                 0x0c706
#define FR_RECVOVERHEAD_SectRow2_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 E1                   :  8 ; /* bits 15:8 */
    cs_uint16 F1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 F1                   :  8 ; /* bits 7:0 */
    cs_uint16 E1                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_SectRow2_t;

#define FR_RECVOVERHEAD_LineRow5a                0x0c707
#define FR_RECVOVERHEAD_LineRow5a_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_LineRow5a_t;

#define FR_RECVOVERHEAD_LineRow5b                0x0c708
#define FR_RECVOVERHEAD_LineRow5b_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_LineRow5b_t;

#define FR_RECVOVERHEAD_LineRow9                 0x0c709
#define FR_RECVOVERHEAD_LineRow9_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 E2                   :  8 ; /* bits 15:8 */
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
    cs_uint16 E2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_LineRow9_t;

#define FR_RECVOVERHEAD_TestCtrl                 0x0c70a
#define FR_RECVOVERHEAD_TestCtrl_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 Select               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Select               :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RECVOVERHEAD_TestCtrl_t;
#define     Select_SEC_DBG                                0x00
#define     Select_APS_DBG1                               0x01
#define     Select_APS_DBG2                               0x02
#define     Select_Z1S1DBG                                0x03
#define     Select_LIN_ALM_DBG                            0x04
#define     Select_REIP0_DBG                              0x05
#define     Select_PALM0_DBG                              0x06
#define     Select_REIP1_DBG                              0x07
#define     Select_PALM1_DBG                              0x08
#define     Select_REIP2_DBG                              0x09
#define     Select_PALM2_DBG                              0x0a
#define     Select_REIP3_DBG                              0x0b
#define     Select_PALM3_DBG                              0x0c


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::rxHDLC[0..1]
 */

#define FR_RXHDLC_STRIDE                         32
#define FR_RXHDLC_COUNT                          2
#define FR_RXHDLC_Ctrl                           0x0c780
#define FR_RXHDLC_Ctrl_dft                       0x002e
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 Enable               :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 checkFCS             :  1 ; /* bits 5:5 */
    cs_uint16 passFCS              :  1 ; /* bits 4:4 */
    cs_uint16 dataMSBfirst         :  1 ; /* bits 3:3 */
    cs_uint16 CRCMSBfirst          :  1 ; /* bits 2:2 */
    cs_uint16 CRC32                :  1 ; /* bits 1:1 */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
    cs_uint16 CRC32                :  1 ; /* bits 1:1 */
    cs_uint16 CRCMSBfirst          :  1 ; /* bits 2:2 */
    cs_uint16 dataMSBfirst         :  1 ; /* bits 3:3 */
    cs_uint16 passFCS              :  1 ; /* bits 4:4 */
    cs_uint16 checkFCS             :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Enable               :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Ctrl_t;
#define     CRC32_HDLC_CRC16                              0x00
#define     CRC32_HDLC_CRC32                              0x01

#define FR_RXHDLC_Bank0Status                    0x0c781
#define FR_RXHDLC_Bank0Status_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Bank0Status_t;

#define FR_RXHDLC_Bank1Status                    0x0c782
#define FR_RXHDLC_Bank1Status_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Bank1Status_t;

#define FR_RXHDLC_Interrupt                      0x0c783
#define FR_RXHDLC_Interrupt_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 UnalignedDataErrorI  :  1 ; /* bits 8:8 */
    cs_uint16 PacketLengthErrorI   :  1 ; /* bits 7:7 */
    cs_uint16 EndOfPacketErrorI    :  1 ; /* bits 6:6 */
    cs_uint16 CRCErrorCountRolloverI :  1 ; /* bits 5:5 */
    cs_uint16 CRCFailI             :  1 ; /* bits 4:4 */
    cs_uint16 FIFOOverflowI        :  1 ; /* bits 3:3 */
    cs_uint16 FIFOUnderflowI       :  1 ; /* bits 2:2 */
    cs_uint16 FIFODone1I           :  1 ; /* bits 1:1 */
    cs_uint16 FIFODone0I           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FIFODone0I           :  1 ; /* bits 0:0 */
    cs_uint16 FIFODone1I           :  1 ; /* bits 1:1 */
    cs_uint16 FIFOUnderflowI       :  1 ; /* bits 2:2 */
    cs_uint16 FIFOOverflowI        :  1 ; /* bits 3:3 */
    cs_uint16 CRCFailI             :  1 ; /* bits 4:4 */
    cs_uint16 CRCErrorCountRolloverI :  1 ; /* bits 5:5 */
    cs_uint16 EndOfPacketErrorI    :  1 ; /* bits 6:6 */
    cs_uint16 PacketLengthErrorI   :  1 ; /* bits 7:7 */
    cs_uint16 UnalignedDataErrorI  :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Interrupt_t;

#define FR_RXHDLC_Mask                           0x0c784
#define FR_RXHDLC_Mask_dft                       0x01ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 UnalignedDataErrorM  :  1 ; /* bits 8:8 */
    cs_uint16 PacketLengthErrorM   :  1 ; /* bits 7:7 */
    cs_uint16 EndOfPacketErrorM    :  1 ; /* bits 6:6 */
    cs_uint16 CRCErrorCountRolloverM :  1 ; /* bits 5:5 */
    cs_uint16 CRCFailM             :  1 ; /* bits 4:4 */
    cs_uint16 FIFOOverflowM        :  1 ; /* bits 3:3 */
    cs_uint16 FIFOUnderflowM       :  1 ; /* bits 2:2 */
    cs_uint16 FIFODone1M           :  1 ; /* bits 1:1 */
    cs_uint16 FIFODone0M           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FIFODone0M           :  1 ; /* bits 0:0 */
    cs_uint16 FIFODone1M           :  1 ; /* bits 1:1 */
    cs_uint16 FIFOUnderflowM       :  1 ; /* bits 2:2 */
    cs_uint16 FIFOOverflowM        :  1 ; /* bits 3:3 */
    cs_uint16 CRCFailM             :  1 ; /* bits 4:4 */
    cs_uint16 CRCErrorCountRolloverM :  1 ; /* bits 5:5 */
    cs_uint16 EndOfPacketErrorM    :  1 ; /* bits 6:6 */
    cs_uint16 PacketLengthErrorM   :  1 ; /* bits 7:7 */
    cs_uint16 UnalignedDataErrorM  :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Mask_t;

#define FR_RXHDLC_Bank0Read                      0x0c785
#define FR_RXHDLC_Bank0Read_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Bank0Read_t;

#define FR_RXHDLC_Bank1Read                      0x0c786
#define FR_RXHDLC_Bank1Read_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Bank1Read_t;

#define FR_RXHDLC_FIFOTestData                   0x0c787
#define FR_RXHDLC_FIFOTestData_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Word                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Word                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_FIFOTestData_t;

#define FR_RXHDLC_FIFOTestCtrl                   0x0c788
#define FR_RXHDLC_FIFOTestCtrl_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 Ram1Enable           :  1 ; /* bits 9:9 */
    cs_uint16 Ram0Enable           :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 Addr                 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Addr                 :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 Ram0Enable           :  1 ; /* bits 8:8 */
    cs_uint16 Ram1Enable           :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_FIFOTestCtrl_t;

#define FR_RXHDLC_FIFOTestEOPPtr                 0x0c789
#define FR_RXHDLC_FIFOTestEOPPtr_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Set1                 :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 Bank1                :  6 ; /* bits 13:8 */
    cs_uint16 Set0                 :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Bank0                :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Bank0                :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Set0                 :  1 ; /* bits 7:7 */
    cs_uint16 Bank1                :  6 ; /* bits 13:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 Set1                 :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_FIFOTestEOPPtr_t;

#define FR_RXHDLC_Status                         0x0c78b
#define FR_RXHDLC_Status_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CRCErrorCount        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CRCErrorCount        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_Status_t;

#define FR_RXHDLC_TestCtrl                       0x0c78c
#define FR_RXHDLC_TestCtrl_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 Select               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Select               :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_RXHDLC_TestCtrl_t;
#define     Select_SEL_BIT_PROC                           0x00
#define     Select_SEL_STUFF_BYT                          0x01
#define     Select_SEL_FCS0                               0x02
#define     Select_SEL_FCS1                               0x03
#define     Select_SEL_FCS2                               0x04
#define     Select_SEL_FCS3                               0x05
#define     Select_SEL_CRC_STS                            0x06
#define     Select_SEL_FIF0_CTL                           0x07
#define     Select_SEL_FIFO0_STS                          0x08
#define     Select_SEL_FIFO1_STS                          0x09
#define     Select_SEL_RAM0DATA0                          0x0a
#define     Select_SEL_RAM0DATA1                          0x0b
#define     Select_SEL_RAM1DATA0                          0x0c
#define     Select_SEL_RAM1DATA1                          0x0d
#define     Select_SEL_RAM0ADDR                           0x0e
#define     Select_SEL_RAM1ADDR                           0x0f
#define     Select_SEL_PKTSTS                             0x10
#define     Select_SEL_BYT_CNT                            0x11


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::transmit
 */

#define FR_TRANSMIT_PathSPEPointerControl        0x0e000
#define FR_TRANSMIT_PathSPEPointerControl_STRIDE 16
#define FR_TRANSMIT_PathSPEPointerControl_COUNT  4
#define FR_TRANSMIT_PathSPEPointerControl_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 InvBIP               :  1 ; /* bits 15:15 */
    cs_uint16 InvBIPOnce           :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 insPAIS              :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 InsPDIP              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 InsPDIP              :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 insPAIS              :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 InvBIPOnce           :  1 ; /* bits 14:14 */
    cs_uint16 InvBIP               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_PathSPEPointerControl_t;

#define FR_TRANSMIT_PathProvisioning             0x0e001
#define FR_TRANSMIT_PathProvisioning_STRIDE      16
#define FR_TRANSMIT_PathProvisioning_COUNT       4
#define FR_TRANSMIT_PathProvisioning_dft         0x0066
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 QID                  :  2 ; /* bits 9:8 */
    cs_uint16 SVC                  :  3 ; /* bits 7:5 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 STStype              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STStype              :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 SVC                  :  3 ; /* bits 7:5 */
    cs_uint16 QID                  :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_PathProvisioning_t;
#define     QID_TX_SEL_STRM0                              0x00
#define     QID_TX_SEL_STRM1                              0x01
#define     QID_TX_SEL_STRM2                              0x02
#define     QID_TX_SEL_STRM3                              0x03
#define     SVC_TX_SVC_ATM                                0x02
#define     SVC_TX_SVC_HDLC                               0x03
#define     SVC_TX_SVC_GFP                                0x04
#define     SVC_TX_SVC_PRBS                               0x06
#define     SVC_TX_SVC_UNEQP                              0x07
#define     STStype_TX_STSTYP_12                          0x02
#define     STStype_TX_STSTYP_48                          0x04
#define     STStype_TX_STSTYP_192                         0x06
#define     STStype_TX_STSTYP_UNEQP                       0x07

#define FR_TRANSMIT_PathSPEForceControl          0x0e002
#define FR_TRANSMIT_PathSPEForceControl_STRIDE   16
#define FR_TRANSMIT_PathSPEForceControl_COUNT    4
#define FR_TRANSMIT_PathSPEForceControl_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ForceDNF             :  1 ; /* bits 15:15 */
    cs_uint16 ForcePPJOnce         :  1 ; /* bits 14:14 */
    cs_uint16 ForceNPJOnce         :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 PtrJusDly            :  1 ; /* bits 2:2 */
    cs_uint16 InsNPJE              :  1 ; /* bits 1:1 */
    cs_uint16 InsPPJE              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 InsPPJE              :  1 ; /* bits 0:0 */
    cs_uint16 InsNPJE              :  1 ; /* bits 1:1 */
    cs_uint16 PtrJusDly            :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 ForceNPJOnce         :  1 ; /* bits 13:13 */
    cs_uint16 ForcePPJOnce         :  1 ; /* bits 14:14 */
    cs_uint16 ForceDNF             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_PathSPEForceControl_t;

#define FR_TRANSMIT_PathNewPointer               0x0e003
#define FR_TRANSMIT_PathNewPointer_STRIDE        16
#define FR_TRANSMIT_PathNewPointer_COUNT         4
#define FR_TRANSMIT_PathNewPointer_dft           0x6000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NDF                  :  4 ; /* bits 15:12 */
    cs_uint16 SS                   :  2 ; /* bits 11:10 */
    cs_uint16 Ptr                  : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Ptr                  : 10 ; /* bits 9:0 */
    cs_uint16 SS                   :  2 ; /* bits 11:10 */
    cs_uint16 NDF                  :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_PathNewPointer_t;

#define FR_TRANSMIT_PathConcat                   0x0e004
#define FR_TRANSMIT_PathConcat_STRIDE            16
#define FR_TRANSMIT_PathConcat_COUNT             4
#define FR_TRANSMIT_PathConcat_dft               0x93ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 H1                   :  8 ; /* bits 15:8 */
    cs_uint16 H2                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 H2                   :  8 ; /* bits 7:0 */
    cs_uint16 H1                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_PathConcat_t;

#define FR_TRANSMIT_Configuration                0x0e300
#define FR_TRANSMIT_Configuration_dft            0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd2               :  7 ;
    cs_uint16 ShortFrame           :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 EvenParity           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EvenParity           :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 ShortFrame           :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd2               :  7 ;
    cs_uint16 Reset                :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_Configuration_t;

#define FR_TRANSMIT_SectionControl               0x0e301
#define FR_TRANSMIT_SectionControl_dft           0x4000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ExtFrSync            :  1 ; /* bits 15:15 */
    cs_uint16 IgnFrSync            :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd2               :  4 ;
    cs_uint16 InsPrbsErr           :  1 ; /* bits 9:9 */
    cs_uint16 Ins1010              :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 B2BIPErr             :  1 ; /* bits 5:5 */
    cs_uint16 B1BIPErr             :  1 ; /* bits 4:4 */
    cs_uint16 FrmErr               :  1 ; /* bits 3:3 */
    cs_uint16 InsLOS               :  1 ; /* bits 2:2 */
    cs_uint16 InsOnes              :  1 ; /* bits 1:1 */
    cs_uint16 DisScr               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DisScr               :  1 ; /* bits 0:0 */
    cs_uint16 InsOnes              :  1 ; /* bits 1:1 */
    cs_uint16 InsLOS               :  1 ; /* bits 2:2 */
    cs_uint16 FrmErr               :  1 ; /* bits 3:3 */
    cs_uint16 B1BIPErr             :  1 ; /* bits 4:4 */
    cs_uint16 B2BIPErr             :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 Ins1010              :  1 ; /* bits 8:8 */
    cs_uint16 InsPrbsErr           :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd2               :  4 ;
    cs_uint16 IgnFrSync            :  1 ; /* bits 14:14 */
    cs_uint16 ExtFrSync            :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_SectionControl_t;

#define FR_TRANSMIT_FrameDelayCnt                0x0e302
#define FR_TRANSMIT_FrameDelayCnt_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FrameDelay           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FrameDelay           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_FrameDelayCnt_t;

#define FR_TRANSMIT_Stuff                        0x0e303
#define FR_TRANSMIT_Stuff_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 Stf                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Stf                  :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_Stuff_t;

#define FR_TRANSMIT_Regen                        0x0e304
#define FR_TRANSMIT_Regen_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 regenOn              :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 J0Rel                :  1 ; /* bits 3:3 */
    cs_uint16 E1Rel                :  1 ; /* bits 2:2 */
    cs_uint16 F1Rel                :  1 ; /* bits 1:1 */
    cs_uint16 DCCRel               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DCCRel               :  1 ; /* bits 0:0 */
    cs_uint16 F1Rel                :  1 ; /* bits 1:1 */
    cs_uint16 E1Rel                :  1 ; /* bits 2:2 */
    cs_uint16 J0Rel                :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 regenOn              :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_Regen_t;

#define FR_TRANSMIT_TxInterrupt                  0x0e305
#define FR_TRANSMIT_TxInterrupt_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 hdlcTxLDCCInterrupt  :  1 ; /* bits 15:15 */
    cs_uint16 hdlcTxSDCCInterrupt  :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               : 14 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 hdlcTxSDCCInterrupt  :  1 ; /* bits 14:14 */
    cs_uint16 hdlcTxLDCCInterrupt  :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_TxInterrupt_t;

#define FR_TRANSMIT_TxMask                       0x0e306
#define FR_TRANSMIT_TxMask_dft                   0xc000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 hdlcTxLDCCMask       :  1 ; /* bits 15:15 */
    cs_uint16 hdlcTxSDCCMask       :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               : 14 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 hdlcTxSDCCMask       :  1 ; /* bits 14:14 */
    cs_uint16 hdlcTxLDCCMask       :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_TxMask_t;

#define FR_TRANSMIT_Debug                        0x0e307
#define FR_TRANSMIT_Debug_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Addr                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Addr                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_Debug_t;

#define FR_TRANSMIT_sectionDiagnostics           0x0e308
#define FR_TRANSMIT_sectionDiagnostics_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 InsB1ErrOnce         :  1 ; /* bits 15:15 */
    cs_uint16 InsB2ErrOnce         :  1 ; /* bits 14:14 */
    cs_uint16 InsPrbsOnce          :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               : 13 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 InsPrbsOnce          :  1 ; /* bits 13:13 */
    cs_uint16 InsB2ErrOnce         :  1 ; /* bits 14:14 */
    cs_uint16 InsB1ErrOnce         :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TRANSMIT_sectionDiagnostics_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::xmitOverhead
 */

#define FR_XMITOVERHEAD_PathC2Z5                 0x0e400
#define FR_XMITOVERHEAD_PathC2Z5_STRIDE          16
#define FR_XMITOVERHEAD_PathC2Z5_COUNT           4
#define FR_XMITOVERHEAD_PathC2Z5_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Z5                   :  8 ; /* bits 15:8 */
    cs_uint16 C2                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 C2                   :  8 ; /* bits 7:0 */
    cs_uint16 Z5                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_PathC2Z5_t;

#define FR_XMITOVERHEAD_PathUserInd              0x0e401
#define FR_XMITOVERHEAD_PathUserInd_STRIDE       16
#define FR_XMITOVERHEAD_PathUserInd_COUNT        4
#define FR_XMITOVERHEAD_PathUserInd_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 F2                   :  8 ; /* bits 15:8 */
    cs_uint16 H4                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 H4                   :  8 ; /* bits 7:0 */
    cs_uint16 F2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_PathUserInd_t;

#define FR_XMITOVERHEAD_PathGrowth               0x0e402
#define FR_XMITOVERHEAD_PathGrowth_STRIDE        16
#define FR_XMITOVERHEAD_PathGrowth_COUNT         4
#define FR_XMITOVERHEAD_PathGrowth_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Z3                   :  8 ; /* bits 15:8 */
    cs_uint16 Z4                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z4                   :  8 ; /* bits 7:0 */
    cs_uint16 Z3                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_PathGrowth_t;

#define FR_XMITOVERHEAD_PathAlarmDefectCtrl      0x0e403
#define FR_XMITOVERHEAD_PathAlarmDefectCtrl_STRIDE 16
#define FR_XMITOVERHEAD_PathAlarmDefectCtrl_COUNT 4
#define FR_XMITOVERHEAD_PathAlarmDefectCtrl_dft  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EnhRDI               :  1 ; /* bits 15:15 */
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 PTU2RDI              :  1 ; /* bits 6:6 */
    cs_uint16 PTM2RDI              :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 PSLU2RDI             :  1 ; /* bits 3:3 */
    cs_uint16 PSLM2RDI             :  1 ; /* bits 2:2 */
    cs_uint16 PAIS2RDI             :  1 ; /* bits 1:1 */
    cs_uint16 UNEQP2RDI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 UNEQP2RDI            :  1 ; /* bits 0:0 */
    cs_uint16 PAIS2RDI             :  1 ; /* bits 1:1 */
    cs_uint16 PSLM2RDI             :  1 ; /* bits 2:2 */
    cs_uint16 PSLU2RDI             :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 PTM2RDI              :  1 ; /* bits 5:5 */
    cs_uint16 PTU2RDI              :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 EnhRDI               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_PathAlarmDefectCtrl_t;

#define FR_XMITOVERHEAD_alarm3Path               0x0e404
#define FR_XMITOVERHEAD_alarm3Path_STRIDE        16
#define FR_XMITOVERHEAD_alarm3Path_COUNT         4
#define FR_XMITOVERHEAD_alarm3Path_dft           0x2000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
    cs_uint16 rsrvd1               : 13 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_alarm3Path_t;

#define FR_XMITOVERHEAD_alarm4Path               0x0e405
#define FR_XMITOVERHEAD_alarm4Path_STRIDE        16
#define FR_XMITOVERHEAD_alarm4Path_COUNT         4
#define FR_XMITOVERHEAD_alarm4Path_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_alarm4Path_t;

#define FR_XMITOVERHEAD_MonitorAlarm3Path        0x0e406
#define FR_XMITOVERHEAD_MonitorAlarm3Path_STRIDE 16
#define FR_XMITOVERHEAD_MonitorAlarm3Path_COUNT  4
#define FR_XMITOVERHEAD_MonitorAlarm3Path_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 dLOPConcat           :  1 ; /* bits 8:8 */
    cs_uint16 dPSLUI               :  1 ; /* bits 7:7 */
    cs_uint16 dPSLM                :  1 ; /* bits 6:6 */
    cs_uint16 dPTU                 :  1 ; /* bits 5:5 */
    cs_uint16 dPTM                 :  1 ; /* bits 4:4 */
    cs_uint16 dUNEQP               :  1 ; /* bits 3:3 */
    cs_uint16 dRDIP                :  1 ; /* bits 2:2 */
    cs_uint16 dPAIS                :  1 ; /* bits 1:1 */
    cs_uint16 dLOP                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 dLOP                 :  1 ; /* bits 0:0 */
    cs_uint16 dPAIS                :  1 ; /* bits 1:1 */
    cs_uint16 dRDIP                :  1 ; /* bits 2:2 */
    cs_uint16 dUNEQP               :  1 ; /* bits 3:3 */
    cs_uint16 dPTM                 :  1 ; /* bits 4:4 */
    cs_uint16 dPTU                 :  1 ; /* bits 5:5 */
    cs_uint16 dPSLM                :  1 ; /* bits 6:6 */
    cs_uint16 dPSLUI               :  1 ; /* bits 7:7 */
    cs_uint16 dLOPConcat           :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 insRDIP              :  3 ; /* bits 15:13 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_MonitorAlarm3Path_t;

#define FR_XMITOVERHEAD_MonitorAlarm4Path        0x0e407
#define FR_XMITOVERHEAD_MonitorAlarm4Path_STRIDE 16
#define FR_XMITOVERHEAD_MonitorAlarm4Path_COUNT  4
#define FR_XMITOVERHEAD_MonitorAlarm4Path_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 REIP                 :  4 ; /* bits 7:4 */
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B3ErCnt              :  4 ; /* bits 3:0 */
    cs_uint16 REIP                 :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_MonitorAlarm4Path_t;

#define FR_XMITOVERHEAD_Ctrl                     0x0e700
#define FR_XMITOVERHEAD_Ctrl_dft                 0x0604
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  5 ;
    cs_uint16 TOHBitOrder          :  1 ; /* bits 10:10 */
    cs_uint16 DCCBitOrder          :  1 ; /* bits 9:9 */
    cs_uint16 APSenable            :  1 ; /* bits 8:8 */
    cs_uint16 APSUpOverRide        :  1 ; /* bits 7:7 */
    cs_uint16 SDHMode              :  1 ; /* bits 6:6 */
    cs_uint16 Fixed_Z0             :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DCCclkPolarity       :  1 ; /* bits 3:3 */
    cs_uint16 DCCmode              :  2 ; /* bits 2:1 */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
    cs_uint16 DCCmode              :  2 ; /* bits 2:1 */
    cs_uint16 DCCclkPolarity       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 Fixed_Z0             :  1 ; /* bits 5:5 */
    cs_uint16 SDHMode              :  1 ; /* bits 6:6 */
    cs_uint16 APSUpOverRide        :  1 ; /* bits 7:7 */
    cs_uint16 APSenable            :  1 ; /* bits 8:8 */
    cs_uint16 DCCBitOrder          :  1 ; /* bits 9:9 */
    cs_uint16 TOHBitOrder          :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd2               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_Ctrl_t;

#define FR_XMITOVERHEAD_ByteCtrl1                0x0e701
#define FR_XMITOVERHEAD_ByteCtrl1_dft            0xc000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 J0Src                :  2 ; /* bits 15:14 */
    cs_uint16 lineDCCSrc           :  2 ; /* bits 13:12 */
    cs_uint16 SecDCCSrc            :  2 ; /* bits 11:10 */
    cs_uint16 S1Src                :  2 ; /* bits 9:8 */
    cs_uint16 K3K4Src              :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 K1K2Src              :  2 ; /* bits 5:4 */
    cs_uint16 K2RDISrc             :  2 ; /* bits 3:2 */
    cs_uint16 F1Src                :  1 ; /* bits 1:1 */
    cs_uint16 E1Src                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E1Src                :  1 ; /* bits 0:0 */
    cs_uint16 F1Src                :  1 ; /* bits 1:1 */
    cs_uint16 K2RDISrc             :  2 ; /* bits 3:2 */
    cs_uint16 K1K2Src              :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 K3K4Src              :  1 ; /* bits 7:7 */
    cs_uint16 S1Src                :  2 ; /* bits 9:8 */
    cs_uint16 SecDCCSrc            :  2 ; /* bits 11:10 */
    cs_uint16 lineDCCSrc           :  2 ; /* bits 13:12 */
    cs_uint16 J0Src                :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_ByteCtrl1_t;
#define     J0Src_JOSRC_TRBUF                             0x00
#define     J0Src_J0SRC_TOH                               0x01
#define     J0Src_J0SRC_DEF                               0x02
#define     lineDCCSrc_LDCCSRC_UP                         0x00
#define     lineDCCSrc_LDCCSRC_DCCP                       0x01
#define     lineDCCSrc_LDCCSRC_TOHP                       0x02
#define     lineDCCSrc_LDCCSRC_HDLC                       0x03
#define     SecDCCSrc_SDCCSRC_UP                          0x00
#define     SecDCCSrc_SDCCSRC_DCCP                        0x01
#define     SecDCCSrc_SDCCSRC_TOHP                        0x02
#define     SecDCCSrc_SDCCSRC_HDLC                        0x03
#define     S1Src_S1SRC_UP                                0x00
#define     S1Src_S1SRC_TOHP                              0x02
#define     S1Src_S1SRC_APS                               0x03
#define     K1K2Src_K1K2SRC_UP                            0x00
#define     K1K2Src_K1K2SRC_TOHP                          0x02
#define     K1K2Src_K1K2SRC_APS                           0x03
#define     K2RDISrc_RDILSRC_RX                           0x00
#define     K2RDISrc_RDILSRC_UP                           0x02
#define     K2RDISrc_RDILSRC_APS                          0x03

#define FR_XMITOVERHEAD_ByteCtrl2                0x0e702
#define FR_XMITOVERHEAD_ByteCtrl2_dft            0x0502
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 J1Src                :  1 ; /* bits 12:12 */
    cs_uint16 REIPSrc              :  2 ; /* bits 11:10 */
    cs_uint16 RDIPSrc              :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 E2Src                :  1 ; /* bits 3:3 */
    cs_uint16 M1Src                :  2 ; /* bits 2:1 */
    cs_uint16 Z2Src                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z2Src                :  1 ; /* bits 0:0 */
    cs_uint16 M1Src                :  2 ; /* bits 2:1 */
    cs_uint16 E2Src                :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 RDIPSrc              :  2 ; /* bits 9:8 */
    cs_uint16 REIPSrc              :  2 ; /* bits 11:10 */
    cs_uint16 J1Src                :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_ByteCtrl2_t;
#define     REIPSrc_REIPSRC_APS                           0x00
#define     REIPSrc_REIPSRC_RX                            0x01
#define     REIPSrc_REIPSRC_UP                            0x02
#define     RDIPSrc_RDIPSRC_APS                           0x00
#define     RDIPSrc_RDIPSRC_RX                            0x01
#define     RDIPSrc_RDIPSRC_UP                            0x02
#define     E2Src_E2SRC_UP                                0x00
#define     E2Src_E2SRC_TOH                               0x01
#define     M1Src_M1SRC_APS                               0x00
#define     M1Src_M1SRC_RX                                0x01
#define     M1Src_M1SRC_UP                                0x02
#define     Z2Src_Z2SRC_UP                                0x00
#define     Z2Src_Z2SRC_TOH                               0x01

#define FR_XMITOVERHEAD_OrderWire                0x0e703
#define FR_XMITOVERHEAD_OrderWire_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 E2                   :  8 ; /* bits 15:8 */
    cs_uint16 E1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E1                   :  8 ; /* bits 7:0 */
    cs_uint16 E2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_OrderWire_t;

#define FR_XMITOVERHEAD_UserChannel              0x0e704
#define FR_XMITOVERHEAD_UserChannel_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 F1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 F1                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_UserChannel_t;

#define FR_XMITOVERHEAD_DCC                      0x0e705
#define FR_XMITOVERHEAD_DCC_dft                  0x7e7e
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Sect                 :  8 ; /* bits 15:8 */
    cs_uint16 Line                 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Line                 :  8 ; /* bits 7:0 */
    cs_uint16 Sect                 :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_DCC_t;

#define FR_XMITOVERHEAD_Default                  0x0e706
#define FR_XMITOVERHEAD_Default_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 Byte                 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Byte                 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_Default_t;

#define FR_XMITOVERHEAD_Growth                   0x0e707
#define FR_XMITOVERHEAD_Growth_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 Z2                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z2                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_Growth_t;

#define FR_XMITOVERHEAD_LineAlarmDefectCtrl      0x0e708
#define FR_XMITOVERHEAD_LineAlarmDefectCtrl_dft  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 AISLSrc              :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 STM2RDIL             :  1 ; /* bits 11:11 */
    cs_uint16 STU2RDIL             :  1 ; /* bits 10:10 */
    cs_uint16 BERSF2RDIL           :  1 ; /* bits 9:9 */
    cs_uint16 SD2RDIL              :  1 ; /* bits 8:8 */
    cs_uint16 APSMode              :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd1               :  6 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 APSMode              :  2 ; /* bits 7:6 */
    cs_uint16 SD2RDIL              :  1 ; /* bits 8:8 */
    cs_uint16 BERSF2RDIL           :  1 ; /* bits 9:9 */
    cs_uint16 STU2RDIL             :  1 ; /* bits 10:10 */
    cs_uint16 STM2RDIL             :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 AISLSrc              :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd3               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_LineAlarmDefectCtrl_t;
#define     APSMode_APS_BYTES                             0x00
#define     APSMode_ALRM_BITS                             0x01
#define     APSMode_APS_ALRM                              0x02

#define FR_XMITOVERHEAD_APS1                     0x0e709
#define FR_XMITOVERHEAD_APS1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_APS1_t;

#define FR_XMITOVERHEAD_APS2                     0x0e70a
#define FR_XMITOVERHEAD_APS2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_APS2_t;

#define FR_XMITOVERHEAD_SyncStatus               0x0e70b
#define FR_XMITOVERHEAD_SyncStatus_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_SyncStatus_t;

#define FR_XMITOVERHEAD_alarm1                   0x0e70c
#define FR_XMITOVERHEAD_alarm1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               : 14 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_alarm1_t;

#define FR_XMITOVERHEAD_alarm2                   0x0e70d
#define FR_XMITOVERHEAD_alarm2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 B2ErCnt              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B2ErCnt              :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_alarm2_t;

#define FR_XMITOVERHEAD_MonitorAPS1              0x0e70e
#define FR_XMITOVERHEAD_MonitorAPS1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K1                   :  8 ; /* bits 7:0 */
    cs_uint16 K2                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_MonitorAPS1_t;

#define FR_XMITOVERHEAD_MonitorAPS2              0x0e70f
#define FR_XMITOVERHEAD_MonitorAPS2_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 K3                   :  8 ; /* bits 7:0 */
    cs_uint16 K4                   :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_MonitorAPS2_t;

#define FR_XMITOVERHEAD_MonitorSyncStatus        0x0e710
#define FR_XMITOVERHEAD_MonitorSyncStatus_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 S1                   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_MonitorSyncStatus_t;

#define FR_XMITOVERHEAD_MonitorAlarm1            0x0e711
#define FR_XMITOVERHEAD_MonitorAlarm1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 dSTU                 :  1 ; /* bits 8:8 */
    cs_uint16 dSTM                 :  1 ; /* bits 7:7 */
    cs_uint16 dRDIL                :  1 ; /* bits 6:6 */
    cs_uint16 dSD                  :  1 ; /* bits 5:5 */
    cs_uint16 dAISL                :  1 ; /* bits 4:4 */
    cs_uint16 dSF                  :  1 ; /* bits 3:3 */
    cs_uint16 dLOF                 :  1 ; /* bits 2:2 */
    cs_uint16 dSEF                 :  1 ; /* bits 1:1 */
    cs_uint16 dLOS                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 dLOS                 :  1 ; /* bits 0:0 */
    cs_uint16 dSEF                 :  1 ; /* bits 1:1 */
    cs_uint16 dLOF                 :  1 ; /* bits 2:2 */
    cs_uint16 dSF                  :  1 ; /* bits 3:3 */
    cs_uint16 dAISL                :  1 ; /* bits 4:4 */
    cs_uint16 dSD                  :  1 ; /* bits 5:5 */
    cs_uint16 dRDIL                :  1 ; /* bits 6:6 */
    cs_uint16 dSTM                 :  1 ; /* bits 7:7 */
    cs_uint16 dSTU                 :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 insRDIL              :  1 ; /* bits 14:14 */
    cs_uint16 insAISL              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_MonitorAlarm1_t;

#define FR_XMITOVERHEAD_MonitorAlarm2            0x0e712
#define FR_XMITOVERHEAD_MonitorAlarm2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 REIL                 :  8 ; /* bits 15:8 */
    cs_uint16 B2ErCnt              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 B2ErCnt              :  8 ; /* bits 7:0 */
    cs_uint16 REIL                 :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_MonitorAlarm2_t;

#define FR_XMITOVERHEAD_Z0_byte                  0x0e713
#define FR_XMITOVERHEAD_Z0_byte_dft              0x00cc
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 Z0_Byte_Value        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Z0_Byte_Value        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_Z0_byte_t;

#define FR_XMITOVERHEAD_TestCtrl                 0x0e714
#define FR_XMITOVERHEAD_TestCtrl_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 Select               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Select               :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_TestCtrl_t;
#define     Select_SECDCC_DBG                             0x00
#define     Select_LinDCC_DBG                             0x01
#define     Select_G1Pth0_DBG                             0x02
#define     Select_G1Pth1_DBG                             0x03
#define     Select_G1Pth2_DBG                             0x04
#define     Select_G1Pth3_DBG                             0x05
#define     Select_OH4_DBG                                0x06
#define     Select_OH3_DBG                                0x07
#define     Select_OH2_DBG                                0x08
#define     Select_OH1_DBG                                0x09
#define     Select_LINE_DBG                               0x0a
#define     Select_M1_DBG                                 0x0b

#define FR_XMITOVERHEAD_PathBuffer               0x0e728
#define FR_XMITOVERHEAD_PathBuffer_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  9 ;
    cs_uint16 Select               :  2 ; /* bits 6:5 */
    cs_uint16 rsrvd1               :  5 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 Select               :  2 ; /* bits 6:5 */
    cs_uint16 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_PathBuffer_t;

#define FR_XMITOVERHEAD_SectionTrace             0x0e740
#define FR_XMITOVERHEAD_SectionTrace_STRIDE      1
#define FR_XMITOVERHEAD_SectionTrace_COUNT       32
#define FR_XMITOVERHEAD_SectionTrace_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HighByte             :  8 ; /* bits 15:8 */
    cs_uint16 LowByte              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LowByte              :  8 ; /* bits 7:0 */
    cs_uint16 HighByte             :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_SectionTrace_t;

#define FR_XMITOVERHEAD_PathTrace                0x0e760
#define FR_XMITOVERHEAD_PathTrace_STRIDE         1
#define FR_XMITOVERHEAD_PathTrace_COUNT          32
#define FR_XMITOVERHEAD_PathTrace_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HighByte             :  8 ; /* bits 15:8 */
    cs_uint16 LowByte              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LowByte              :  8 ; /* bits 7:0 */
    cs_uint16 HighByte             :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_XMITOVERHEAD_PathTrace_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * Framer::txHDLC[0..1]
 */

#define FR_TXHDLC_STRIDE                         32
#define FR_TXHDLC_COUNT                          2
#define FR_TXHDLC_Ctrl                           0x0e780
#define FR_TXHDLC_Ctrl_dft                       0x000e
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 FillFlags            :  1 ; /* bits 5:5 */
    cs_uint16 passFCS              :  1 ; /* bits 4:4 */
    cs_uint16 dataMSBfirst         :  1 ; /* bits 3:3 */
    cs_uint16 CRCMSBfirst          :  1 ; /* bits 2:2 */
    cs_uint16 CRC32                :  1 ; /* bits 1:1 */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 reset                :  1 ; /* bits 0:0 */
    cs_uint16 CRC32                :  1 ; /* bits 1:1 */
    cs_uint16 CRCMSBfirst          :  1 ; /* bits 2:2 */
    cs_uint16 dataMSBfirst         :  1 ; /* bits 3:3 */
    cs_uint16 passFCS              :  1 ; /* bits 4:4 */
    cs_uint16 FillFlags            :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_Ctrl_t;

#define FR_TXHDLC_Bank0Status                    0x0e781
#define FR_TXHDLC_Bank0Status_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_Bank0Status_t;

#define FR_TXHDLC_Bank1Status                    0x0e782
#define FR_TXHDLC_Bank1Status_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EOPPtr               :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 PktVld               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 MOP                  :  1 ; /* bits 12:12 */
    cs_uint16 EOPErr               :  1 ; /* bits 13:13 */
    cs_uint16 EOP                  :  1 ; /* bits 14:14 */
    cs_uint16 SOP                  :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_Bank1Status_t;

#define FR_TXHDLC_Interrupt                      0x0e783
#define FR_TXHDLC_Interrupt_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 FIFOOverflowI        :  1 ; /* bits 3:3 */
    cs_uint16 FIFOUnderflowI       :  1 ; /* bits 2:2 */
    cs_uint16 FIFODone1I           :  1 ; /* bits 1:1 */
    cs_uint16 FIFODone0I           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FIFODone0I           :  1 ; /* bits 0:0 */
    cs_uint16 FIFODone1I           :  1 ; /* bits 1:1 */
    cs_uint16 FIFOUnderflowI       :  1 ; /* bits 2:2 */
    cs_uint16 FIFOOverflowI        :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_Interrupt_t;

#define FR_TXHDLC_Mask                           0x0e784
#define FR_TXHDLC_Mask_dft                       0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 FIFOOverflowM        :  1 ; /* bits 3:3 */
    cs_uint16 FIFOUnderflowM       :  1 ; /* bits 2:2 */
    cs_uint16 FIFODone1M           :  1 ; /* bits 1:1 */
    cs_uint16 FIFODone0M           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FIFODone0M           :  1 ; /* bits 0:0 */
    cs_uint16 FIFODone1M           :  1 ; /* bits 1:1 */
    cs_uint16 FIFOUnderflowM       :  1 ; /* bits 2:2 */
    cs_uint16 FIFOOverflowM        :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_Mask_t;

#define FR_TXHDLC_Bank0Write                     0x0e785
#define FR_TXHDLC_Bank0Write_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_Bank0Write_t;

#define FR_TXHDLC_Bank1Write                     0x0e786
#define FR_TXHDLC_Bank1Write_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Data                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_Bank1Write_t;

#define FR_TXHDLC_FIFOTestData                   0x0e787
#define FR_TXHDLC_FIFOTestData_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 Word                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Word                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_FIFOTestData_t;

#define FR_TXHDLC_FIFOTestCtrl                   0x0e788
#define FR_TXHDLC_FIFOTestCtrl_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 Ram1Enable           :  1 ; /* bits 9:9 */
    cs_uint16 Ram0Enable           :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 ReadAddr             :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ReadAddr             :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 Ram0Enable           :  1 ; /* bits 8:8 */
    cs_uint16 Ram1Enable           :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_FIFOTestCtrl_t;

#define FR_TXHDLC_TestCtrl                       0x0e789
#define FR_TXHDLC_TestCtrl_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 Select               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 Select               :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} FR_TXHDLC_TestCtrl_t;
#define     Select_SEL_STS0                               0x00
#define     Select_SEL_STS1                               0x01
#define     Select_SEL_RDDATA0                            0x02
#define     Select_SEL_RDDATA1                            0x03
#define     Select_SEL_RDDATA2                            0x04
#define     Select_SEL_RDDATA3                            0x05
#define     Select_SEL_BIT_STS                            0x06


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* Framer */

typedef struct {
  FR_GLOBAL_JTAGIdLsb_t                    JTAGIdLsb;                     /* addr: 0x0000 */
  FR_GLOBAL_JTAGIdMsb_t                    JTAGIdMsb;                     /* addr: 0x0001 */
  cs_uint16                                rsrvd1[2];
  FR_GLOBAL_MasterReset_t                  MasterReset;                   /* addr: 0x0004 */
  cs_uint16                                rsrvd2[11];
  FR_GLOBAL_MasterInt_t                    MasterInt;                     /* addr: 0x0010 */
  cs_uint16                                rsrvd3[3];
  FR_GLOBAL_MasterMask_t                   MasterMask;                    /* addr: 0x0014 */
  FR_GLOBAL_MasterInt2_t                   MasterInt2;                    /* addr: 0x0015 */
  FR_GLOBAL_MasterMask2_t                  MasterMask2;                   /* addr: 0x0016 */
  cs_uint16                                rsrvd4[9];
  FR_GLOBAL_ClockStatus_t                  ClockStatus;                   /* addr: 0x0020 */
  FR_GLOBAL_ClockInt_t                     ClockInt;                      /* addr: 0x0021 */
  FR_GLOBAL_ClockMask_t                    ClockMask;                     /* addr: 0x0022 */
  cs_uint16                                rsrvd5[5];
  FR_GLOBAL_CellRxInt_t                    CellRxInt;                     /* addr: 0x0028 */
  FR_GLOBAL_CellRxMask_t                   CellRxMask;                    /* addr: 0x0029 */
  FR_GLOBAL_PacketRxInt_t                  PacketRxInt;                   /* addr: 0x002a */
  FR_GLOBAL_PacketRxMask_t                 PacketRxMask;                  /* addr: 0x002b */
  FR_GLOBAL_CellTxInt_t                    CellTxInt;                     /* addr: 0x002c */
  FR_GLOBAL_CellTxMask_t                   CellTxMask;                    /* addr: 0x002d */
  FR_GLOBAL_PacketTxInt_t                  PacketTxInt;                   /* addr: 0x002e */
  FR_GLOBAL_PacketTxMask_t                 PacketTxMask;                  /* addr: 0x002f */
  FR_GLOBAL_GPIOControl_t                  GPIOControl;                   /* addr: 0x0030 */
  FR_GLOBAL_GPIOValue_t                    GPIOValue;                     /* addr: 0x0031 */
  FR_GLOBAL_GPIOInt_t                      GPIOInt;                       /* addr: 0x0032 */
  FR_GLOBAL_GPIOMask_t                     GPIOMask;                      /* addr: 0x0033 */
  FR_GLOBAL_LoopBack_t                     LoopBack;                      /* addr: 0x0034 */
  FR_GLOBAL_DebugPort_t                    DebugPort;                     /* addr: 0x0035 */
  FR_GLOBAL_Rx_Carrier_Msk_t               Rx_Carrier_Msk;                /* addr: 0x0036 */
  cs_uint16                                rsrvd6;
  FR_GLOBAL_LineSkewControl_t              LineSkewControl;               /* addr: 0x0038 */
  FR_GLOBAL_DatacomSkewControl_t           DatacomSkewControl;            /* addr: 0x0039 */
  cs_uint16                                rsrvd7[454];
  FR_DATACOMRX_Control_t                   datacomRx_Control;             /* addr: 0x0200 */
  FR_DATACOMRX_Interrupt_t                 datacomRx_Interrupt;           /* addr: 0x0201 */
  FR_DATACOMRX_Mask_t                      datacomRx_Mask;                /* addr: 0x0202 */
  cs_uint16                                rsrvd8[61];
  FR_DATACOMRX_StrConfig_t                 datacomRx_StrConfig;           /* addr: 0x0240 */
  FR_DATACOMRX_StrInt_t                    datacomRx_StrInt;              /* addr: 0x0241 */
  FR_DATACOMRX_StrMask_t                   datacomRx_StrMask;             /* addr: 0x0242 */
  FR_DATACOMRX_StrStatus_t                 datacomRx_StrStatus;           /* addr: 0x0243 */
  cs_uint16                                rsrvd9[1468];
  FR_STREAMRX_CellControl_t                streamRx_CellControl;          /* addr: 0x0800 */
  FR_STREAMRX_CellPattern_t                streamRx_CellPattern;          /* addr: 0x0801 */
  FR_STREAMRX_CellIntr_t                   streamRx_CellIntr;             /* addr: 0x0802 */
  FR_STREAMRX_CellMask_t                   CellMask;                      /* addr: 0x0803 */
  FR_STREAMRX_CellSts_t                    CellSts;                       /* addr: 0x0804 */
  FR_STREAMRX_Cellfsm_t                    Cellfsm;                       /* addr: 0x0805 */
  cs_uint16                                rsrvd10[16];
  FR_STREAMRX_PktControl_t                 streamRx_PktControl;           /* addr: 0x0816 */
  FR_STREAMRX_MaxLengthMSB_t               MaxLengthMSB;                  /* addr: 0x0817 */
  FR_STREAMRX_MaxLengthLSB_t               MaxLengthLSB;                  /* addr: 0x0818 */
  FR_STREAMRX_MinLength_t                  MinLength;                     /* addr: 0x0819 */
  FR_STREAMRX_PktFillControl_t             PktFillControl;                /* addr: 0x081a */
  FR_STREAMRX_PktIntr_t                    PktIntr;                       /* addr: 0x081b */
  FR_STREAMRX_PktStatus_t                  PktStatus;                     /* addr: 0x081c */
  FR_STREAMRX_PktMask_t                    streamRx_PktMask;              /* addr: 0x081d */
  cs_uint16                                rsrvd11[2];
  FR_STREAMRX_Cnt1Q1_t                     streamRx_Cnt1Q1;               /* addr: 0x0820 */
  FR_STREAMRX_Cnt1Q2_t                     streamRx_Cnt1Q2;               /* addr: 0x0821 */
  FR_STREAMRX_Cnt1Q3_t                     streamRx_Cnt1Q3;               /* addr: 0x0822 */
  cs_uint16                                rsrvd12;
  FR_STREAMRX_Cnt2Q1_t                     streamRx_Cnt2Q1;               /* addr: 0x0824 */
  FR_STREAMRX_Cnt2Q2_t                     streamRx_Cnt2Q2;               /* addr: 0x0825 */
  FR_STREAMRX_Cnt2Q3_t                     streamRx_Cnt2Q3;               /* addr: 0x0826 */
  cs_uint16                                rsrvd13;
  FR_STREAMRX_Cnt3Q1_t                     streamRx_Cnt3Q1;               /* addr: 0x0828 */
  FR_STREAMRX_Cnt3Q2_t                     streamRx_Cnt3Q2;               /* addr: 0x0829 */
  FR_STREAMRX_Cnt3Q3_t                     streamRx_Cnt3Q3;               /* addr: 0x082a */
  cs_uint16                                rsrvd14;
  FR_STREAMRX_Cnt4Q1_t                     streamRx_Cnt4Q1;               /* addr: 0x082c */
  FR_STREAMRX_Cnt4Q2_t                     streamRx_Cnt4Q2;               /* addr: 0x082d */
  FR_STREAMRX_Cnt4Q3_t                     streamRx_Cnt4Q3;               /* addr: 0x082e */
  cs_uint16                                rsrvd15;
  FR_STREAMRX_Cnt5Q1_t                     streamRx_Cnt5Q1;               /* addr: 0x0830 */
  FR_STREAMRX_Cnt5Q2_t                     streamRx_Cnt5Q2;               /* addr: 0x0831 */
  FR_STREAMRX_Cnt5Q3_t                     streamRx_Cnt5Q3;               /* addr: 0x0832 */
  cs_uint16                                rsrvd16;
  FR_STREAMRX_Cnt6Q1_t                     streamRx_Cnt6Q1;               /* addr: 0x0834 */
  FR_STREAMRX_Cnt6Q2_t                     streamRx_Cnt6Q2;               /* addr: 0x0835 */
  FR_STREAMRX_Cnt6Q3_t                     streamRx_Cnt6Q3;               /* addr: 0x0836 */
  cs_uint16                                rsrvd17;
  FR_STREAMRX_Cnt7Q1_t                     streamRx_Cnt7Q1;               /* addr: 0x0838 */
  FR_STREAMRX_Cnt7Q2_t                     streamRx_Cnt7Q2;               /* addr: 0x0839 */
  FR_STREAMRX_Cnt7Q3_t                     streamRx_Cnt7Q3;               /* addr: 0x083a */
  cs_uint16                                rsrvd18;
  FR_STREAMRX_Cnt8Q1_t                     streamRx_Cnt8Q1;               /* addr: 0x083c */
  FR_STREAMRX_Cnt8Q2_t                     streamRx_Cnt8Q2;               /* addr: 0x083d */
  FR_STREAMRX_Cnt8Q3_t                     streamRx_Cnt8Q3;               /* addr: 0x083e */
  cs_uint16                                rsrvd19;
  FR_STREAMRX_Cnt9Q1_t                     streamRx_Cnt9Q1;               /* addr: 0x0840 */
  FR_STREAMRX_Cnt9Q2_t                     streamRx_Cnt9Q2;               /* addr: 0x0841 */
  FR_STREAMRX_Cnt9Q3_t                     streamRx_Cnt9Q3;               /* addr: 0x0842 */
  cs_uint16                                rsrvd20;
  FR_STREAMRX_Cnt10Q1_t                    Cnt10Q1;                       /* addr: 0x0844 */
  FR_STREAMRX_Cnt10Q2_t                    Cnt10Q2;                       /* addr: 0x0845 */
  FR_STREAMRX_Cnt10Q3_t                    Cnt10Q3;                       /* addr: 0x0846 */
  cs_uint16                                rsrvd21;
  FR_STREAMRX_debugSelect_t                streamRx_debugSelect;          /* addr: 0x0848 */
  cs_uint16                                rsrvd22[7];
  FR_GFP_RX_GFP_Control_0_t                gfp_rx_GFP_Control_0;          /* addr: 0x0850 */
  FR_GFP_RX_GFP_Control_1_t                GFP_Control_1;                 /* addr: 0x0851 */
  FR_GFP_RX_GFP_Control_2_t                GFP_Control_2;                 /* addr: 0x0852 */
  cs_uint16                                rsrvd23;
  FR_GFP_RX_GFP_Intr_t                     gfp_rx_GFP_Intr;               /* addr: 0x0854 */
  FR_GFP_RX_GFP_Mask_t                     gfp_rx_GFP_Mask;               /* addr: 0x0855 */
  FR_GFP_RX_GFP_Status_t                   gfp_rx_GFP_Status;             /* addr: 0x0856 */
  cs_uint16                                rsrvd24[6569];
  FR_DATACOMTX_Control_t                   datacomTx_Control;             /* addr: 0x2200 */
  FR_DATACOMTX_Interrupt_t                 datacomTx_Interrupt;           /* addr: 0x2201 */
  FR_DATACOMTX_Mask_t                      datacomTx_Mask;                /* addr: 0x2202 */
  cs_uint16                                rsrvd25[5];
  FR_DATACOMTX_Active_Override_t           Active_Override;               /* addr: 0x2208 */
  cs_uint16                                rsrvd26[55];
  FR_DATACOMTX_StrConfig_t                 datacomTx_StrConfig;           /* addr: 0x2240 */
  FR_DATACOMTX_StrInt_t                    datacomTx_StrInt;              /* addr: 0x2241 */
  FR_DATACOMTX_StrMask_t                   datacomTx_StrMask;             /* addr: 0x2242 */
  FR_DATACOMTX_StrStatus_t                 datacomTx_StrStatus;           /* addr: 0x2243 */
  cs_uint16                                rsrvd27[1468];
  FR_STREAMTX_CellControl_t                streamTx_CellControl;          /* addr: 0x2800 */
  FR_STREAMTX_CellPattern_t                streamTx_CellPattern;          /* addr: 0x2801 */
  FR_STREAMTX_CellIntr_t                   streamTx_CellIntr;             /* addr: 0x2802 */
  FR_STREAMTX_CellIMask_t                  CellIMask;                     /* addr: 0x2803 */
  cs_uint16                                rsrvd28[4];
  FR_GFP_TX_GFP_Control_0_t                gfp_tx_GFP_Control_0;          /* addr: 0x2808 */
  FR_GFP_TX_GFP_Payload_Hdr_t              GFP_Payload_Hdr;               /* addr: 0x2809 */
  FR_GFP_TX_GFP_Intr_t                     gfp_tx_GFP_Intr;               /* addr: 0x280a */
  FR_GFP_TX_GFP_Mask_t                     gfp_tx_GFP_Mask;               /* addr: 0x280b */
  FR_GFP_TX_GFP_Status_t                   gfp_tx_GFP_Status;             /* addr: 0x280c */
  FR_GFP_TX_GFP_Diagnostic_t               GFP_Diagnostic;                /* addr: 0x280d */
  cs_uint16                                rsrvd29[2];
  FR_STREAMTX_PktControl_t                 streamTx_PktControl;           /* addr: 0x2810 */
  FR_STREAMTX_FillerByte_t                 FillerByte;                    /* addr: 0x2811 */
  FR_STREAMTX_MaxPktMSB_t                  MaxPktMSB;                     /* addr: 0x2812 */
  FR_STREAMTX_MaxPktLSB_t                  MaxPktLSB;                     /* addr: 0x2813 */
  FR_STREAMTX_MinPkt_t                     MinPkt;                        /* addr: 0x2814 */
  FR_STREAMTX_Threshold_t                  Threshold;                     /* addr: 0x2815 */
  FR_STREAMTX_NumFlags_t                   NumFlags;                      /* addr: 0x2816 */
  FR_STREAMTX_PktSts_t                     PktSts;                        /* addr: 0x2817 */
  FR_STREAMTX_PktInt_t                     PktInt;                        /* addr: 0x2818 */
  FR_STREAMTX_PktMask_t                    streamTx_PktMask;              /* addr: 0x2819 */
  cs_uint16                                rsrvd30[6];
  FR_STREAMTX_Cnt1Q1_t                     streamTx_Cnt1Q1;               /* addr: 0x2820 */
  FR_STREAMTX_Cnt1Q2_t                     streamTx_Cnt1Q2;               /* addr: 0x2821 */
  FR_STREAMTX_Cnt1Q3_t                     streamTx_Cnt1Q3;               /* addr: 0x2822 */
  cs_uint16                                rsrvd31;
  FR_STREAMTX_Cnt2Q1_t                     streamTx_Cnt2Q1;               /* addr: 0x2824 */
  FR_STREAMTX_Cnt2Q2_t                     streamTx_Cnt2Q2;               /* addr: 0x2825 */
  FR_STREAMTX_Cnt2Q3_t                     streamTx_Cnt2Q3;               /* addr: 0x2826 */
  cs_uint16                                rsrvd32;
  FR_STREAMTX_Cnt3Q1_t                     streamTx_Cnt3Q1;               /* addr: 0x2828 */
  FR_STREAMTX_Cnt3Q2_t                     streamTx_Cnt3Q2;               /* addr: 0x2829 */
  FR_STREAMTX_Cnt3Q3_t                     streamTx_Cnt3Q3;               /* addr: 0x282a */
  cs_uint16                                rsrvd33;
  FR_STREAMTX_Cnt4Q1_t                     streamTx_Cnt4Q1;               /* addr: 0x282c */
  FR_STREAMTX_Cnt4Q2_t                     streamTx_Cnt4Q2;               /* addr: 0x282d */
  FR_STREAMTX_Cnt4Q3_t                     streamTx_Cnt4Q3;               /* addr: 0x282e */
  cs_uint16                                rsrvd34;
  FR_STREAMTX_Cnt5Q1_t                     streamTx_Cnt5Q1;               /* addr: 0x2830 */
  FR_STREAMTX_Cnt5Q2_t                     streamTx_Cnt5Q2;               /* addr: 0x2831 */
  FR_STREAMTX_Cnt5Q3_t                     streamTx_Cnt5Q3;               /* addr: 0x2832 */
  cs_uint16                                rsrvd35;
  FR_STREAMTX_Cnt6Q1_t                     streamTx_Cnt6Q1;               /* addr: 0x2834 */
  FR_STREAMTX_Cnt6Q2_t                     streamTx_Cnt6Q2;               /* addr: 0x2835 */
  FR_STREAMTX_Cnt6Q3_t                     streamTx_Cnt6Q3;               /* addr: 0x2836 */
  cs_uint16                                rsrvd36;
  FR_STREAMTX_Cnt7Q1_t                     streamTx_Cnt7Q1;               /* addr: 0x2838 */
  FR_STREAMTX_Cnt7Q2_t                     streamTx_Cnt7Q2;               /* addr: 0x2839 */
  FR_STREAMTX_Cnt7Q3_t                     streamTx_Cnt7Q3;               /* addr: 0x283a */
  cs_uint16                                rsrvd37;
  FR_STREAMTX_debugSelect_t                streamTx_debugSelect;          /* addr: 0x283c */
  cs_uint16                                rsrvd38[3];
  FR_GFP_TX_Cnt8Q1_t                       gfp_tx_Cnt8Q1;                 /* addr: 0x2840 */
  FR_GFP_TX_Cnt8Q2_t                       gfp_tx_Cnt8Q2;                 /* addr: 0x2841 */
  FR_GFP_TX_Cnt8Q3_t                       gfp_tx_Cnt8Q3;                 /* addr: 0x2842 */
  cs_uint16                                rsrvd39;
  FR_GFP_TX_Cnt9Q1_t                       gfp_tx_Cnt9Q1;                 /* addr: 0x2844 */
  FR_GFP_TX_Cnt9Q2_t                       gfp_tx_Cnt9Q2;                 /* addr: 0x2845 */
  FR_GFP_TX_Cnt9Q3_t                       gfp_tx_Cnt9Q3;                 /* addr: 0x2846 */
  cs_uint16                                rsrvd40[6073];
  FR_SONET32RX_PathProvision_t             PathProvision;                 /* addr: 0x4000 */
  FR_SONET32RX_FilteredG1C2_t              FilteredG1C2;                  /* addr: 0x4001 */
  FR_SONET32RX_PRDITxInsert_t              PRDITxInsert;                  /* addr: 0x4002 */
  FR_SONET32RX_PathLabel_t                 PathLabel;                     /* addr: 0x4003 */
  FR_SONET32RX_APSPathTxInsert_t           APSPathTxInsert;               /* addr: 0x4004 */
  FR_SONET32RX_APSPathB3TxInsert_t         APSPathB3TxInsert;             /* addr: 0x4005 */
  FR_SONET32RX_PathPointer_t               PathPointer;                   /* addr: 0x4006 */
  FR_SONET32RX_PathBIPCount_t              PathBIPCount;                  /* addr: 0x4007 */
  FR_SONET32RX_PathREICount_t              PathREICount;                  /* addr: 0x4008 */
  FR_SONET32RX_PathPositiveCount_t         PathPositiveCount;             /* addr: 0x4009 */
  FR_SONET32RX_PathNegativeCount_t         PathNegativeCount;             /* addr: 0x400a */
  FR_SONET32RX_PathNewPtrCount_t           PathNewPtrCount;               /* addr: 0x400b */
  FR_SONET32RX_PathInt_t                   PathInt;                       /* addr: 0x400c */
  FR_SONET32RX_PathMask_t                  PathMask;                      /* addr: 0x400d */
  FR_SONET32RX_PathStatus_t                PathStatus;                    /* addr: 0x400e */
  cs_uint16                                rsrvd41[753];
  FR_SONET32RX_Configuration_t             sonet32Rx_Configuration;       /* addr: 0x4300 */
  FR_SONET32RX_LOSThreshold_t              LOSThreshold;                  /* addr: 0x4301 */
  FR_SONET32RX_SectionLineControl_t        SectionLineControl;            /* addr: 0x4302 */
  FR_SONET32RX_SecLineAlarmtoTxControl_t   SecLineAlarmtoTxControl;       /* addr: 0x4303 */
  FR_SONET32RX_APSTxSecLineAlarm_t         APSTxSecLineAlarm;             /* addr: 0x4304 */
  FR_SONET32RX_APSTxLineB2Count_t          APSTxLineB2Count;              /* addr: 0x4305 */
  FR_SONET32RX_SectionInterrupt_t          SectionInterrupt;              /* addr: 0x4306 */
  FR_SONET32RX_SectionStatus_t             SectionStatus;                 /* addr: 0x4307 */
  FR_SONET32RX_SectionMask_t               SectionMask;                   /* addr: 0x4308 */
  FR_SONET32RX_B1BIPErrorCount_t           B1BIPErrorCount;               /* addr: 0x4309 */
  FR_SONET32RX_LineInterrupt_t             LineInterrupt;                 /* addr: 0x430a */
  FR_SONET32RX_LineStatus_t                LineStatus;                    /* addr: 0x430b */
  FR_SONET32RX_LineMask_t                  LineMask;                      /* addr: 0x430c */
  FR_SONET32RX_APSInterrupt_t              APSInterrupt;                  /* addr: 0x430d */
  FR_SONET32RX_APSMask_t                   APSMask;                       /* addr: 0x430e */
  FR_SONET32RX_K1K2_t                      K1K2;                          /* addr: 0x430f */
  FR_SONET32RX_K3K4_t                      K3K4;                          /* addr: 0x4310 */
  FR_SONET32RX_Z1S1_t                      Z1S1;                          /* addr: 0x4311 */
  FR_SONET32RX_LBERAcc_t                   LBERAcc;                       /* addr: 0x4312 */
  FR_SONET32RX_LBER_t                      LBER;                          /* addr: 0x4313 */
  FR_SONET32RX_LBERDegradeDeclaring_t      LBERDegradeDeclaring;          /* addr: 0x4314 */
  FR_SONET32RX_LBERDegradeClearing_t       LBERDegradeClearing;           /* addr: 0x4315 */
  FR_SONET32RX_LBERFailureDeclaring_t      LBERFailureDeclaring;          /* addr: 0x4316 */
  FR_SONET32RX_LBERFailureClearing_t       LBERFailureClearing;           /* addr: 0x4317 */
  FR_SONET32RX_B2BIPErrorCountHigh_t       B2BIPErrorCountHigh;           /* addr: 0x4318 */
  FR_SONET32RX_B2BIPErrorCountLow_t        B2BIPErrorCountLow;            /* addr: 0x4319 */
  FR_SONET32RX_LineREICountHigh_t          LineREICountHigh;              /* addr: 0x431a */
  FR_SONET32RX_LineREICountLow_t           LineREICountLow;               /* addr: 0x431b */
  FR_SONET32RX_TestPortSelect_t            TestPortSelect;                /* addr: 0x431c */
  cs_uint16                                rsrvd42;
  FR_SONET32RX_Z0_byte_t                   sonet32Rx_Z0_byte;             /* addr: 0x431e */
  cs_uint16                                rsrvd43;
  FR_SONET32RX_PBERAcc_t                   PBERAcc;                       /* addr: 0x4320 */
  FR_SONET32RX_PBER_t                      PBER;                          /* addr: 0x4321 */
  FR_SONET32RX_PBERFailureDeclaring_t      PBERFailureDeclaring;          /* addr: 0x4322 */
  FR_SONET32RX_PBERFailureClearing_t       PBERFailureClearing;           /* addr: 0x4323 */
  FR_SONET32RX_PathInterrupts_t            PathInterrupts;                /* addr: 0x4324 */
  FR_SONET32RX_PathMasks_t                 PathMasks;                     /* addr: 0x4325 */
  cs_uint16                                rsrvd44[2];
  FR_SONET32RX_pathTraceSelect_t           pathTraceSelect;               /* addr: 0x4328 */
  FR_SONET32RX_F2_t                        F2;                            /* addr: 0x4329 */
  FR_SONET32RX_X_LOS_Config_t              X_LOS_Config;                  /* addr: 0x432a */
  cs_uint16                                rsrvd45[5];
  FR_SONET32RX_PRBSErrorCount_t            PRBSErrorCount;                /* addr: 0x4330 */
  cs_uint16                                rsrvd46[15];
  FR_SONET32RX_RxSectionTraceExp_t         RxSectionTraceExp;             /* addr: 0x4340 */
  cs_uint16                                rsrvd47[31];
  FR_SONET32RX_RxPathTraceExp_t            RxPathTraceExp;                /* addr: 0x4360 */
  cs_uint16                                rsrvd48[159];
  FR_RECVOVERHEAD_alarm3Path_t             recvOverhead_alarm3Path;       /* addr: 0x4400 */
  FR_RECVOVERHEAD_alarm4Path_t             recvOverhead_alarm4Path;       /* addr: 0x4401 */
  FR_RECVOVERHEAD_pathOverheadA_t          pathOverheadA;                 /* addr: 0x4402 */
  FR_RECVOVERHEAD_pathOverheadB_t          pathOverheadB;                 /* addr: 0x4403 */
  FR_RECVOVERHEAD_pathOverheadC_t          pathOverheadC;                 /* addr: 0x4404 */
  cs_uint16                                rsrvd49[763];
  FR_RECVOVERHEAD_Ctrl_t                   recvOverhead_Ctrl;             /* addr: 0x4700 */
  FR_RECVOVERHEAD_APS1_t                   recvOverhead_APS1;             /* addr: 0x4701 */
  FR_RECVOVERHEAD_APS2_t                   recvOverhead_APS2;             /* addr: 0x4702 */
  FR_RECVOVERHEAD_SyncStat_t               SyncStat;                      /* addr: 0x4703 */
  FR_RECVOVERHEAD_alarm1_t                 recvOverhead_alarm1;           /* addr: 0x4704 */
  FR_RECVOVERHEAD_alarm2_t                 recvOverhead_alarm2;           /* addr: 0x4705 */
  FR_RECVOVERHEAD_SectRow2_t               SectRow2;                      /* addr: 0x4706 */
  FR_RECVOVERHEAD_LineRow5a_t              LineRow5a;                     /* addr: 0x4707 */
  FR_RECVOVERHEAD_LineRow5b_t              LineRow5b;                     /* addr: 0x4708 */
  FR_RECVOVERHEAD_LineRow9_t               LineRow9;                      /* addr: 0x4709 */
  FR_RECVOVERHEAD_TestCtrl_t               recvOverhead_TestCtrl;         /* addr: 0x470a */
  cs_uint16                                rsrvd50[117];
  FR_RXHDLC_Ctrl_t                         rxHDLC_Ctrl;                   /* addr: 0x4780 */
  FR_RXHDLC_Bank0Status_t                  rxHDLC_Bank0Status;            /* addr: 0x4781 */
  FR_RXHDLC_Bank1Status_t                  rxHDLC_Bank1Status;            /* addr: 0x4782 */
  FR_RXHDLC_Interrupt_t                    rxHDLC_Interrupt;              /* addr: 0x4783 */
  FR_RXHDLC_Mask_t                         rxHDLC_Mask;                   /* addr: 0x4784 */
  FR_RXHDLC_Bank0Read_t                    Bank0Read;                     /* addr: 0x4785 */
  FR_RXHDLC_Bank1Read_t                    Bank1Read;                     /* addr: 0x4786 */
  FR_RXHDLC_FIFOTestData_t                 rxHDLC_FIFOTestData;           /* addr: 0x4787 */
  FR_RXHDLC_FIFOTestCtrl_t                 rxHDLC_FIFOTestCtrl;           /* addr: 0x4788 */
  FR_RXHDLC_FIFOTestEOPPtr_t               FIFOTestEOPPtr;                /* addr: 0x4789 */
  cs_uint16                                rsrvd51;
  FR_RXHDLC_Status_t                       Status;                        /* addr: 0x478b */
  FR_RXHDLC_TestCtrl_t                     rxHDLC_TestCtrl;               /* addr: 0x478c */
  cs_uint16                                rsrvd52[6259];
  FR_TRANSMIT_PathSPEPointerControl_t      PathSPEPointerControl;         /* addr: 0x6000 */
  FR_TRANSMIT_PathProvisioning_t           PathProvisioning;              /* addr: 0x6001 */
  FR_TRANSMIT_PathSPEForceControl_t        PathSPEForceControl;           /* addr: 0x6002 */
  FR_TRANSMIT_PathNewPointer_t             PathNewPointer;                /* addr: 0x6003 */
  FR_TRANSMIT_PathConcat_t                 PathConcat;                    /* addr: 0x6004 */
  cs_uint16                                rsrvd53[763];
  FR_TRANSMIT_Configuration_t              transmit_Configuration;        /* addr: 0x6300 */
  FR_TRANSMIT_SectionControl_t             SectionControl;                /* addr: 0x6301 */
  FR_TRANSMIT_FrameDelayCnt_t              FrameDelayCnt;                 /* addr: 0x6302 */
  FR_TRANSMIT_Stuff_t                      Stuff;                         /* addr: 0x6303 */
  FR_TRANSMIT_Regen_t                      Regen;                         /* addr: 0x6304 */
  FR_TRANSMIT_TxInterrupt_t                TxInterrupt;                   /* addr: 0x6305 */
  FR_TRANSMIT_TxMask_t                     TxMask;                        /* addr: 0x6306 */
  FR_TRANSMIT_Debug_t                      Debug;                         /* addr: 0x6307 */
  FR_TRANSMIT_sectionDiagnostics_t         sectionDiagnostics;            /* addr: 0x6308 */
  cs_uint16                                rsrvd54[247];
  FR_XMITOVERHEAD_PathC2Z5_t               PathC2Z5;                      /* addr: 0x6400 */
  FR_XMITOVERHEAD_PathUserInd_t            PathUserInd;                   /* addr: 0x6401 */
  FR_XMITOVERHEAD_PathGrowth_t             PathGrowth;                    /* addr: 0x6402 */
  FR_XMITOVERHEAD_PathAlarmDefectCtrl_t    PathAlarmDefectCtrl;           /* addr: 0x6403 */
  FR_XMITOVERHEAD_alarm3Path_t             xmitOverhead_alarm3Path;       /* addr: 0x6404 */
  FR_XMITOVERHEAD_alarm4Path_t             xmitOverhead_alarm4Path;       /* addr: 0x6405 */
  FR_XMITOVERHEAD_MonitorAlarm3Path_t      MonitorAlarm3Path;             /* addr: 0x6406 */
  FR_XMITOVERHEAD_MonitorAlarm4Path_t      MonitorAlarm4Path;             /* addr: 0x6407 */
  cs_uint16                                rsrvd55[760];
  FR_XMITOVERHEAD_Ctrl_t                   xmitOverhead_Ctrl;             /* addr: 0x6700 */
  FR_XMITOVERHEAD_ByteCtrl1_t              ByteCtrl1;                     /* addr: 0x6701 */
  FR_XMITOVERHEAD_ByteCtrl2_t              ByteCtrl2;                     /* addr: 0x6702 */
  FR_XMITOVERHEAD_OrderWire_t              OrderWire;                     /* addr: 0x6703 */
  FR_XMITOVERHEAD_UserChannel_t            UserChannel;                   /* addr: 0x6704 */
  FR_XMITOVERHEAD_DCC_t                    DCC;                           /* addr: 0x6705 */
  FR_XMITOVERHEAD_Default_t                Default;                       /* addr: 0x6706 */
  FR_XMITOVERHEAD_Growth_t                 Growth;                        /* addr: 0x6707 */
  FR_XMITOVERHEAD_LineAlarmDefectCtrl_t    LineAlarmDefectCtrl;           /* addr: 0x6708 */
  FR_XMITOVERHEAD_APS1_t                   xmitOverhead_APS1;             /* addr: 0x6709 */
  FR_XMITOVERHEAD_APS2_t                   xmitOverhead_APS2;             /* addr: 0x670a */
  FR_XMITOVERHEAD_SyncStatus_t             SyncStatus;                    /* addr: 0x670b */
  FR_XMITOVERHEAD_alarm1_t                 xmitOverhead_alarm1;           /* addr: 0x670c */
  FR_XMITOVERHEAD_alarm2_t                 xmitOverhead_alarm2;           /* addr: 0x670d */
  FR_XMITOVERHEAD_MonitorAPS1_t            MonitorAPS1;                   /* addr: 0x670e */
  FR_XMITOVERHEAD_MonitorAPS2_t            MonitorAPS2;                   /* addr: 0x670f */
  FR_XMITOVERHEAD_MonitorSyncStatus_t      MonitorSyncStatus;             /* addr: 0x6710 */
  FR_XMITOVERHEAD_MonitorAlarm1_t          MonitorAlarm1;                 /* addr: 0x6711 */
  FR_XMITOVERHEAD_MonitorAlarm2_t          MonitorAlarm2;                 /* addr: 0x6712 */
  FR_XMITOVERHEAD_Z0_byte_t                xmitOverhead_Z0_byte;          /* addr: 0x6713 */
  FR_XMITOVERHEAD_TestCtrl_t               xmitOverhead_TestCtrl;         /* addr: 0x6714 */
  cs_uint16                                rsrvd56[19];
  FR_XMITOVERHEAD_PathBuffer_t             PathBuffer;                    /* addr: 0x6728 */
  cs_uint16                                rsrvd57[23];
  FR_XMITOVERHEAD_SectionTrace_t           SectionTrace;                  /* addr: 0x6740 */
  cs_uint16                                rsrvd58[31];
  FR_XMITOVERHEAD_PathTrace_t              PathTrace;                     /* addr: 0x6760 */
  cs_uint16                                rsrvd59[31];
  FR_TXHDLC_Ctrl_t                         txHDLC_Ctrl;                   /* addr: 0x6780 */
  FR_TXHDLC_Bank0Status_t                  txHDLC_Bank0Status;            /* addr: 0x6781 */
  FR_TXHDLC_Bank1Status_t                  txHDLC_Bank1Status;            /* addr: 0x6782 */
  FR_TXHDLC_Interrupt_t                    txHDLC_Interrupt;              /* addr: 0x6783 */
  FR_TXHDLC_Mask_t                         txHDLC_Mask;                   /* addr: 0x6784 */
  FR_TXHDLC_Bank0Write_t                   Bank0Write;                    /* addr: 0x6785 */
  FR_TXHDLC_Bank1Write_t                   Bank1Write;                    /* addr: 0x6786 */
  FR_TXHDLC_FIFOTestData_t                 txHDLC_FIFOTestData;           /* addr: 0x6787 */
  FR_TXHDLC_FIFOTestCtrl_t                 txHDLC_FIFOTestCtrl;           /* addr: 0x6788 */
  FR_TXHDLC_TestCtrl_t                     txHDLC_TestCtrl;               /* addr: 0x6789 */
} Framer_t;

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::micro_if
 */

#define DR_MICRO_IF_JTAG1                        0x10000
#define DR_MICRO_IF_JTAG1_dft                    0x7f7f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 JTAG1                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 JTAG1                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_JTAG1_t;

#define DR_MICRO_IF_JTAG0                        0x10001
#define DR_MICRO_IF_JTAG0_dft                    0x7f92
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 JTAG0                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 JTAG0                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_JTAG0_t;

#define DR_MICRO_IF_SCRATCH                      0x10002
#define DR_MICRO_IF_SCRATCH_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SCRATCH              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SCRATCH              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_SCRATCH_t;

#define DR_MICRO_IF_CHIP_ID                      0x10003
#define DR_MICRO_IF_CHIP_ID_dft                  0x0011
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PRODUCT              : 12 ; /* bits 15:4 */
    cs_uint16 REV_NUM              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 REV_NUM              :  4 ; /* bits 3:0 */
    cs_uint16 PRODUCT              : 12 ; /* bits 15:4 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_CHIP_ID_t;

#define DR_MICRO_IF_IRQ5                         0x10005
#define DR_MICRO_IF_IRQ5_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 TBD_WE               :  1 ; /* bits 11:11 */
    cs_uint16 TBD_NOIPS            :  1 ; /* bits 10:10 */
    cs_uint16 RXF_MCASTSA          :  1 ; /* bits 9:9 */
    cs_uint16 DQTA_TO              :  1 ; /* bits 8:8 */
    cs_uint16 MEMPAR1              :  1 ; /* bits 7:7 */
    cs_uint16 MEMPAR0              :  1 ; /* bits 6:6 */
    cs_uint16 NEW_TTL_CONGEST      :  1 ; /* bits 5:5 */
    cs_uint16 OLD_TSN_FLUSHED      :  1 ; /* bits 4:4 */
    cs_uint16 MAC_PKTLEN_ERR       :  1 ; /* bits 3:3 */
    cs_uint16 TBH_ECC              :  1 ; /* bits 2:2 */
    cs_uint16 TBL_ECC              :  1 ; /* bits 1:1 */
    cs_uint16 EXTTB_ECC            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB_ECC            :  1 ; /* bits 0:0 */
    cs_uint16 TBL_ECC              :  1 ; /* bits 1:1 */
    cs_uint16 TBH_ECC              :  1 ; /* bits 2:2 */
    cs_uint16 MAC_PKTLEN_ERR       :  1 ; /* bits 3:3 */
    cs_uint16 OLD_TSN_FLUSHED      :  1 ; /* bits 4:4 */
    cs_uint16 NEW_TTL_CONGEST      :  1 ; /* bits 5:5 */
    cs_uint16 MEMPAR0              :  1 ; /* bits 6:6 */
    cs_uint16 MEMPAR1              :  1 ; /* bits 7:7 */
    cs_uint16 DQTA_TO              :  1 ; /* bits 8:8 */
    cs_uint16 RXF_MCASTSA          :  1 ; /* bits 9:9 */
    cs_uint16 TBD_NOIPS            :  1 ; /* bits 10:10 */
    cs_uint16 TBD_WE               :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ5_t;

#define DR_MICRO_IF_IRQ_ENAB5                    0x10006
#define DR_MICRO_IF_IRQ_ENAB5_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 E_TBD_WE             :  1 ; /* bits 11:11 */
    cs_uint16 E_TBD_NOIPS          :  1 ; /* bits 10:10 */
    cs_uint16 E_RXF_MCASTSA        :  1 ; /* bits 9:9 */
    cs_uint16 E_DQTA_TO            :  1 ; /* bits 8:8 */
    cs_uint16 E_MEMPAR1            :  1 ; /* bits 7:7 */
    cs_uint16 E_MEMPAR0            :  1 ; /* bits 6:6 */
    cs_uint16 E_NEW_TTL_CONGEST    :  1 ; /* bits 5:5 */
    cs_uint16 E_OLD_TSN_FLUSHED    :  1 ; /* bits 4:4 */
    cs_uint16 E_MAC_PKTLEN_ERR     :  1 ; /* bits 3:3 */
    cs_uint16 E_TBH_ECC            :  1 ; /* bits 2:2 */
    cs_uint16 E_TBL_ECC            :  1 ; /* bits 1:1 */
    cs_uint16 E_EXTTB_ECC          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E_EXTTB_ECC          :  1 ; /* bits 0:0 */
    cs_uint16 E_TBL_ECC            :  1 ; /* bits 1:1 */
    cs_uint16 E_TBH_ECC            :  1 ; /* bits 2:2 */
    cs_uint16 E_MAC_PKTLEN_ERR     :  1 ; /* bits 3:3 */
    cs_uint16 E_OLD_TSN_FLUSHED    :  1 ; /* bits 4:4 */
    cs_uint16 E_NEW_TTL_CONGEST    :  1 ; /* bits 5:5 */
    cs_uint16 E_MEMPAR0            :  1 ; /* bits 6:6 */
    cs_uint16 E_MEMPAR1            :  1 ; /* bits 7:7 */
    cs_uint16 E_DQTA_TO            :  1 ; /* bits 8:8 */
    cs_uint16 E_RXF_MCASTSA        :  1 ; /* bits 9:9 */
    cs_uint16 E_TBD_NOIPS          :  1 ; /* bits 10:10 */
    cs_uint16 E_TBD_WE             :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_ENAB5_t;

#define DR_MICRO_IF_IRQ_STAT5                    0x10007
#define DR_MICRO_IF_IRQ_STAT5_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 ST_TBD_WE            :  1 ; /* bits 11:11 */
    cs_uint16 ST_TBD_NOIPS         :  1 ; /* bits 10:10 */
    cs_uint16 ST_RXF_MCASTSA       :  1 ; /* bits 9:9 */
    cs_uint16 ST_DQTA_TO           :  1 ; /* bits 8:8 */
    cs_uint16 ST_MEMPAR1           :  1 ; /* bits 7:7 */
    cs_uint16 ST_MEMPAR0           :  1 ; /* bits 6:6 */
    cs_uint16 ST_NEW_TTL_CONGEST   :  1 ; /* bits 5:5 */
    cs_uint16 ST_OLD_TSN_FLUSHED   :  1 ; /* bits 4:4 */
    cs_uint16 ST_MAC_PKTLEN_ERR    :  1 ; /* bits 3:3 */
    cs_uint16 ST_TBH_ECC           :  1 ; /* bits 2:2 */
    cs_uint16 ST_TBL_ECC           :  1 ; /* bits 1:1 */
    cs_uint16 ST_EXTTB_ECC         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ST_EXTTB_ECC         :  1 ; /* bits 0:0 */
    cs_uint16 ST_TBL_ECC           :  1 ; /* bits 1:1 */
    cs_uint16 ST_TBH_ECC           :  1 ; /* bits 2:2 */
    cs_uint16 ST_MAC_PKTLEN_ERR    :  1 ; /* bits 3:3 */
    cs_uint16 ST_OLD_TSN_FLUSHED   :  1 ; /* bits 4:4 */
    cs_uint16 ST_NEW_TTL_CONGEST   :  1 ; /* bits 5:5 */
    cs_uint16 ST_MEMPAR0           :  1 ; /* bits 6:6 */
    cs_uint16 ST_MEMPAR1           :  1 ; /* bits 7:7 */
    cs_uint16 ST_DQTA_TO           :  1 ; /* bits 8:8 */
    cs_uint16 ST_RXF_MCASTSA       :  1 ; /* bits 9:9 */
    cs_uint16 ST_TBD_NOIPS         :  1 ; /* bits 10:10 */
    cs_uint16 ST_TBD_WE            :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_STAT5_t;

#define DR_MICRO_IF_IRQ4                         0x10009
#define DR_MICRO_IF_IRQ4_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 FRM_HEC_ERR          :  1 ; /* bits 14:14 */
    cs_uint16 TOM_UNDERFLOW        :  1 ; /* bits 13:13 */
    cs_uint16 MATE_WRAP            :  1 ; /* bits 12:12 */
    cs_uint16 FRM_CTRL_SQNC_ERR    :  1 ; /* bits 11:11 */
    cs_uint16 FRM_OVERFLOW         :  1 ; /* bits 10:10 */
    cs_uint16 FRM_UNDERFLOW        :  1 ; /* bits 9:9 */
    cs_uint16 FRM_SERDES           :  1 ; /* bits 8:8 */
    cs_uint16 FRM_CRC_ERR          :  1 ; /* bits 7:7 */
    cs_uint16 FRM_CRC_ERR_SAT      :  1 ; /* bits 6:6 */
    cs_uint16 FRM_GIANT            :  1 ; /* bits 5:5 */
    cs_uint16 FRM_GIANT_SAT        :  1 ; /* bits 4:4 */
    cs_uint16 FRM_LOS              :  1 ; /* bits 3:3 */
    cs_uint16 FRM_LOS_SAT          :  1 ; /* bits 2:2 */
    cs_uint16 FRM_RUNT             :  1 ; /* bits 1:1 */
    cs_uint16 FRM_RUNT_SAT         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_RUNT_SAT         :  1 ; /* bits 0:0 */
    cs_uint16 FRM_RUNT             :  1 ; /* bits 1:1 */
    cs_uint16 FRM_LOS_SAT          :  1 ; /* bits 2:2 */
    cs_uint16 FRM_LOS              :  1 ; /* bits 3:3 */
    cs_uint16 FRM_GIANT_SAT        :  1 ; /* bits 4:4 */
    cs_uint16 FRM_GIANT            :  1 ; /* bits 5:5 */
    cs_uint16 FRM_CRC_ERR_SAT      :  1 ; /* bits 6:6 */
    cs_uint16 FRM_CRC_ERR          :  1 ; /* bits 7:7 */
    cs_uint16 FRM_SERDES           :  1 ; /* bits 8:8 */
    cs_uint16 FRM_UNDERFLOW        :  1 ; /* bits 9:9 */
    cs_uint16 FRM_OVERFLOW         :  1 ; /* bits 10:10 */
    cs_uint16 FRM_CTRL_SQNC_ERR    :  1 ; /* bits 11:11 */
    cs_uint16 MATE_WRAP            :  1 ; /* bits 12:12 */
    cs_uint16 TOM_UNDERFLOW        :  1 ; /* bits 13:13 */
    cs_uint16 FRM_HEC_ERR          :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ4_t;

#define DR_MICRO_IF_IRQ_ENAB4                    0x1000a
#define DR_MICRO_IF_IRQ_ENAB4_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 E_FRM_HEC_ERR        :  1 ; /* bits 14:14 */
    cs_uint16 E_TOM_UNDERFLOW      :  1 ; /* bits 13:13 */
    cs_uint16 E_MATE_WRAP          :  1 ; /* bits 12:12 */
    cs_uint16 E_FRM_CTRL_SQNC_ERR  :  1 ; /* bits 11:11 */
    cs_uint16 E_FRM_OVERFLOW       :  1 ; /* bits 10:10 */
    cs_uint16 E_FRM_UNDERFLOW      :  1 ; /* bits 9:9 */
    cs_uint16 E_FRM_SERDES         :  1 ; /* bits 8:8 */
    cs_uint16 E_FRM_CRC_ERR        :  1 ; /* bits 7:7 */
    cs_uint16 E_FRM_CRC_ERR_SAT    :  1 ; /* bits 6:6 */
    cs_uint16 E_FRM_GIANT          :  1 ; /* bits 5:5 */
    cs_uint16 E_FRM_GIANT_SAT      :  1 ; /* bits 4:4 */
    cs_uint16 E_FRM_LOS            :  1 ; /* bits 3:3 */
    cs_uint16 E_FRM_LOS_SAT        :  1 ; /* bits 2:2 */
    cs_uint16 E_FRM_RUNT           :  1 ; /* bits 1:1 */
    cs_uint16 E_FRM_RUNT_SAT       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E_FRM_RUNT_SAT       :  1 ; /* bits 0:0 */
    cs_uint16 E_FRM_RUNT           :  1 ; /* bits 1:1 */
    cs_uint16 E_FRM_LOS_SAT        :  1 ; /* bits 2:2 */
    cs_uint16 E_FRM_LOS            :  1 ; /* bits 3:3 */
    cs_uint16 E_FRM_GIANT_SAT      :  1 ; /* bits 4:4 */
    cs_uint16 E_FRM_GIANT          :  1 ; /* bits 5:5 */
    cs_uint16 E_FRM_CRC_ERR_SAT    :  1 ; /* bits 6:6 */
    cs_uint16 E_FRM_CRC_ERR        :  1 ; /* bits 7:7 */
    cs_uint16 E_FRM_SERDES         :  1 ; /* bits 8:8 */
    cs_uint16 E_FRM_UNDERFLOW      :  1 ; /* bits 9:9 */
    cs_uint16 E_FRM_OVERFLOW       :  1 ; /* bits 10:10 */
    cs_uint16 E_FRM_CTRL_SQNC_ERR  :  1 ; /* bits 11:11 */
    cs_uint16 E_MATE_WRAP          :  1 ; /* bits 12:12 */
    cs_uint16 E_TOM_UNDERFLOW      :  1 ; /* bits 13:13 */
    cs_uint16 E_FRM_HEC_ERR        :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_ENAB4_t;

#define DR_MICRO_IF_IRQ_STAT4                    0x1000b
#define DR_MICRO_IF_IRQ_STAT4_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ST_FRM_HEC_ERR       :  1 ; /* bits 14:14 */
    cs_uint16 ST_TOM_UNDERFLOW     :  1 ; /* bits 13:13 */
    cs_uint16 ST_MATE_WRAP         :  1 ; /* bits 12:12 */
    cs_uint16 ST_FRM_CTRL_SQNC_ERR :  1 ; /* bits 11:11 */
    cs_uint16 ST_FRM_OVERFLOW      :  1 ; /* bits 10:10 */
    cs_uint16 ST_FRM_UNDERFLOW     :  1 ; /* bits 9:9 */
    cs_uint16 ST_FRM_SERDES        :  1 ; /* bits 8:8 */
    cs_uint16 ST_FRM_CRC_ERR       :  1 ; /* bits 7:7 */
    cs_uint16 ST_FRM_CRC_ERR_SAT   :  1 ; /* bits 6:6 */
    cs_uint16 ST_FRM_GIANT         :  1 ; /* bits 5:5 */
    cs_uint16 ST_FRM_GIANT_SAT     :  1 ; /* bits 4:4 */
    cs_uint16 ST_FRM_LOS           :  1 ; /* bits 3:3 */
    cs_uint16 ST_FRM_LOS_SAT       :  1 ; /* bits 2:2 */
    cs_uint16 ST_FRM_RUNT          :  1 ; /* bits 1:1 */
    cs_uint16 ST_FRM_RUNT_SAT      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ST_FRM_RUNT_SAT      :  1 ; /* bits 0:0 */
    cs_uint16 ST_FRM_RUNT          :  1 ; /* bits 1:1 */
    cs_uint16 ST_FRM_LOS_SAT       :  1 ; /* bits 2:2 */
    cs_uint16 ST_FRM_LOS           :  1 ; /* bits 3:3 */
    cs_uint16 ST_FRM_GIANT_SAT     :  1 ; /* bits 4:4 */
    cs_uint16 ST_FRM_GIANT         :  1 ; /* bits 5:5 */
    cs_uint16 ST_FRM_CRC_ERR_SAT   :  1 ; /* bits 6:6 */
    cs_uint16 ST_FRM_CRC_ERR       :  1 ; /* bits 7:7 */
    cs_uint16 ST_FRM_SERDES        :  1 ; /* bits 8:8 */
    cs_uint16 ST_FRM_UNDERFLOW     :  1 ; /* bits 9:9 */
    cs_uint16 ST_FRM_OVERFLOW      :  1 ; /* bits 10:10 */
    cs_uint16 ST_FRM_CTRL_SQNC_ERR :  1 ; /* bits 11:11 */
    cs_uint16 ST_MATE_WRAP         :  1 ; /* bits 12:12 */
    cs_uint16 ST_TOM_UNDERFLOW     :  1 ; /* bits 13:13 */
    cs_uint16 ST_FRM_HEC_ERR       :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_STAT4_t;

#define DR_MICRO_IF_IRQ3                         0x1000d
#define DR_MICRO_IF_IRQ3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RI_TTL_MAX       :  1 ; /* bits 15:15 */
    cs_uint16 EXTTB_DPERR          :  1 ; /* bits 14:14 */
    cs_uint16 EXTTB_OVFL           :  1 ; /* bits 13:13 */
    cs_uint16 PTQ_KILL_DONE        :  1 ; /* bits 12:12 */
    cs_uint16 STQ_KILL_DONE        :  1 ; /* bits 11:11 */
    cs_uint16 TBD_IPS              :  1 ; /* bits 10:10 */
    cs_uint16 RING_ERR             :  1 ; /* bits 9:9 */
    cs_uint16 LTBO                 :  1 ; /* bits 8:8 */
    cs_uint16 HTBO                 :  1 ; /* bits 7:7 */
    cs_uint16 TBD_RUNT_USG         :  1 ; /* bits 6:6 */
    cs_uint16 LTB_DPERR            :  1 ; /* bits 5:5 */
    cs_uint16 HTB_DPERR            :  1 ; /* bits 4:4 */
    cs_uint16 CTL_RCV_INT          :  1 ; /* bits 3:3 */
    cs_uint16 CTL_SND_INT          :  1 ; /* bits 2:2 */
    cs_uint16 IPS_RCV_INT          :  1 ; /* bits 1:1 */
    cs_uint16 IPS_SND_INT          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SND_INT          :  1 ; /* bits 0:0 */
    cs_uint16 IPS_RCV_INT          :  1 ; /* bits 1:1 */
    cs_uint16 CTL_SND_INT          :  1 ; /* bits 2:2 */
    cs_uint16 CTL_RCV_INT          :  1 ; /* bits 3:3 */
    cs_uint16 HTB_DPERR            :  1 ; /* bits 4:4 */
    cs_uint16 LTB_DPERR            :  1 ; /* bits 5:5 */
    cs_uint16 TBD_RUNT_USG         :  1 ; /* bits 6:6 */
    cs_uint16 HTBO                 :  1 ; /* bits 7:7 */
    cs_uint16 LTBO                 :  1 ; /* bits 8:8 */
    cs_uint16 RING_ERR             :  1 ; /* bits 9:9 */
    cs_uint16 TBD_IPS              :  1 ; /* bits 10:10 */
    cs_uint16 STQ_KILL_DONE        :  1 ; /* bits 11:11 */
    cs_uint16 PTQ_KILL_DONE        :  1 ; /* bits 12:12 */
    cs_uint16 EXTTB_OVFL           :  1 ; /* bits 13:13 */
    cs_uint16 EXTTB_DPERR          :  1 ; /* bits 14:14 */
    cs_uint16 IPS_RI_TTL_MAX       :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ3_t;

#define DR_MICRO_IF_IRQ_ENAB3                    0x1000e
#define DR_MICRO_IF_IRQ_ENAB3_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 E_IPS_RI_TTL_MAX     :  1 ; /* bits 15:15 */
    cs_uint16 E_EXTTB_DPERR        :  1 ; /* bits 14:14 */
    cs_uint16 E_EXTTB_OVFL         :  1 ; /* bits 13:13 */
    cs_uint16 E_PTQ_KILL_DONE      :  1 ; /* bits 12:12 */
    cs_uint16 E_STQ_KILL_DONE      :  1 ; /* bits 11:11 */
    cs_uint16 E_TBD_IPS            :  1 ; /* bits 10:10 */
    cs_uint16 E_RING_ERR           :  1 ; /* bits 9:9 */
    cs_uint16 E_LTBO               :  1 ; /* bits 8:8 */
    cs_uint16 E_HTBO               :  1 ; /* bits 7:7 */
    cs_uint16 E_TBD_RUNT_USG       :  1 ; /* bits 6:6 */
    cs_uint16 E_LTB_DPERR          :  1 ; /* bits 5:5 */
    cs_uint16 E_HTB_DPERR          :  1 ; /* bits 4:4 */
    cs_uint16 E_CTL_RCV_INT        :  1 ; /* bits 3:3 */
    cs_uint16 E_CTL_SND_INT        :  1 ; /* bits 2:2 */
    cs_uint16 E_IPS_RCV_INT        :  1 ; /* bits 1:1 */
    cs_uint16 E_IPS_SND_INT        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E_IPS_SND_INT        :  1 ; /* bits 0:0 */
    cs_uint16 E_IPS_RCV_INT        :  1 ; /* bits 1:1 */
    cs_uint16 E_CTL_SND_INT        :  1 ; /* bits 2:2 */
    cs_uint16 E_CTL_RCV_INT        :  1 ; /* bits 3:3 */
    cs_uint16 E_HTB_DPERR          :  1 ; /* bits 4:4 */
    cs_uint16 E_LTB_DPERR          :  1 ; /* bits 5:5 */
    cs_uint16 E_TBD_RUNT_USG       :  1 ; /* bits 6:6 */
    cs_uint16 E_HTBO               :  1 ; /* bits 7:7 */
    cs_uint16 E_LTBO               :  1 ; /* bits 8:8 */
    cs_uint16 E_RING_ERR           :  1 ; /* bits 9:9 */
    cs_uint16 E_TBD_IPS            :  1 ; /* bits 10:10 */
    cs_uint16 E_STQ_KILL_DONE      :  1 ; /* bits 11:11 */
    cs_uint16 E_PTQ_KILL_DONE      :  1 ; /* bits 12:12 */
    cs_uint16 E_EXTTB_OVFL         :  1 ; /* bits 13:13 */
    cs_uint16 E_EXTTB_DPERR        :  1 ; /* bits 14:14 */
    cs_uint16 E_IPS_RI_TTL_MAX     :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_ENAB3_t;

#define DR_MICRO_IF_IRQ_STAT3                    0x1000f
#define DR_MICRO_IF_IRQ_STAT3_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ST_IPS_RI_TTL_MAX    :  1 ; /* bits 15:15 */
    cs_uint16 ST_EXTTB_DPERR       :  1 ; /* bits 14:14 */
    cs_uint16 ST_EXTTB_OVFL        :  1 ; /* bits 13:13 */
    cs_uint16 ST_PTQ_KILL_DONE     :  1 ; /* bits 12:12 */
    cs_uint16 ST_STQ_KILL_DONE     :  1 ; /* bits 11:11 */
    cs_uint16 ST_TBD_IPS           :  1 ; /* bits 10:10 */
    cs_uint16 ST_RING_ERR          :  1 ; /* bits 9:9 */
    cs_uint16 ST_LTBO              :  1 ; /* bits 8:8 */
    cs_uint16 ST_HTBO              :  1 ; /* bits 7:7 */
    cs_uint16 ST_TBD_RUNT_USG      :  1 ; /* bits 6:6 */
    cs_uint16 ST_LTB_DPERR         :  1 ; /* bits 5:5 */
    cs_uint16 ST_HTB_DPERR         :  1 ; /* bits 4:4 */
    cs_uint16 ST_CTL_RCV_INT       :  1 ; /* bits 3:3 */
    cs_uint16 ST_CTL_SND_INT       :  1 ; /* bits 2:2 */
    cs_uint16 ST_IPS_RCV_INT       :  1 ; /* bits 1:1 */
    cs_uint16 ST_IPS_SND_INT       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ST_IPS_SND_INT       :  1 ; /* bits 0:0 */
    cs_uint16 ST_IPS_RCV_INT       :  1 ; /* bits 1:1 */
    cs_uint16 ST_CTL_SND_INT       :  1 ; /* bits 2:2 */
    cs_uint16 ST_CTL_RCV_INT       :  1 ; /* bits 3:3 */
    cs_uint16 ST_HTB_DPERR         :  1 ; /* bits 4:4 */
    cs_uint16 ST_LTB_DPERR         :  1 ; /* bits 5:5 */
    cs_uint16 ST_TBD_RUNT_USG      :  1 ; /* bits 6:6 */
    cs_uint16 ST_HTBO              :  1 ; /* bits 7:7 */
    cs_uint16 ST_LTBO              :  1 ; /* bits 8:8 */
    cs_uint16 ST_RING_ERR          :  1 ; /* bits 9:9 */
    cs_uint16 ST_TBD_IPS           :  1 ; /* bits 10:10 */
    cs_uint16 ST_STQ_KILL_DONE     :  1 ; /* bits 11:11 */
    cs_uint16 ST_PTQ_KILL_DONE     :  1 ; /* bits 12:12 */
    cs_uint16 ST_EXTTB_OVFL        :  1 ; /* bits 13:13 */
    cs_uint16 ST_EXTTB_DPERR       :  1 ; /* bits 14:14 */
    cs_uint16 ST_IPS_RI_TTL_MAX    :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_STAT3_t;

#define DR_MICRO_IF_IRQ2                         0x10011
#define DR_MICRO_IF_IRQ2_dft                     0x0440
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LKPCAM_MULTIHIT      :  1 ; /* bits 15:15 */
    cs_uint16 STATCAM_MULTIHIT     :  1 ; /* bits 14:14 */
    cs_uint16 USEQ_FAIR            :  1 ; /* bits 13:13 */
    cs_uint16 BIST_ERR             :  1 ; /* bits 12:12 */
    cs_uint16 MAC_PERR             :  1 ; /* bits 11:11 */
    cs_uint16 HW_RESET             :  1 ; /* bits 10:10 */
    cs_uint16 USEQ_INT             :  1 ; /* bits 9:9 */
    cs_uint16 WDOG                 :  1 ; /* bits 8:8 */
    cs_uint16 WPASS                :  1 ; /* bits 7:7 */
    cs_uint16 FPASS                :  1 ; /* bits 6:6 */
    cs_uint16 SPSAT                :  1 ; /* bits 5:5 */
    cs_uint16 SBSAT                :  1 ; /* bits 4:4 */
    cs_uint16 LPSAT                :  1 ; /* bits 3:3 */
    cs_uint16 LBSAT                :  1 ; /* bits 2:2 */
    cs_uint16 TTLS                 :  1 ; /* bits 1:1 */
    cs_uint16 WR2_LOCK             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 WR2_LOCK             :  1 ; /* bits 0:0 */
    cs_uint16 TTLS                 :  1 ; /* bits 1:1 */
    cs_uint16 LBSAT                :  1 ; /* bits 2:2 */
    cs_uint16 LPSAT                :  1 ; /* bits 3:3 */
    cs_uint16 SBSAT                :  1 ; /* bits 4:4 */
    cs_uint16 SPSAT                :  1 ; /* bits 5:5 */
    cs_uint16 FPASS                :  1 ; /* bits 6:6 */
    cs_uint16 WPASS                :  1 ; /* bits 7:7 */
    cs_uint16 WDOG                 :  1 ; /* bits 8:8 */
    cs_uint16 USEQ_INT             :  1 ; /* bits 9:9 */
    cs_uint16 HW_RESET             :  1 ; /* bits 10:10 */
    cs_uint16 MAC_PERR             :  1 ; /* bits 11:11 */
    cs_uint16 BIST_ERR             :  1 ; /* bits 12:12 */
    cs_uint16 USEQ_FAIR            :  1 ; /* bits 13:13 */
    cs_uint16 STATCAM_MULTIHIT     :  1 ; /* bits 14:14 */
    cs_uint16 LKPCAM_MULTIHIT      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ2_t;

#define DR_MICRO_IF_IRQ_ENAB2                    0x10012
#define DR_MICRO_IF_IRQ_ENAB2_dft                0x0400
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 E_LKPCAM_MULTIHIT    :  1 ; /* bits 15:15 */
    cs_uint16 E_STATCAM_MULTIHIT   :  1 ; /* bits 14:14 */
    cs_uint16 E_USEQ_FAIR          :  1 ; /* bits 13:13 */
    cs_uint16 E_BIST_ERR           :  1 ; /* bits 12:12 */
    cs_uint16 E_MAC_PERR           :  1 ; /* bits 11:11 */
    cs_uint16 E_HW_RESET           :  1 ; /* bits 10:10 */
    cs_uint16 E_USEQ_INT           :  1 ; /* bits 9:9 */
    cs_uint16 E_WDOG               :  1 ; /* bits 8:8 */
    cs_uint16 E_WPASS              :  1 ; /* bits 7:7 */
    cs_uint16 E_FPASS              :  1 ; /* bits 6:6 */
    cs_uint16 E_SPSAT              :  1 ; /* bits 5:5 */
    cs_uint16 E_SBSAT              :  1 ; /* bits 4:4 */
    cs_uint16 E_LPSAT              :  1 ; /* bits 3:3 */
    cs_uint16 E_LBSAT              :  1 ; /* bits 2:2 */
    cs_uint16 E_TTLS               :  1 ; /* bits 1:1 */
    cs_uint16 E_WR2_LOCK           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E_WR2_LOCK           :  1 ; /* bits 0:0 */
    cs_uint16 E_TTLS               :  1 ; /* bits 1:1 */
    cs_uint16 E_LBSAT              :  1 ; /* bits 2:2 */
    cs_uint16 E_LPSAT              :  1 ; /* bits 3:3 */
    cs_uint16 E_SBSAT              :  1 ; /* bits 4:4 */
    cs_uint16 E_SPSAT              :  1 ; /* bits 5:5 */
    cs_uint16 E_FPASS              :  1 ; /* bits 6:6 */
    cs_uint16 E_WPASS              :  1 ; /* bits 7:7 */
    cs_uint16 E_WDOG               :  1 ; /* bits 8:8 */
    cs_uint16 E_USEQ_INT           :  1 ; /* bits 9:9 */
    cs_uint16 E_HW_RESET           :  1 ; /* bits 10:10 */
    cs_uint16 E_MAC_PERR           :  1 ; /* bits 11:11 */
    cs_uint16 E_BIST_ERR           :  1 ; /* bits 12:12 */
    cs_uint16 E_USEQ_FAIR          :  1 ; /* bits 13:13 */
    cs_uint16 E_STATCAM_MULTIHIT   :  1 ; /* bits 14:14 */
    cs_uint16 E_LKPCAM_MULTIHIT    :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_ENAB2_t;

#define DR_MICRO_IF_IRQ_STAT2                    0x10013
#define DR_MICRO_IF_IRQ_STAT2_dft                0x0040
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ST_LKPCAM_MULTIHIT   :  1 ; /* bits 15:15 */
    cs_uint16 ST_STATCAM_MULTIHIT  :  1 ; /* bits 14:14 */
    cs_uint16 ST_USEQ_FAIR         :  1 ; /* bits 13:13 */
    cs_uint16 ST_BIST_ERR          :  1 ; /* bits 12:12 */
    cs_uint16 ST_MAC_PERR          :  1 ; /* bits 11:11 */
    cs_uint16 ST_HW_RESET          :  1 ; /* bits 10:10 */
    cs_uint16 ST_USEQ_INT          :  1 ; /* bits 9:9 */
    cs_uint16 ST_WDOG              :  1 ; /* bits 8:8 */
    cs_uint16 ST_WPASS             :  1 ; /* bits 7:7 */
    cs_uint16 ST_FPASS             :  1 ; /* bits 6:6 */
    cs_uint16 ST_SPSAT             :  1 ; /* bits 5:5 */
    cs_uint16 ST_SBSAT             :  1 ; /* bits 4:4 */
    cs_uint16 ST_LPSAT             :  1 ; /* bits 3:3 */
    cs_uint16 ST_LBSAT             :  1 ; /* bits 2:2 */
    cs_uint16 ST_TTLS              :  1 ; /* bits 1:1 */
    cs_uint16 ST_WR2_LOCK          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ST_WR2_LOCK          :  1 ; /* bits 0:0 */
    cs_uint16 ST_TTLS              :  1 ; /* bits 1:1 */
    cs_uint16 ST_LBSAT             :  1 ; /* bits 2:2 */
    cs_uint16 ST_LPSAT             :  1 ; /* bits 3:3 */
    cs_uint16 ST_SBSAT             :  1 ; /* bits 4:4 */
    cs_uint16 ST_SPSAT             :  1 ; /* bits 5:5 */
    cs_uint16 ST_FPASS             :  1 ; /* bits 6:6 */
    cs_uint16 ST_WPASS             :  1 ; /* bits 7:7 */
    cs_uint16 ST_WDOG              :  1 ; /* bits 8:8 */
    cs_uint16 ST_USEQ_INT          :  1 ; /* bits 9:9 */
    cs_uint16 ST_HW_RESET          :  1 ; /* bits 10:10 */
    cs_uint16 ST_MAC_PERR          :  1 ; /* bits 11:11 */
    cs_uint16 ST_BIST_ERR          :  1 ; /* bits 12:12 */
    cs_uint16 ST_USEQ_FAIR         :  1 ; /* bits 13:13 */
    cs_uint16 ST_STATCAM_MULTIHIT  :  1 ; /* bits 14:14 */
    cs_uint16 ST_LKPCAM_MULTIHIT   :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_STAT2_t;

#define DR_MICRO_IF_IRQ1                         0x10015
#define DR_MICRO_IF_IRQ1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_TRAF              :  1 ; /* bits 15:15 */
    cs_uint16 RX_TIMER             :  1 ; /* bits 14:14 */
    cs_uint16 RX_CRC_ERR           :  1 ; /* bits 13:13 */
    cs_uint16 RX_HEC_ERR           :  1 ; /* bits 12:12 */
    cs_uint16 RXF_IDLE_SA          :  1 ; /* bits 11:11 */
    cs_uint16 RXF_FIFO_OVFL        :  1 ; /* bits 10:10 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 RXF_CTRL_PERR        :  1 ; /* bits 8:8 */
    cs_uint16 RXF_SRP_PERR         :  1 ; /* bits 7:7 */
    cs_uint16 RXF_SHRT_PKT         :  1 ; /* bits 6:6 */
    cs_uint16 RXF_PKT_EMPTY        :  1 ; /* bits 5:5 */
    cs_uint16 RXF_PKT_GIANT        :  1 ; /* bits 4:4 */
    cs_uint16 RXF_RUNT             :  1 ; /* bits 3:3 */
    cs_uint16 RXF_ERR              :  1 ; /* bits 2:2 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 RXF_DPERR            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_DPERR            :  1 ; /* bits 0:0 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 RXF_ERR              :  1 ; /* bits 2:2 */
    cs_uint16 RXF_RUNT             :  1 ; /* bits 3:3 */
    cs_uint16 RXF_PKT_GIANT        :  1 ; /* bits 4:4 */
    cs_uint16 RXF_PKT_EMPTY        :  1 ; /* bits 5:5 */
    cs_uint16 RXF_SHRT_PKT         :  1 ; /* bits 6:6 */
    cs_uint16 RXF_SRP_PERR         :  1 ; /* bits 7:7 */
    cs_uint16 RXF_CTRL_PERR        :  1 ; /* bits 8:8 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 RXF_FIFO_OVFL        :  1 ; /* bits 10:10 */
    cs_uint16 RXF_IDLE_SA          :  1 ; /* bits 11:11 */
    cs_uint16 RX_HEC_ERR           :  1 ; /* bits 12:12 */
    cs_uint16 RX_CRC_ERR           :  1 ; /* bits 13:13 */
    cs_uint16 RX_TIMER             :  1 ; /* bits 14:14 */
    cs_uint16 RX_TRAF              :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ1_t;

#define DR_MICRO_IF_IRQ_ENAB1                    0x10016
#define DR_MICRO_IF_IRQ_ENAB1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 E_RX_TRAF            :  1 ; /* bits 15:15 */
    cs_uint16 E_RX_TIMER           :  1 ; /* bits 14:14 */
    cs_uint16 E_RX_CRC_ERR         :  1 ; /* bits 13:13 */
    cs_uint16 E_RX_HEC_ERR         :  1 ; /* bits 12:12 */
    cs_uint16 E_RXF_IDLE_SA        :  1 ; /* bits 11:11 */
    cs_uint16 E_RXF_FIFO_OVFL      :  1 ; /* bits 10:10 */
    cs_uint16 E_TXF_STSIG_ERR      :  1 ; /* bits 9:9 */
    cs_uint16 E_RXF_CTRL_PERR      :  1 ; /* bits 8:8 */
    cs_uint16 E_RXF_SRP_PERR       :  1 ; /* bits 7:7 */
    cs_uint16 E_RXF_SHRT_PKT       :  1 ; /* bits 6:6 */
    cs_uint16 E_RXF_PKT_EMPTY      :  1 ; /* bits 5:5 */
    cs_uint16 E_RXF_PKT_GIANT      :  1 ; /* bits 4:4 */
    cs_uint16 E_RXF_RUNT           :  1 ; /* bits 3:3 */
    cs_uint16 E_RXF_ERR            :  1 ; /* bits 2:2 */
    cs_uint16 E_RXF_PROT_ERR       :  1 ; /* bits 1:1 */
    cs_uint16 E_RXF_DPERR          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E_RXF_DPERR          :  1 ; /* bits 0:0 */
    cs_uint16 E_RXF_PROT_ERR       :  1 ; /* bits 1:1 */
    cs_uint16 E_RXF_ERR            :  1 ; /* bits 2:2 */
    cs_uint16 E_RXF_RUNT           :  1 ; /* bits 3:3 */
    cs_uint16 E_RXF_PKT_GIANT      :  1 ; /* bits 4:4 */
    cs_uint16 E_RXF_PKT_EMPTY      :  1 ; /* bits 5:5 */
    cs_uint16 E_RXF_SHRT_PKT       :  1 ; /* bits 6:6 */
    cs_uint16 E_RXF_SRP_PERR       :  1 ; /* bits 7:7 */
    cs_uint16 E_RXF_CTRL_PERR      :  1 ; /* bits 8:8 */
    cs_uint16 E_TXF_STSIG_ERR      :  1 ; /* bits 9:9 */
    cs_uint16 E_RXF_FIFO_OVFL      :  1 ; /* bits 10:10 */
    cs_uint16 E_RXF_IDLE_SA        :  1 ; /* bits 11:11 */
    cs_uint16 E_RX_HEC_ERR         :  1 ; /* bits 12:12 */
    cs_uint16 E_RX_CRC_ERR         :  1 ; /* bits 13:13 */
    cs_uint16 E_RX_TIMER           :  1 ; /* bits 14:14 */
    cs_uint16 E_RX_TRAF            :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_ENAB1_t;

#define DR_MICRO_IF_IRQ_STAT1                    0x10017
#define DR_MICRO_IF_IRQ_STAT1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ST_RX_TRAF           :  1 ; /* bits 15:15 */
    cs_uint16 ST_RX_TIMER          :  1 ; /* bits 14:14 */
    cs_uint16 ST_RX_CRC_ERR        :  1 ; /* bits 13:13 */
    cs_uint16 ST_RX_HEC_ERR        :  1 ; /* bits 12:12 */
    cs_uint16 ST_RXF_IDLE_SA       :  1 ; /* bits 11:11 */
    cs_uint16 ST_RXF_FIFO_OVFL     :  1 ; /* bits 10:10 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 ST_RXF_CTRL_PERR     :  1 ; /* bits 8:8 */
    cs_uint16 ST_RXF_SRP_PERR      :  1 ; /* bits 7:7 */
    cs_uint16 ST_RXF_SHRT_PKT      :  1 ; /* bits 6:6 */
    cs_uint16 ST_RXF_PKT_EMPTY     :  1 ; /* bits 5:5 */
    cs_uint16 ST_RXF_PKT_GIANT     :  1 ; /* bits 4:4 */
    cs_uint16 ST_RXF_RUNT          :  1 ; /* bits 3:3 */
    cs_uint16 ST_RXF_ERR           :  1 ; /* bits 2:2 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 ST_RXF_DPERR         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ST_RXF_DPERR         :  1 ; /* bits 0:0 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 ST_RXF_ERR           :  1 ; /* bits 2:2 */
    cs_uint16 ST_RXF_RUNT          :  1 ; /* bits 3:3 */
    cs_uint16 ST_RXF_PKT_GIANT     :  1 ; /* bits 4:4 */
    cs_uint16 ST_RXF_PKT_EMPTY     :  1 ; /* bits 5:5 */
    cs_uint16 ST_RXF_SHRT_PKT      :  1 ; /* bits 6:6 */
    cs_uint16 ST_RXF_SRP_PERR      :  1 ; /* bits 7:7 */
    cs_uint16 ST_RXF_CTRL_PERR     :  1 ; /* bits 8:8 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 ST_RXF_FIFO_OVFL     :  1 ; /* bits 10:10 */
    cs_uint16 ST_RXF_IDLE_SA       :  1 ; /* bits 11:11 */
    cs_uint16 ST_RX_HEC_ERR        :  1 ; /* bits 12:12 */
    cs_uint16 ST_RX_CRC_ERR        :  1 ; /* bits 13:13 */
    cs_uint16 ST_RX_TIMER          :  1 ; /* bits 14:14 */
    cs_uint16 ST_RX_TRAF           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_STAT1_t;

#define DR_MICRO_IF_MEMPAR1                      0x10018
#define DR_MICRO_IF_MEMPAR1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MATE_FIFO            :  1 ; /* bits 15:15 */
    cs_uint16 USEQ_IRAM            :  1 ; /* bits 14:14 */
    cs_uint16 MAC_REW_F            :  1 ; /* bits 13:13 */
    cs_uint16 MAC_REW_E            :  1 ; /* bits 12:12 */
    cs_uint16 USEQ_MCHK_F          :  1 ; /* bits 11:11 */
    cs_uint16 USEQ_MCHK_E          :  1 ; /* bits 10:10 */
    cs_uint16 STAT_ACCT_F          :  1 ; /* bits 9:9 */
    cs_uint16 STAT_ACCT_E          :  1 ; /* bits 8:8 */
    cs_uint16 LKP_ACCT_F           :  1 ; /* bits 7:7 */
    cs_uint16 LKP_ACCT_E           :  1 ; /* bits 6:6 */
    cs_uint16 CTL_RCV_F            :  1 ; /* bits 5:5 */
    cs_uint16 CTL_RCV_E            :  1 ; /* bits 4:4 */
    cs_uint16 CTL_SEND_F           :  1 ; /* bits 3:3 */
    cs_uint16 CTL_SEND_E           :  1 ; /* bits 2:2 */
    cs_uint16 IPS_RCV_F            :  1 ; /* bits 1:1 */
    cs_uint16 IPS_RCV_E            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_E            :  1 ; /* bits 0:0 */
    cs_uint16 IPS_RCV_F            :  1 ; /* bits 1:1 */
    cs_uint16 CTL_SEND_E           :  1 ; /* bits 2:2 */
    cs_uint16 CTL_SEND_F           :  1 ; /* bits 3:3 */
    cs_uint16 CTL_RCV_E            :  1 ; /* bits 4:4 */
    cs_uint16 CTL_RCV_F            :  1 ; /* bits 5:5 */
    cs_uint16 LKP_ACCT_E           :  1 ; /* bits 6:6 */
    cs_uint16 LKP_ACCT_F           :  1 ; /* bits 7:7 */
    cs_uint16 STAT_ACCT_E          :  1 ; /* bits 8:8 */
    cs_uint16 STAT_ACCT_F          :  1 ; /* bits 9:9 */
    cs_uint16 USEQ_MCHK_E          :  1 ; /* bits 10:10 */
    cs_uint16 USEQ_MCHK_F          :  1 ; /* bits 11:11 */
    cs_uint16 MAC_REW_E            :  1 ; /* bits 12:12 */
    cs_uint16 MAC_REW_F            :  1 ; /* bits 13:13 */
    cs_uint16 USEQ_IRAM            :  1 ; /* bits 14:14 */
    cs_uint16 MATE_FIFO            :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_MEMPAR1_t;

#define DR_MICRO_IF_IRQ0                         0x10019
#define DR_MICRO_IF_IRQ0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_OVERFLOW         :  1 ; /* bits 15:15 */
    cs_uint16 RXH_GIANT            :  1 ; /* bits 14:14 */
    cs_uint16 RXH_PKTDROP          :  1 ; /* bits 13:13 */
    cs_uint16 RXH_DROPSAT          :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TXH_FIFO_OVFL        :  1 ; /* bits 10:10 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 TXH_CTRL_PERR        :  1 ; /* bits 8:8 */
    cs_uint16 TXH_SRP_PERR         :  1 ; /* bits 7:7 */
    cs_uint16 TXH_SHRT_PKT         :  1 ; /* bits 6:6 */
    cs_uint16 TXH_PKT_EMPTY        :  1 ; /* bits 5:5 */
    cs_uint16 TXH_PKT_GIANT        :  1 ; /* bits 4:4 */
    cs_uint16 TXH_RUNT             :  1 ; /* bits 3:3 */
    cs_uint16 TXH_ERR              :  1 ; /* bits 2:2 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 TXH_DPERR            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_DPERR            :  1 ; /* bits 0:0 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 TXH_ERR              :  1 ; /* bits 2:2 */
    cs_uint16 TXH_RUNT             :  1 ; /* bits 3:3 */
    cs_uint16 TXH_PKT_GIANT        :  1 ; /* bits 4:4 */
    cs_uint16 TXH_PKT_EMPTY        :  1 ; /* bits 5:5 */
    cs_uint16 TXH_SHRT_PKT         :  1 ; /* bits 6:6 */
    cs_uint16 TXH_SRP_PERR         :  1 ; /* bits 7:7 */
    cs_uint16 TXH_CTRL_PERR        :  1 ; /* bits 8:8 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 TXH_FIFO_OVFL        :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RXH_DROPSAT          :  1 ; /* bits 12:12 */
    cs_uint16 RXH_PKTDROP          :  1 ; /* bits 13:13 */
    cs_uint16 RXH_GIANT            :  1 ; /* bits 14:14 */
    cs_uint16 RXH_OVERFLOW         :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ0_t;

#define DR_MICRO_IF_IRQ_ENAB0                    0x1001a
#define DR_MICRO_IF_IRQ_ENAB0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 E_RXH_OVERFLOW       :  1 ; /* bits 15:15 */
    cs_uint16 E_RXH_GIANT          :  1 ; /* bits 14:14 */
    cs_uint16 E_RXH_PKTDROP        :  1 ; /* bits 13:13 */
    cs_uint16 E_RXH_DROPSAT        :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 E_TXH_FIFO_OVFL      :  1 ; /* bits 10:10 */
    cs_uint16 E_RXH_STSIG_ERR      :  1 ; /* bits 9:9 */
    cs_uint16 E_TXH_CTRL_PERR      :  1 ; /* bits 8:8 */
    cs_uint16 E_TXH_SRP_PERR       :  1 ; /* bits 7:7 */
    cs_uint16 E_TXH_SHRT_PKT       :  1 ; /* bits 6:6 */
    cs_uint16 E_TXH_PKT_EMPTY      :  1 ; /* bits 5:5 */
    cs_uint16 E_TXH_PKT_GIANT      :  1 ; /* bits 4:4 */
    cs_uint16 E_TXH_RUNT           :  1 ; /* bits 3:3 */
    cs_uint16 E_TXH_ERR            :  1 ; /* bits 2:2 */
    cs_uint16 E_TXH_PROT_ERR       :  1 ; /* bits 1:1 */
    cs_uint16 E_TXH_DPERR          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 E_TXH_DPERR          :  1 ; /* bits 0:0 */
    cs_uint16 E_TXH_PROT_ERR       :  1 ; /* bits 1:1 */
    cs_uint16 E_TXH_ERR            :  1 ; /* bits 2:2 */
    cs_uint16 E_TXH_RUNT           :  1 ; /* bits 3:3 */
    cs_uint16 E_TXH_PKT_GIANT      :  1 ; /* bits 4:4 */
    cs_uint16 E_TXH_PKT_EMPTY      :  1 ; /* bits 5:5 */
    cs_uint16 E_TXH_SHRT_PKT       :  1 ; /* bits 6:6 */
    cs_uint16 E_TXH_SRP_PERR       :  1 ; /* bits 7:7 */
    cs_uint16 E_TXH_CTRL_PERR      :  1 ; /* bits 8:8 */
    cs_uint16 E_RXH_STSIG_ERR      :  1 ; /* bits 9:9 */
    cs_uint16 E_TXH_FIFO_OVFL      :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 E_RXH_DROPSAT        :  1 ; /* bits 12:12 */
    cs_uint16 E_RXH_PKTDROP        :  1 ; /* bits 13:13 */
    cs_uint16 E_RXH_GIANT          :  1 ; /* bits 14:14 */
    cs_uint16 E_RXH_OVERFLOW       :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_ENAB0_t;

#define DR_MICRO_IF_IRQ_STAT0                    0x1001b
#define DR_MICRO_IF_IRQ_STAT0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ST_RXH_OVERFLOW      :  1 ; /* bits 15:15 */
    cs_uint16 ST_RXH_GIANT         :  1 ; /* bits 14:14 */
    cs_uint16 ST_RXH_PKTDROP       :  1 ; /* bits 13:13 */
    cs_uint16 ST_RXH_DROPSAT       :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ST_TXH_FIFO_OVFL     :  1 ; /* bits 10:10 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 ST_TXH_CTRL_PERR     :  1 ; /* bits 8:8 */
    cs_uint16 ST_TXH_SRP_PERR      :  1 ; /* bits 7:7 */
    cs_uint16 ST_TXH_SHRT_PKT      :  1 ; /* bits 6:6 */
    cs_uint16 ST_TXH_PKT_EMPTY     :  1 ; /* bits 5:5 */
    cs_uint16 ST_TXH_PKT_GIANT     :  1 ; /* bits 4:4 */
    cs_uint16 ST_TXH_RUNT          :  1 ; /* bits 3:3 */
    cs_uint16 ST_TXH_ERR           :  1 ; /* bits 2:2 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 ST_TXH_DPERR         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ST_TXH_DPERR         :  1 ; /* bits 0:0 */
    cs_uint16 RESERVED2            :  1 ; /* bits 1:1 */
    cs_uint16 ST_TXH_ERR           :  1 ; /* bits 2:2 */
    cs_uint16 ST_TXH_RUNT          :  1 ; /* bits 3:3 */
    cs_uint16 ST_TXH_PKT_GIANT     :  1 ; /* bits 4:4 */
    cs_uint16 ST_TXH_PKT_EMPTY     :  1 ; /* bits 5:5 */
    cs_uint16 ST_TXH_SHRT_PKT      :  1 ; /* bits 6:6 */
    cs_uint16 ST_TXH_SRP_PERR      :  1 ; /* bits 7:7 */
    cs_uint16 ST_TXH_CTRL_PERR     :  1 ; /* bits 8:8 */
    cs_uint16 RESERVED1            :  1 ; /* bits 9:9 */
    cs_uint16 ST_TXH_FIFO_OVFL     :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ST_RXH_DROPSAT       :  1 ; /* bits 12:12 */
    cs_uint16 ST_RXH_PKTDROP       :  1 ; /* bits 13:13 */
    cs_uint16 ST_RXH_GIANT         :  1 ; /* bits 14:14 */
    cs_uint16 ST_RXH_OVERFLOW      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQ_STAT0_t;

#define DR_MICRO_IF_MEMPAR0                      0x1001c
#define DR_MICRO_IF_MEMPAR0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 STAT_STAT            :  1 ; /* bits 13:13 */
    cs_uint16 LKP_STAT             :  1 ; /* bits 12:12 */
    cs_uint16 TXH_SYNC             :  1 ; /* bits 11:11 */
    cs_uint16 RXF_SYNC             :  1 ; /* bits 10:10 */
    cs_uint16 TB_STQ               :  1 ; /* bits 9:9 */
    cs_uint16 TB_PTQ               :  1 ; /* bits 8:8 */
    cs_uint16 MATE_TOMSYNC         :  1 ; /* bits 7:7 */
    cs_uint16 MATE_TOMIN           :  1 ; /* bits 6:6 */
    cs_uint16 MATE_FRMSYNC         :  1 ; /* bits 5:5 */
    cs_uint16 MATE_FRMSPI          :  1 ; /* bits 4:4 */
    cs_uint16 RXH_DRPCNT           :  1 ; /* bits 3:3 */
    cs_uint16 TXH_RUNT             :  1 ; /* bits 2:2 */
    cs_uint16 RXF_RUNT             :  1 ; /* bits 1:1 */
    cs_uint16 IPS_SEND             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SEND             :  1 ; /* bits 0:0 */
    cs_uint16 RXF_RUNT             :  1 ; /* bits 1:1 */
    cs_uint16 TXH_RUNT             :  1 ; /* bits 2:2 */
    cs_uint16 RXH_DRPCNT           :  1 ; /* bits 3:3 */
    cs_uint16 MATE_FRMSPI          :  1 ; /* bits 4:4 */
    cs_uint16 MATE_FRMSYNC         :  1 ; /* bits 5:5 */
    cs_uint16 MATE_TOMIN           :  1 ; /* bits 6:6 */
    cs_uint16 MATE_TOMSYNC         :  1 ; /* bits 7:7 */
    cs_uint16 TB_PTQ               :  1 ; /* bits 8:8 */
    cs_uint16 TB_STQ               :  1 ; /* bits 9:9 */
    cs_uint16 RXF_SYNC             :  1 ; /* bits 10:10 */
    cs_uint16 TXH_SYNC             :  1 ; /* bits 11:11 */
    cs_uint16 LKP_STAT             :  1 ; /* bits 12:12 */
    cs_uint16 STAT_STAT            :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_MEMPAR0_t;

#define DR_MICRO_IF_IRQMAP                       0x1001d
#define DR_MICRO_IF_IRQMAP_dft                   0x0004
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 IRQ5                 :  1 ; /* bits 5:5 */
    cs_uint16 IRQ4                 :  1 ; /* bits 4:4 */
    cs_uint16 IRQ3                 :  1 ; /* bits 3:3 */
    cs_uint16 IRQ2                 :  1 ; /* bits 2:2 */
    cs_uint16 IRQ1                 :  1 ; /* bits 1:1 */
    cs_uint16 IRQ0                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IRQ0                 :  1 ; /* bits 0:0 */
    cs_uint16 IRQ1                 :  1 ; /* bits 1:1 */
    cs_uint16 IRQ2                 :  1 ; /* bits 2:2 */
    cs_uint16 IRQ3                 :  1 ; /* bits 3:3 */
    cs_uint16 IRQ4                 :  1 ; /* bits 4:4 */
    cs_uint16 IRQ5                 :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_IRQMAP_t;

#define DR_MICRO_IF_CR6                          0x1001f
#define DR_MICRO_IF_CR6_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 ECCFIX_FALT          :  1 ; /* bits 7:7 */
    cs_uint16 EXTTB_PRTY_FALT      :  1 ; /* bits 6:6 */
    cs_uint16 KILL_ALL_PTQ         :  1 ; /* bits 5:5 */
    cs_uint16 KILL_S_PTQ           :  1 ; /* bits 4:4 */
    cs_uint16 KILL_WRI_PTQ         :  1 ; /* bits 3:3 */
    cs_uint16 KILL_ALL_STQ         :  1 ; /* bits 2:2 */
    cs_uint16 KILL_S_STQ           :  1 ; /* bits 1:1 */
    cs_uint16 KILL_WRI_STQ         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 KILL_WRI_STQ         :  1 ; /* bits 0:0 */
    cs_uint16 KILL_S_STQ           :  1 ; /* bits 1:1 */
    cs_uint16 KILL_ALL_STQ         :  1 ; /* bits 2:2 */
    cs_uint16 KILL_WRI_PTQ         :  1 ; /* bits 3:3 */
    cs_uint16 KILL_S_PTQ           :  1 ; /* bits 4:4 */
    cs_uint16 KILL_ALL_PTQ         :  1 ; /* bits 5:5 */
    cs_uint16 EXTTB_PRTY_FALT      :  1 ; /* bits 6:6 */
    cs_uint16 ECCFIX_FALT          :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_CR6_t;

#define DR_MICRO_IF_SRESET                       0x10020
#define DR_MICRO_IF_SRESET_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 MATE_RST             :  1 ; /* bits 3:3 */
    cs_uint16 STICKY_RESET         :  1 ; /* bits 2:2 */
    cs_uint16 RINGMAC_RST          :  1 ; /* bits 1:1 */
    cs_uint16 USEQ_RST             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 USEQ_RST             :  1 ; /* bits 0:0 */
    cs_uint16 RINGMAC_RST          :  1 ; /* bits 1:1 */
    cs_uint16 STICKY_RESET         :  1 ; /* bits 2:2 */
    cs_uint16 MATE_RST             :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_SRESET_t;

#define DR_MICRO_IF_CR2                          0x10024
#define DR_MICRO_IF_CR2_dft                      0x2400
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ACCEPT_WRAP_MULTICAST :  1 ; /* bits 15:15 */
    cs_uint16 ACCEPT_WRAP_UNICAST  :  1 ; /* bits 14:14 */
    cs_uint16 SET_WS               :  1 ; /* bits 13:13 */
    cs_uint16 TTL                  :  2 ; /* bits 12:11 */
    cs_uint16 PRI                  :  3 ; /* bits 10:8 */
    cs_uint16 TX_CRC_OFF           :  1 ; /* bits 7:7 */
    cs_uint16 RX_CRC_OFF           :  1 ; /* bits 6:6 */
    cs_uint16 CHK_RING_ID          :  1 ; /* bits 5:5 */
    cs_uint16 RING_ID              :  1 ; /* bits 4:4 */
    cs_uint16 SAA_MODE             :  1 ; /* bits 3:3 */
    cs_uint16 TB_T_OFF             :  1 ; /* bits 2:2 */
    cs_uint16 IRQ_ENB              :  1 ; /* bits 1:1 */
    cs_uint16 NO_HOST_HW_FLOW_CTL  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NO_HOST_HW_FLOW_CTL  :  1 ; /* bits 0:0 */
    cs_uint16 IRQ_ENB              :  1 ; /* bits 1:1 */
    cs_uint16 TB_T_OFF             :  1 ; /* bits 2:2 */
    cs_uint16 SAA_MODE             :  1 ; /* bits 3:3 */
    cs_uint16 RING_ID              :  1 ; /* bits 4:4 */
    cs_uint16 CHK_RING_ID          :  1 ; /* bits 5:5 */
    cs_uint16 RX_CRC_OFF           :  1 ; /* bits 6:6 */
    cs_uint16 TX_CRC_OFF           :  1 ; /* bits 7:7 */
    cs_uint16 PRI                  :  3 ; /* bits 10:8 */
    cs_uint16 TTL                  :  2 ; /* bits 12:11 */
    cs_uint16 SET_WS               :  1 ; /* bits 13:13 */
    cs_uint16 ACCEPT_WRAP_UNICAST  :  1 ; /* bits 14:14 */
    cs_uint16 ACCEPT_WRAP_MULTICAST :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_CR2_t;
#define     TTL_TTL_DEC_ALWAYS                            0x00
#define     TTL_TTL_DEC_RINGID                            0x01
#define     TTL_TTL_DEC_RINGID_OR_WRAP                    0x02
#define     TTL_TTL_DEC_NEVER                             0x03

#define DR_MICRO_IF_CR1                          0x10025
#define DR_MICRO_IF_CR1_dft                      0x300b
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRIP_WE             :  1 ; /* bits 15:15 */
    cs_uint16 LP_TH_BNDRY          :  3 ; /* bits 14:12 */
    cs_uint16 MULTI_MATCH          :  1 ; /* bits 11:11 */
    cs_uint16 MAC_SA_PKT           :  1 ; /* bits 10:10 */
    cs_uint16 MAC_REWRITE          :  2 ; /* bits 9:8 */
    cs_uint16 SNIFF_D_SEL          :  2 ; /* bits 7:6 */
    cs_uint16 HW_WRAP_OFF          :  1 ; /* bits 5:5 */
    cs_uint16 HW_WRAP_ON           :  1 ; /* bits 4:4 */
    cs_uint16 HW_PASS_OFF          :  1 ; /* bits 3:3 */
    cs_uint16 HW_PASS_ON           :  1 ; /* bits 2:2 */
    cs_uint16 LO_RATE_OFF          :  1 ; /* bits 1:1 */
    cs_uint16 HI_RATE_OFF          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_RATE_OFF          :  1 ; /* bits 0:0 */
    cs_uint16 LO_RATE_OFF          :  1 ; /* bits 1:1 */
    cs_uint16 HW_PASS_ON           :  1 ; /* bits 2:2 */
    cs_uint16 HW_PASS_OFF          :  1 ; /* bits 3:3 */
    cs_uint16 HW_WRAP_ON           :  1 ; /* bits 4:4 */
    cs_uint16 HW_WRAP_OFF          :  1 ; /* bits 5:5 */
    cs_uint16 SNIFF_D_SEL          :  2 ; /* bits 7:6 */
    cs_uint16 MAC_REWRITE          :  2 ; /* bits 9:8 */
    cs_uint16 MAC_SA_PKT           :  1 ; /* bits 10:10 */
    cs_uint16 MULTI_MATCH          :  1 ; /* bits 11:11 */
    cs_uint16 LP_TH_BNDRY          :  3 ; /* bits 14:12 */
    cs_uint16 STRIP_WE             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_CR1_t;
#define     MAC_REWRITE_MACRW_OFF                         0x00
#define     MAC_REWRITE_MACRW_PSRP                        0x01
#define     MAC_REWRITE_MACRW_RSVD1                       0x02
#define     MAC_REWRITE_MACRW_RSVD2                       0x03
#define     SNIFF_D_SEL_SNIFF_SEND_ALL                    0x00
#define     SNIFF_D_SEL_SNIFF_SEND_DA                     0x01
#define     SNIFF_D_SEL_SNIFF_SEND_SA                     0x02
#define     SNIFF_D_SEL_SNIFF_SEND_DA_SA                  0x03

#define DR_MICRO_IF_CR0                          0x10026
#define DR_MICRO_IF_CR0_dft                      0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 HECMSB               :  1 ; /* bits 13:13 */
    cs_uint16 ONETB                :  1 ; /* bits 12:12 */
    cs_uint16 CONSERV              :  1 ; /* bits 11:11 */
    cs_uint16 ACCEPT_FLOOD         :  1 ; /* bits 10:10 */
    cs_uint16 ULEN                 :  4 ; /* bits 9:6 */
    cs_uint16 RPRMODE              :  1 ; /* bits 5:5 */
    cs_uint16 UTYPE                :  1 ; /* bits 4:4 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 3:3 */
    cs_uint16 MODE                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MODE                 :  3 ; /* bits 2:0 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 3:3 */
    cs_uint16 UTYPE                :  1 ; /* bits 4:4 */
    cs_uint16 RPRMODE              :  1 ; /* bits 5:5 */
    cs_uint16 ULEN                 :  4 ; /* bits 9:6 */
    cs_uint16 ACCEPT_FLOOD         :  1 ; /* bits 10:10 */
    cs_uint16 CONSERV              :  1 ; /* bits 11:11 */
    cs_uint16 ONETB                :  1 ; /* bits 12:12 */
    cs_uint16 HECMSB               :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_CR0_t;
#define     MODE_NORMAL                                   0x00
#define     MODE_PASSTHROUGH                              0x01
#define     MODE_WRAP                                     0x02
#define     MODE_TRANSPARENT                              0x03
#define     MODE_SNIFFER_PASSIVE                          0x04
#define     MODE_SNIFFER_ACTIVE                           0x05

#define DR_MICRO_IF_SRP_HDR                      0x10028
#define DR_MICRO_IF_SRP_HDR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 WR_TTL               :  1 ; /* bits 8:8 */
    cs_uint16 SRP_TTL              :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SRP_TTL              :  8 ; /* bits 7:0 */
    cs_uint16 WR_TTL               :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_SRP_HDR_t;

#define DR_MICRO_IF_FMRO_SEL                     0x100e0
#define DR_MICRO_IF_FMRO_SEL_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FMRO_SEL_VIEW1       :  8 ; /* bits 15:8 */
    cs_uint16 FMRO_SEL_VIEW0       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FMRO_SEL_VIEW0       :  8 ; /* bits 7:0 */
    cs_uint16 FMRO_SEL_VIEW1       :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_FMRO_SEL_t;

#define DR_MICRO_IF_DIAG_CR                      0x100e1
#define DR_MICRO_IF_DIAG_CR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DISABLE_DEBUG_IO     :  1 ; /* bits 15:15 */
    cs_uint16 HTB_PRTY_FALT        :  1 ; /* bits 14:14 */
    cs_uint16 LTB_PRTY_FALT        :  1 ; /* bits 13:13 */
    cs_uint16 CONST                :  1 ; /* bits 12:12 */
    cs_uint16 RXF_TO_TOM           :  1 ; /* bits 11:11 */
    cs_uint16 RXF_TO_RXH           :  1 ; /* bits 10:10 */
    cs_uint16 FRM_TO_TOM           :  1 ; /* bits 9:9 */
    cs_uint16 TOM_TO_FRM           :  1 ; /* bits 8:8 */
    cs_uint16 TXH_TO_RXH           :  1 ; /* bits 7:7 */
    cs_uint16 TXF_TO_RXF           :  1 ; /* bits 6:6 */
    cs_uint16 RXH_PRTY_FALT        :  2 ; /* bits 5:4 */
    cs_uint16 TXF_PRTY_FALT        :  2 ; /* bits 3:2 */
    cs_uint16 TX_CRC_FALT          :  1 ; /* bits 1:1 */
    cs_uint16 USEQ_CRC_FALT        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 USEQ_CRC_FALT        :  1 ; /* bits 0:0 */
    cs_uint16 TX_CRC_FALT          :  1 ; /* bits 1:1 */
    cs_uint16 TXF_PRTY_FALT        :  2 ; /* bits 3:2 */
    cs_uint16 RXH_PRTY_FALT        :  2 ; /* bits 5:4 */
    cs_uint16 TXF_TO_RXF           :  1 ; /* bits 6:6 */
    cs_uint16 TXH_TO_RXH           :  1 ; /* bits 7:7 */
    cs_uint16 TOM_TO_FRM           :  1 ; /* bits 8:8 */
    cs_uint16 FRM_TO_TOM           :  1 ; /* bits 9:9 */
    cs_uint16 RXF_TO_RXH           :  1 ; /* bits 10:10 */
    cs_uint16 RXF_TO_TOM           :  1 ; /* bits 11:11 */
    cs_uint16 CONST                :  1 ; /* bits 12:12 */
    cs_uint16 LTB_PRTY_FALT        :  1 ; /* bits 13:13 */
    cs_uint16 HTB_PRTY_FALT        :  1 ; /* bits 14:14 */
    cs_uint16 DISABLE_DEBUG_IO     :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_DIAG_CR_t;
#define     RXH_PRTY_FALT_RX_PRTY_NO_TOUCH                0x00
#define     RXH_PRTY_FALT_RX_PRTY_DATA                    0x01
#define     RXH_PRTY_FALT_RX_PRTY_CONTROL                 0x02
#define     RXH_PRTY_FALT_RX_PRTY_BOTH                    0x03
#define     TXF_PRTY_FALT_TX_PRTY_NO_TOUCH                0x00
#define     TXF_PRTY_FALT_TX_PRTY_DATA                    0x01
#define     TXF_PRTY_FALT_TX_PRTY_CONTROL                 0x02
#define     TXF_PRTY_FALT_TX_PRTY_BOTH                    0x03

#define DR_MICRO_IF_MODE_SLEW                    0x100e2
#define DR_MICRO_IF_MODE_SLEW_dft                0x3355
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DEBUG_MODE           :  1 ; /* bits 15:15 */
    cs_uint16 DEBUG_SLEW           :  3 ; /* bits 14:12 */
    cs_uint16 TOM_MODE             :  1 ; /* bits 11:11 */
    cs_uint16 TOM_SLEW             :  3 ; /* bits 10:8 */
    cs_uint16 TXF_MODE             :  1 ; /* bits 7:7 */
    cs_uint16 TXF_SLEW             :  3 ; /* bits 6:4 */
    cs_uint16 RXH_MODE             :  1 ; /* bits 3:3 */
    cs_uint16 RXH_SLEW             :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_SLEW             :  3 ; /* bits 2:0 */
    cs_uint16 RXH_MODE             :  1 ; /* bits 3:3 */
    cs_uint16 TXF_SLEW             :  3 ; /* bits 6:4 */
    cs_uint16 TXF_MODE             :  1 ; /* bits 7:7 */
    cs_uint16 TOM_SLEW             :  3 ; /* bits 10:8 */
    cs_uint16 TOM_MODE             :  1 ; /* bits 11:11 */
    cs_uint16 DEBUG_SLEW           :  3 ; /* bits 14:12 */
    cs_uint16 DEBUG_MODE           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_MODE_SLEW_t;

#define DR_MICRO_IF_LOCK                         0x100e8
#define DR_MICRO_IF_LOCK_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LOCK                 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOCK                 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_LOCK_t;
#define     LOCK_LOCK                                     0x00
#define     LOCK_UNLOCK                                   0xdead

#define DR_MICRO_IF_WDOG_CR                      0x100f8
#define DR_MICRO_IF_WDOG_CR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 WDLOCK               :  4 ; /* bits 7:4 */
    cs_uint16 WDENB                :  1 ; /* bits 3:3 */
    cs_uint16 WDKICK               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 WDKICK               :  3 ; /* bits 2:0 */
    cs_uint16 WDENB                :  1 ; /* bits 3:3 */
    cs_uint16 WDLOCK               :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_WDOG_CR_t;

#define DR_MICRO_IF_WDVAL1                       0x100f9
#define DR_MICRO_IF_WDVAL1_dft                   0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 WDVAL1               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 WDVAL1               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_WDVAL1_t;

#define DR_MICRO_IF_WDVAL0                       0x100fa
#define DR_MICRO_IF_WDVAL0_dft                   0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 WDVAL0               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 WDVAL0               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_WDVAL0_t;

#define DR_MICRO_IF_MODE_OP                      0x100fb
#define DR_MICRO_IF_MODE_OP_dft                  0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 SNIFF_ACT            :  1 ; /* bits 5:5 */
    cs_uint16 SNIFF_PASS           :  1 ; /* bits 4:4 */
    cs_uint16 TRANS                :  1 ; /* bits 3:3 */
    cs_uint16 WRAP                 :  1 ; /* bits 2:2 */
    cs_uint16 PASS                 :  1 ; /* bits 1:1 */
    cs_uint16 NORM                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NORM                 :  1 ; /* bits 0:0 */
    cs_uint16 PASS                 :  1 ; /* bits 1:1 */
    cs_uint16 WRAP                 :  1 ; /* bits 2:2 */
    cs_uint16 TRANS                :  1 ; /* bits 3:3 */
    cs_uint16 SNIFF_PASS           :  1 ; /* bits 4:4 */
    cs_uint16 SNIFF_ACT            :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_MODE_OP_t;

#define DR_MICRO_IF_GRAM_CR                      0x10180
#define DR_MICRO_IF_GRAM_CR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SEL                  :  4 ; /* bits 15:12 */
    cs_uint16 GRWN                 :  1 ; /* bits 11:11 */
    cs_uint16 GRAM_A               : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GRAM_A               : 11 ; /* bits 10:0 */
    cs_uint16 GRWN                 :  1 ; /* bits 11:11 */
    cs_uint16 SEL                  :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_GRAM_CR_t;
#define     SEL_LOOKUP_CAM                                0x00
#define     SEL_LOOKUP_STATUS                             0x01
#define     SEL_LOOKUP_ACCT_SRC                           0x02
#define     SEL_LOOKUP_ACCT_DST                           0x03
#define     SEL_STAT_CAM                                  0x04
#define     SEL_STAT_STATUS                               0x05
#define     SEL_STAT_ACCT_SRC                             0x06
#define     SEL_STAT_ACCT_DST                             0x07
#define     SEL_USEQ_DC_STORE                             0x08
#define     SEL_USEQ_PGM_STORE                            0x09
#define     SEL_LKP_COARSE_CAM                            0x0a
#define     SEL_MACREW_IDX_RAM                            0x0b
#define     SEL_USEQ_MCHOKE_RAM                           0x0c
#define     SEL_HOST_PKT_DROP_CAM                         0x0d
#define     SEL_HOST_PKT_DROP_CNTRS                       0x0e
#define     SEL_RSVD                                      0x0f
#define     GRWN_WRITE                                    0x00
#define     GRWN_READ                                     0x01

#define DR_MICRO_IF_GRAM_D5                      0x10181
#define DR_MICRO_IF_GRAM_D5_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GRAM_D5              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GRAM_D5              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_GRAM_D5_t;

#define DR_MICRO_IF_GRAM_D4                      0x10182
#define DR_MICRO_IF_GRAM_D4_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GRAM_D4              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GRAM_D4              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_GRAM_D4_t;

#define DR_MICRO_IF_GRAM_D3                      0x10183
#define DR_MICRO_IF_GRAM_D3_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GRAM_D3              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GRAM_D3              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_GRAM_D3_t;

#define DR_MICRO_IF_GRAM_D2                      0x10184
#define DR_MICRO_IF_GRAM_D2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GRAM_D2              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GRAM_D2              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_GRAM_D2_t;

#define DR_MICRO_IF_GRAM_D1                      0x10185
#define DR_MICRO_IF_GRAM_D1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GRAM_D1              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GRAM_D1              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_GRAM_D1_t;

#define DR_MICRO_IF_GRAM_D0                      0x10186
#define DR_MICRO_IF_GRAM_D0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 GRAM_D0              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GRAM_D0              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_GRAM_D0_t;

#define DR_MICRO_IF_BIST_DONE1                   0x101d2
#define DR_MICRO_IF_BIST_DONE1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 BIST_DONE1           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BIST_DONE1           : 11 ; /* bits 10:0 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_BIST_DONE1_t;

#define DR_MICRO_IF_BIST_DONE0                   0x101d3
#define DR_MICRO_IF_BIST_DONE0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BIST_DONE0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BIST_DONE0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_BIST_DONE0_t;

#define DR_MICRO_IF_BIST_FAIL1                   0x101d4
#define DR_MICRO_IF_BIST_FAIL1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 BIST_FAIL1           : 11 ; /* bits 10:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BIST_FAIL1           : 11 ; /* bits 10:0 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_BIST_FAIL1_t;

#define DR_MICRO_IF_BIST_FAIL0                   0x101d5
#define DR_MICRO_IF_BIST_FAIL0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BIST_FAIL0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BIST_FAIL0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_BIST_FAIL0_t;

#define DR_MICRO_IF_BIST_STARREADY               0x101d6
#define DR_MICRO_IF_BIST_STARREADY_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BIST_STARREADY       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BIST_STARREADY       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_BIST_STARREADY_t;

#define DR_MICRO_IF_BIST_STARERROR               0x101d7
#define DR_MICRO_IF_BIST_STARERROR_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BIST_STARERROR       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BIST_STARERROR       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_BIST_STARERROR_t;

#define DR_MICRO_IF_BIST_STARFAIL                0x101d8
#define DR_MICRO_IF_BIST_STARFAIL_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BIST_STARFAIL        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BIST_STARFAIL        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MICRO_IF_BIST_STARFAIL_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::RPR
 */

#define DR_RPR_CR2A                              0x10027
#define DR_RPR_CR2A_dft                          0x0320
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ACLASS_OFF           :  1 ; /* bits 15:15 */
    cs_uint16 RESERVED             :  1 ; /* bits 14:14 */
    cs_uint16 HIRES_CTLOFF         :  1 ; /* bits 13:13 */
    cs_uint16 HIRES_TBLO           :  1 ; /* bits 12:12 */
    cs_uint16 HIRES_HMED           :  1 ; /* bits 11:11 */
    cs_uint16 HIRES_HHI            :  1 ; /* bits 10:10 */
    cs_uint16 HIRES_OFF            :  1 ; /* bits 9:9 */
    cs_uint16 MED_PRI              :  3 ; /* bits 8:6 */
    cs_uint16 MED_RATE_OFF         :  1 ; /* bits 5:5 */
    cs_uint16 MED_IOP_OFF          :  1 ; /* bits 4:4 */
    cs_uint16 FRM_HEC_OFF          :  1 ; /* bits 3:3 */
    cs_uint16 TXH_HECINS_FRC       :  1 ; /* bits 2:2 */
    cs_uint16 TXH_HEC_OFF          :  1 ; /* bits 1:1 */
    cs_uint16 RXF_HEC_OFF          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HEC_OFF          :  1 ; /* bits 0:0 */
    cs_uint16 TXH_HEC_OFF          :  1 ; /* bits 1:1 */
    cs_uint16 TXH_HECINS_FRC       :  1 ; /* bits 2:2 */
    cs_uint16 FRM_HEC_OFF          :  1 ; /* bits 3:3 */
    cs_uint16 MED_IOP_OFF          :  1 ; /* bits 4:4 */
    cs_uint16 MED_RATE_OFF         :  1 ; /* bits 5:5 */
    cs_uint16 MED_PRI              :  3 ; /* bits 8:6 */
    cs_uint16 HIRES_OFF            :  1 ; /* bits 9:9 */
    cs_uint16 HIRES_HHI            :  1 ; /* bits 10:10 */
    cs_uint16 HIRES_HMED           :  1 ; /* bits 11:11 */
    cs_uint16 HIRES_TBLO           :  1 ; /* bits 12:12 */
    cs_uint16 HIRES_CTLOFF         :  1 ; /* bits 13:13 */
    cs_uint16 RESERVED             :  1 ; /* bits 14:14 */
    cs_uint16 ACLASS_OFF           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_CR2A_t;

#define DR_RPR_MED_TIME                          0x1003a
#define DR_RPR_MED_TIME_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MED_TIME             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MED_TIME             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_MED_TIME_t;

#define DR_RPR_MED_DELTA                         0x1003b
#define DR_RPR_MED_DELTA_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MED_DELTA            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MED_DELTA            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_MED_DELTA_t;

#define DR_RPR_MED_MAX                           0x1003c
#define DR_RPR_MED_MAX_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MED_MAX              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MED_MAX              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_MED_MAX_t;

#define DR_RPR_CTL_TIME                          0x1003d
#define DR_RPR_CTL_TIME_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_TIME             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_TIME             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_CTL_TIME_t;

#define DR_RPR_CTL_DELTA                         0x1003e
#define DR_RPR_CTL_DELTA_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_DELTA            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_DELTA            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_CTL_DELTA_t;

#define DR_RPR_CTL_MAX                           0x1003f
#define DR_RPR_CTL_MAX_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_MAX              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_MAX              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_CTL_MAX_t;

#define DR_RPR_HIRES_TIME                        0x10065
#define DR_RPR_HIRES_TIME_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HIRES_TIME           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIRES_TIME           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_HIRES_TIME_t;

#define DR_RPR_HIRES_DELTA                       0x10066
#define DR_RPR_HIRES_DELTA_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HIRES_DELTA          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIRES_DELTA          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_HIRES_DELTA_t;

#define DR_RPR_HIRES_MAX                         0x10067
#define DR_RPR_HIRES_MAX_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HIRES_MAX            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIRES_MAX            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_HIRES_MAX_t;

#define DR_RPR_HIA0_TIME                         0x10068
#define DR_RPR_HIA0_TIME_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HIA0_TIME            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIA0_TIME            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_HIA0_TIME_t;

#define DR_RPR_HIA0_DELTA                        0x10069
#define DR_RPR_HIA0_DELTA_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HIA0_DELTA           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIA0_DELTA           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_HIA0_DELTA_t;

#define DR_RPR_HIA0_MAX                          0x1006a
#define DR_RPR_HIA0_MAX_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HIA0_MAX             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIA0_MAX             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_HIA0_MAX_t;

#define DR_RPR_CRLMT                             0x1006d
#define DR_RPR_CRLMT_dft                         0x0021
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_RESET             :  1 ; /* bits 15:15 */
    cs_uint16 LO_DIS               :  1 ; /* bits 14:14 */
    cs_uint16 MED_RESET            :  1 ; /* bits 13:13 */
    cs_uint16 MED_DIS              :  1 ; /* bits 12:12 */
    cs_uint16 HI_RESET             :  1 ; /* bits 11:11 */
    cs_uint16 HI_DIS               :  1 ; /* bits 10:10 */
    cs_uint16 HIA0_RESET           :  1 ; /* bits 9:9 */
    cs_uint16 HIA0_DIS             :  1 ; /* bits 8:8 */
    cs_uint16 CTL_CLASS            :  1 ; /* bits 7:7 */
    cs_uint16 HOST_DEASSERT        :  1 ; /* bits 6:6 */
    cs_uint16 CTL_OFF              :  1 ; /* bits 5:5 */
    cs_uint16 MED_MODE             :  1 ; /* bits 4:4 */
    cs_uint16 MEDEIR_MODE          :  1 ; /* bits 3:3 */
    cs_uint16 CTLA0_CREDIT         :  1 ; /* bits 2:2 */
    cs_uint16 HI_MODE              :  1 ; /* bits 1:1 */
    cs_uint16 HIA0_OFF             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIA0_OFF             :  1 ; /* bits 0:0 */
    cs_uint16 HI_MODE              :  1 ; /* bits 1:1 */
    cs_uint16 CTLA0_CREDIT         :  1 ; /* bits 2:2 */
    cs_uint16 MEDEIR_MODE          :  1 ; /* bits 3:3 */
    cs_uint16 MED_MODE             :  1 ; /* bits 4:4 */
    cs_uint16 CTL_OFF              :  1 ; /* bits 5:5 */
    cs_uint16 HOST_DEASSERT        :  1 ; /* bits 6:6 */
    cs_uint16 CTL_CLASS            :  1 ; /* bits 7:7 */
    cs_uint16 HIA0_DIS             :  1 ; /* bits 8:8 */
    cs_uint16 HIA0_RESET           :  1 ; /* bits 9:9 */
    cs_uint16 HI_DIS               :  1 ; /* bits 10:10 */
    cs_uint16 HI_RESET             :  1 ; /* bits 11:11 */
    cs_uint16 MED_DIS              :  1 ; /* bits 12:12 */
    cs_uint16 MED_RESET            :  1 ; /* bits 13:13 */
    cs_uint16 LO_DIS               :  1 ; /* bits 14:14 */
    cs_uint16 LO_RESET             :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_CRLMT_t;

#define DR_RPR_CRLMT2                            0x1006e
#define DR_RPR_CRLMT2_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 STQ_DEASSERT         :  4 ; /* bits 7:4 */
    cs_uint16 PTQ_DEASSERT         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PTQ_DEASSERT         :  4 ; /* bits 3:0 */
    cs_uint16 STQ_DEASSERT         :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_CRLMT2_t;

#define DR_RPR_RX_HEC_ERR1                       0x101a3
#define DR_RPR_RX_HEC_ERR1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_HEC_ERR1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_HEC_ERR1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_RX_HEC_ERR1_t;

#define DR_RPR_RX_HEC_ERR0                       0x101a4
#define DR_RPR_RX_HEC_ERR0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_HEC_ERR0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_HEC_ERR0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_RX_HEC_ERR0_t;

#define DR_RPR_FRM_HEC_ERR                       0x101a6
#define DR_RPR_FRM_HEC_ERR_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRM_HEC_ERR          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_HEC_ERR          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RPR_FRM_HEC_ERR_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::framer
 */

#define DR_FRAMER_CR5                            0x10021
#define DR_FRAMER_CR5_dft                        0x0009
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_RATESHAPE        :  1 ; /* bits 15:15 */
    cs_uint16 NO_ERR_RXF_TIMER     :  1 ; /* bits 14:14 */
    cs_uint16 ERR_STOMP_HOST       :  1 ; /* bits 13:13 */
    cs_uint16 IDLESTRIP_OFF        :  1 ; /* bits 12:12 */
    cs_uint16 MCASTSA              :  1 ; /* bits 11:11 */
    cs_uint16 STOMP                :  1 ; /* bits 10:10 */
    cs_uint16 TTLZERODROP          :  1 ; /* bits 9:9 */
    cs_uint16 FRAM_EVEN_PRTY       :  1 ; /* bits 8:8 */
    cs_uint16 TXF_CHANNEL          :  2 ; /* bits 7:6 */
    cs_uint16 RESERVED             :  2 ; /* bits 5:4 */
    cs_uint16 RXF_EMPTY_PKT_FLTR_OFF :  1 ; /* bits 3:3 */
    cs_uint16 RXF_SHRT_PKT_FLTR_OFF :  1 ; /* bits 2:2 */
    cs_uint16 RXF_SRP_PRTY_CHK_OFF :  1 ; /* bits 1:1 */
    cs_uint16 RXF_CTRL_PRTY_CHK_OFF :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_PRTY_CHK_OFF :  1 ; /* bits 0:0 */
    cs_uint16 RXF_SRP_PRTY_CHK_OFF :  1 ; /* bits 1:1 */
    cs_uint16 RXF_SHRT_PKT_FLTR_OFF :  1 ; /* bits 2:2 */
    cs_uint16 RXF_EMPTY_PKT_FLTR_OFF :  1 ; /* bits 3:3 */
    cs_uint16 RESERVED             :  2 ; /* bits 5:4 */
    cs_uint16 TXF_CHANNEL          :  2 ; /* bits 7:6 */
    cs_uint16 FRAM_EVEN_PRTY       :  1 ; /* bits 8:8 */
    cs_uint16 TTLZERODROP          :  1 ; /* bits 9:9 */
    cs_uint16 STOMP                :  1 ; /* bits 10:10 */
    cs_uint16 MCASTSA              :  1 ; /* bits 11:11 */
    cs_uint16 IDLESTRIP_OFF        :  1 ; /* bits 12:12 */
    cs_uint16 ERR_STOMP_HOST       :  1 ; /* bits 13:13 */
    cs_uint16 NO_ERR_RXF_TIMER     :  1 ; /* bits 14:14 */
    cs_uint16 TXF_RATESHAPE        :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_CR5_t;

#define DR_FRAMER_RX_TIMEOUT1                    0x10040
#define DR_FRAMER_RX_TIMEOUT1_dft                0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_TIMEOUT1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_TIMEOUT1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RX_TIMEOUT1_t;

#define DR_FRAMER_RX_TIMEOUT0                    0x10041
#define DR_FRAMER_RX_TIMEOUT0_dft                0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_TIMEOUT0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_TIMEOUT0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RX_TIMEOUT0_t;

#define DR_FRAMER_RXF_FULL_ASSERT_TH             0x10042
#define DR_FRAMER_RXF_FULL_ASSERT_TH_dft         0x0030
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 RXF_FULL_ASSERT_TH   :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FULL_ASSERT_TH   :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FULL_ASSERT_TH_t;

#define DR_FRAMER_RXF_FULL_DEASSERT_TH           0x10044
#define DR_FRAMER_RXF_FULL_DEASSERT_TH_dft       0x0028
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 RXF_FULL_DEASSERT_TH :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FULL_DEASSERT_TH :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FULL_DEASSERT_TH_t;

#define DR_FRAMER_TXF_UNDRFLW_TH                 0x10047
#define DR_FRAMER_TXF_UNDRFLW_TH_dft             0x0006
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 TXF_UNDRFLW_TH       :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_UNDRFLW_TH       :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_UNDRFLW_TH_t;

#define DR_FRAMER_RXF_RUNTSZ                     0x10048
#define DR_FRAMER_RXF_RUNTSZ_dft                 0x0017
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 RXF_RUNTSZ           :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_RUNTSZ           :  7 ; /* bits 6:0 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_RUNTSZ_t;

#define DR_FRAMER_RXF_GIANTSZ                    0x1004b
#define DR_FRAMER_RXF_GIANTSZ_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 RXF_GIANTSZ          : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_GIANTSZ          : 14 ; /* bits 13:0 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_GIANTSZ_t;

#define DR_FRAMER_RXF_IDLE_SA2                   0x100c4
#define DR_FRAMER_RXF_IDLE_SA2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_IDLE_SA2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_SA2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_SA2_t;

#define DR_FRAMER_RXF_IDLE_SA1                   0x100c5
#define DR_FRAMER_RXF_IDLE_SA1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_IDLE_SA1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_SA1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_SA1_t;

#define DR_FRAMER_RXF_IDLE_SA0                   0x100c6
#define DR_FRAMER_RXF_IDLE_SA0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_IDLE_SA0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_SA0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_SA0_t;

#define DR_FRAMER_TXF_RATEMAX                    0x100dc
#define DR_FRAMER_TXF_RATEMAX_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_RATEMAX          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_RATEMAX          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_RATEMAX_t;

#define DR_FRAMER_TXF_RATETIME                   0x100dd
#define DR_FRAMER_TXF_RATETIME_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_RATETIME         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_RATETIME         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_RATETIME_t;

#define DR_FRAMER_TXF_RATEDELTA                  0x100de
#define DR_FRAMER_TXF_RATEDELTA_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_RATEDELTA        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_RATEDELTA        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_RATEDELTA_t;

#define DR_FRAMER_RXF_SHRT_PKT                   0x100fe
#define DR_FRAMER_RXF_SHRT_PKT_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_SHRT_PKT         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_SHRT_PKT         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_SHRT_PKT_t;

#define DR_FRAMER_RX_CRC_STOMP1                  0x1018e
#define DR_FRAMER_RX_CRC_STOMP1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_CRC_STOMP1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_CRC_STOMP1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RX_CRC_STOMP1_t;

#define DR_FRAMER_RX_CRC_STOMP0                  0x1018f
#define DR_FRAMER_RX_CRC_STOMP0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_CRC_STOMP0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_CRC_STOMP0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RX_CRC_STOMP0_t;

#define DR_FRAMER_RX_CRC_ERR1                    0x10190
#define DR_FRAMER_RX_CRC_ERR1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_CRC_ERR1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_CRC_ERR1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RX_CRC_ERR1_t;

#define DR_FRAMER_RX_CRC_ERR0                    0x10191
#define DR_FRAMER_RX_CRC_ERR0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_CRC_ERR0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_CRC_ERR0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RX_CRC_ERR0_t;

#define DR_FRAMER_RXF_DPERR                      0x10194
#define DR_FRAMER_RXF_DPERR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_DPERR            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_DPERR            :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_DPERR_t;

#define DR_FRAMER_RXF_SRP_PERR                   0x10196
#define DR_FRAMER_RXF_SRP_PERR_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_SRP_PERR         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_SRP_PERR         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_SRP_PERR_t;

#define DR_FRAMER_RXF_CTRL_PERR                  0x10198
#define DR_FRAMER_RXF_CTRL_PERR_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_CTRL_PERR        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_PERR        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_PERR_t;

#define DR_FRAMER_RXF_ERR                        0x1019a
#define DR_FRAMER_RXF_ERR_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_ERR              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_ERR              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_ERR_t;

#define DR_FRAMER_TXF_STSIG_ERR                  0x1019f
#define DR_FRAMER_TXF_STSIG_ERR_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_STSIG_ERR        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_STSIG_ERR        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_STSIG_ERR_t;

#define DR_FRAMER_RXF_RUNT                       0x101a1
#define DR_FRAMER_RXF_RUNT_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_RUNT             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_RUNT             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_RUNT_t;

#define DR_FRAMER_RXF_PROTPKT                    0x101a5
#define DR_FRAMER_RXF_PROTPKT_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_PROTPKT          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_PROTPKT          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_PROTPKT_t;

#define DR_FRAMER_RXF_UNI_PKT1                   0x10200
#define DR_FRAMER_RXF_UNI_PKT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_UNI_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_UNI_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_UNI_PKT1_t;

#define DR_FRAMER_RXF_UNI_PKT0                   0x10201
#define DR_FRAMER_RXF_UNI_PKT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_UNI_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_UNI_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_UNI_PKT0_t;

#define DR_FRAMER_RXF_UNI_BYTE2                  0x10202
#define DR_FRAMER_RXF_UNI_BYTE2_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_UNI_BYTE2        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_UNI_BYTE2        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_UNI_BYTE2_t;

#define DR_FRAMER_RXF_UNI_BYTE1                  0x10203
#define DR_FRAMER_RXF_UNI_BYTE1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_UNI_BYTE1_t;

#define DR_FRAMER_RXF_UNI_BYTE0                  0x10204
#define DR_FRAMER_RXF_UNI_BYTE0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_UNI_BYTE0_t;

#define DR_FRAMER_RXF_MULTI_PKT1                 0x10205
#define DR_FRAMER_RXF_MULTI_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MULTI_PKT1_t;

#define DR_FRAMER_RXF_MULTI_PKT0                 0x10206
#define DR_FRAMER_RXF_MULTI_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MULTI_PKT0_t;

#define DR_FRAMER_RXF_MULTI_BYTE2                0x10207
#define DR_FRAMER_RXF_MULTI_BYTE2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_MULTI_BYTE2      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MULTI_BYTE2      :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MULTI_BYTE2_t;

#define DR_FRAMER_RXF_MULTI_BYTE1                0x10208
#define DR_FRAMER_RXF_MULTI_BYTE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MULTI_BYTE1_t;

#define DR_FRAMER_RXF_MULTI_BYTE0                0x10209
#define DR_FRAMER_RXF_MULTI_BYTE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MULTI_BYTE0_t;

#define DR_FRAMER_RXF_HI_UNI_PKT1                0x1020a
#define DR_FRAMER_RXF_HI_UNI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_UNI_PKT1_t;

#define DR_FRAMER_RXF_HI_UNI_PKT0                0x1020b
#define DR_FRAMER_RXF_HI_UNI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_UNI_PKT0_t;

#define DR_FRAMER_RXF_HI_UNI_BYTE2               0x1020c
#define DR_FRAMER_RXF_HI_UNI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_UNI_BYTE2_t;

#define DR_FRAMER_RXF_HI_UNI_BYTE1               0x1020d
#define DR_FRAMER_RXF_HI_UNI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_UNI_BYTE1_t;

#define DR_FRAMER_RXF_HI_UNI_BYTE0               0x1020e
#define DR_FRAMER_RXF_HI_UNI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_UNI_BYTE0_t;

#define DR_FRAMER_RXF_HI_MULTI_PKT1              0x1020f
#define DR_FRAMER_RXF_HI_MULTI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_MULTI_PKT1_t;

#define DR_FRAMER_RXF_HI_MULTI_PKT0              0x10210
#define DR_FRAMER_RXF_HI_MULTI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_MULTI_PKT0_t;

#define DR_FRAMER_RXF_HI_MULTI_BYTE2             0x10211
#define DR_FRAMER_RXF_HI_MULTI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_MULTI_BYTE2_t;

#define DR_FRAMER_RXF_HI_MULTI_BYTE1             0x10212
#define DR_FRAMER_RXF_HI_MULTI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_MULTI_BYTE1_t;

#define DR_FRAMER_RXF_HI_MULTI_BYTE0             0x10213
#define DR_FRAMER_RXF_HI_MULTI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_MULTI_BYTE0_t;

#define DR_FRAMER_TXF_UNI_PKT1                   0x10214
#define DR_FRAMER_TXF_UNI_PKT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_UNI_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_UNI_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_UNI_PKT1_t;

#define DR_FRAMER_TXF_UNI_PKT0                   0x10215
#define DR_FRAMER_TXF_UNI_PKT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_UNI_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_UNI_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_UNI_PKT0_t;

#define DR_FRAMER_TXF_UNI_BYTE2                  0x10216
#define DR_FRAMER_TXF_UNI_BYTE2_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_UNI_BYTE2        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_UNI_BYTE2        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_UNI_BYTE2_t;

#define DR_FRAMER_TXF_UNI_BYTE1                  0x10217
#define DR_FRAMER_TXF_UNI_BYTE1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_UNI_BYTE1_t;

#define DR_FRAMER_TXF_UNI_BYTE0                  0x10218
#define DR_FRAMER_TXF_UNI_BYTE0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_UNI_BYTE0_t;

#define DR_FRAMER_TXF_MULTI_PKT1                 0x10219
#define DR_FRAMER_TXF_MULTI_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MULTI_PKT1_t;

#define DR_FRAMER_TXF_MULTI_PKT0                 0x1021a
#define DR_FRAMER_TXF_MULTI_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MULTI_PKT0_t;

#define DR_FRAMER_TXF_MULTI_BYTE2                0x1021b
#define DR_FRAMER_TXF_MULTI_BYTE2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_MULTI_BYTE2      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MULTI_BYTE2      :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MULTI_BYTE2_t;

#define DR_FRAMER_TXF_MULTI_BYTE1                0x1021c
#define DR_FRAMER_TXF_MULTI_BYTE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MULTI_BYTE1_t;

#define DR_FRAMER_TXF_MULTI_BYTE0                0x1021d
#define DR_FRAMER_TXF_MULTI_BYTE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MULTI_BYTE0_t;

#define DR_FRAMER_TXF_HI_UNI_PKT1                0x1021e
#define DR_FRAMER_TXF_HI_UNI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_UNI_PKT1_t;

#define DR_FRAMER_TXF_HI_UNI_PKT0                0x1021f
#define DR_FRAMER_TXF_HI_UNI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_UNI_PKT0_t;

#define DR_FRAMER_TXF_HI_UNI_BYTE2               0x10220
#define DR_FRAMER_TXF_HI_UNI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_UNI_BYTE2_t;

#define DR_FRAMER_TXF_HI_UNI_BYTE1               0x10221
#define DR_FRAMER_TXF_HI_UNI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_UNI_BYTE1_t;

#define DR_FRAMER_TXF_HI_UNI_BYTE0               0x10222
#define DR_FRAMER_TXF_HI_UNI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_UNI_BYTE0_t;

#define DR_FRAMER_TXF_HI_MULTI_PKT1              0x10223
#define DR_FRAMER_TXF_HI_MULTI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_MULTI_PKT1_t;

#define DR_FRAMER_TXF_HI_MULTI_PKT0              0x10224
#define DR_FRAMER_TXF_HI_MULTI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_MULTI_PKT0_t;

#define DR_FRAMER_TXF_HI_MULTI_BYTE2             0x10225
#define DR_FRAMER_TXF_HI_MULTI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_MULTI_BYTE2_t;

#define DR_FRAMER_TXF_HI_MULTI_BYTE1             0x10226
#define DR_FRAMER_TXF_HI_MULTI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_MULTI_BYTE1_t;

#define DR_FRAMER_TXF_HI_MULTI_BYTE0             0x10227
#define DR_FRAMER_TXF_HI_MULTI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_MULTI_BYTE0_t;

#define DR_FRAMER_RXF_GPKT_ERR                   0x10317
#define DR_FRAMER_RXF_GPKT_ERR_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_GPKT_ERR         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_GPKT_ERR         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_GPKT_ERR_t;

#define DR_FRAMER_RXF_HI_RES_UNI_PKT1            0x10318
#define DR_FRAMER_RXF_HI_RES_UNI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_UNI_PKT1_t;

#define DR_FRAMER_RXF_HI_RES_UNI_PKT0            0x10319
#define DR_FRAMER_RXF_HI_RES_UNI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_UNI_PKT0_t;

#define DR_FRAMER_RXF_HI_RES_UNI_BYTE2           0x1031a
#define DR_FRAMER_RXF_HI_RES_UNI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_UNI_BYTE2_t;

#define DR_FRAMER_RXF_HI_RES_UNI_BYTE1           0x1031b
#define DR_FRAMER_RXF_HI_RES_UNI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_UNI_BYTE1_t;

#define DR_FRAMER_RXF_HI_RES_UNI_BYTE0           0x1031c
#define DR_FRAMER_RXF_HI_RES_UNI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_UNI_BYTE0_t;

#define DR_FRAMER_RXF_MED_CIR_UNI_PKT1           0x1031d
#define DR_FRAMER_RXF_MED_CIR_UNI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_UNI_PKT1_t;

#define DR_FRAMER_RXF_MED_CIR_UNI_PKT0           0x1031e
#define DR_FRAMER_RXF_MED_CIR_UNI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_UNI_PKT0_t;

#define DR_FRAMER_RXF_MED_CIR_UNI_BYTE2          0x1031f
#define DR_FRAMER_RXF_MED_CIR_UNI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_UNI_BYTE2_t;

#define DR_FRAMER_RXF_MED_CIR_UNI_BYTE1          0x10320
#define DR_FRAMER_RXF_MED_CIR_UNI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_UNI_BYTE1_t;

#define DR_FRAMER_RXF_MED_CIR_UNI_BYTE0          0x10321
#define DR_FRAMER_RXF_MED_CIR_UNI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_UNI_BYTE0_t;

#define DR_FRAMER_RXF_MED_EIR_UNI_PKT1           0x10322
#define DR_FRAMER_RXF_MED_EIR_UNI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_UNI_PKT1_t;

#define DR_FRAMER_RXF_MED_EIR_UNI_PKT0           0x10323
#define DR_FRAMER_RXF_MED_EIR_UNI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_UNI_PKT0_t;

#define DR_FRAMER_RXF_MED_EIR_UNI_BYTE2          0x10324
#define DR_FRAMER_RXF_MED_EIR_UNI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_UNI_BYTE2_t;

#define DR_FRAMER_RXF_MED_EIR_UNI_BYTE1          0x10325
#define DR_FRAMER_RXF_MED_EIR_UNI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_UNI_BYTE1_t;

#define DR_FRAMER_RXF_MED_EIR_UNI_BYTE0          0x10326
#define DR_FRAMER_RXF_MED_EIR_UNI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_UNI_BYTE0_t;

#define DR_FRAMER_RXF_CTRL_UNI_PKT1              0x10327
#define DR_FRAMER_RXF_CTRL_UNI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_UNI_PKT1_t;

#define DR_FRAMER_RXF_CTRL_UNI_PKT0              0x10328
#define DR_FRAMER_RXF_CTRL_UNI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_UNI_PKT0_t;

#define DR_FRAMER_RXF_CTRL_UNI_BYTE2             0x10329
#define DR_FRAMER_RXF_CTRL_UNI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_UNI_BYTE2_t;

#define DR_FRAMER_RXF_CTRL_UNI_BYTE1             0x1032a
#define DR_FRAMER_RXF_CTRL_UNI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_UNI_BYTE1_t;

#define DR_FRAMER_RXF_CTRL_UNI_BYTE0             0x1032b
#define DR_FRAMER_RXF_CTRL_UNI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_UNI_BYTE0_t;

#define DR_FRAMER_RXF_FAIR_UNI_PKT1              0x1032c
#define DR_FRAMER_RXF_FAIR_UNI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_UNI_PKT1_t;

#define DR_FRAMER_RXF_FAIR_UNI_PKT0              0x1032d
#define DR_FRAMER_RXF_FAIR_UNI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_UNI_PKT0_t;

#define DR_FRAMER_RXF_FAIR_UNI_BYTE2             0x1032e
#define DR_FRAMER_RXF_FAIR_UNI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_UNI_BYTE2_t;

#define DR_FRAMER_RXF_FAIR_UNI_BYTE1             0x1032f
#define DR_FRAMER_RXF_FAIR_UNI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_UNI_BYTE1_t;

#define DR_FRAMER_RXF_FAIR_UNI_BYTE0             0x10330
#define DR_FRAMER_RXF_FAIR_UNI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_UNI_BYTE0_t;

#define DR_FRAMER_TXF_HI_RES_UNI_PKT1            0x10331
#define DR_FRAMER_TXF_HI_RES_UNI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_UNI_PKT1_t;

#define DR_FRAMER_TXF_HI_RES_UNI_PKT0            0x10332
#define DR_FRAMER_TXF_HI_RES_UNI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_UNI_PKT0_t;

#define DR_FRAMER_TXF_HI_RES_UNI_BYTE2           0x10333
#define DR_FRAMER_TXF_HI_RES_UNI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_UNI_BYTE2_t;

#define DR_FRAMER_TXF_HI_RES_UNI_BYTE1           0x10334
#define DR_FRAMER_TXF_HI_RES_UNI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_UNI_BYTE1_t;

#define DR_FRAMER_TXF_HI_RES_UNI_BYTE0           0x10335
#define DR_FRAMER_TXF_HI_RES_UNI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_UNI_BYTE0_t;

#define DR_FRAMER_TXF_MED_CIR_UNI_PKT1           0x10336
#define DR_FRAMER_TXF_MED_CIR_UNI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_UNI_PKT1_t;

#define DR_FRAMER_TXF_MED_CIR_UNI_PKT0           0x10337
#define DR_FRAMER_TXF_MED_CIR_UNI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_UNI_PKT0_t;

#define DR_FRAMER_TXF_MED_CIR_UNI_BYTE2          0x10338
#define DR_FRAMER_TXF_MED_CIR_UNI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_UNI_BYTE2_t;

#define DR_FRAMER_TXF_MED_CIR_UNI_BYTE1          0x10339
#define DR_FRAMER_TXF_MED_CIR_UNI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_UNI_BYTE1_t;

#define DR_FRAMER_TXF_MED_CIR_UNI_BYTE0          0x1033a
#define DR_FRAMER_TXF_MED_CIR_UNI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_UNI_BYTE0_t;

#define DR_FRAMER_TXF_MED_EIR_UNI_PKT1           0x1033b
#define DR_FRAMER_TXF_MED_EIR_UNI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_UNI_PKT1_t;

#define DR_FRAMER_TXF_MED_EIR_UNI_PKT0           0x1033c
#define DR_FRAMER_TXF_MED_EIR_UNI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_UNI_PKT0_t;

#define DR_FRAMER_TXF_MED_EIR_UNI_BYTE2          0x1033d
#define DR_FRAMER_TXF_MED_EIR_UNI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_UNI_BYTE2_t;

#define DR_FRAMER_TXF_MED_EIR_UNI_BYTE1          0x1033e
#define DR_FRAMER_TXF_MED_EIR_UNI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_UNI_BYTE1_t;

#define DR_FRAMER_TXF_MED_EIR_UNI_BYTE0          0x1033f
#define DR_FRAMER_TXF_MED_EIR_UNI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_UNI_BYTE0_t;

#define DR_FRAMER_TXF_CTRL_UNI_PKT1              0x10340
#define DR_FRAMER_TXF_CTRL_UNI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_UNI_PKT1_t;

#define DR_FRAMER_TXF_CTRL_UNI_PKT0              0x10341
#define DR_FRAMER_TXF_CTRL_UNI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_UNI_PKT0_t;

#define DR_FRAMER_TXF_CTRL_UNI_BYTE2             0x10342
#define DR_FRAMER_TXF_CTRL_UNI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_UNI_BYTE2_t;

#define DR_FRAMER_TXF_CTRL_UNI_BYTE1             0x10343
#define DR_FRAMER_TXF_CTRL_UNI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_UNI_BYTE1_t;

#define DR_FRAMER_TXF_CTRL_UNI_BYTE0             0x10344
#define DR_FRAMER_TXF_CTRL_UNI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_UNI_BYTE0_t;

#define DR_FRAMER_TXF_FAIR_UNI_PKT1              0x10345
#define DR_FRAMER_TXF_FAIR_UNI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_UNI_PKT1_t;

#define DR_FRAMER_TXF_FAIR_UNI_PKT0              0x10346
#define DR_FRAMER_TXF_FAIR_UNI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_UNI_PKT0_t;

#define DR_FRAMER_TXF_FAIR_UNI_BYTE2             0x10347
#define DR_FRAMER_TXF_FAIR_UNI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_UNI_BYTE2_t;

#define DR_FRAMER_TXF_FAIR_UNI_BYTE1             0x10348
#define DR_FRAMER_TXF_FAIR_UNI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_UNI_BYTE1_t;

#define DR_FRAMER_TXF_FAIR_UNI_BYTE0             0x10349
#define DR_FRAMER_TXF_FAIR_UNI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_UNI_BYTE0_t;

#define DR_FRAMER_RXF_HI_RES_MULTI_PKT1          0x1034a
#define DR_FRAMER_RXF_HI_RES_MULTI_PKT1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_MULTI_PKT1_t;

#define DR_FRAMER_RXF_HI_RES_MULTI_PKT0          0x1034b
#define DR_FRAMER_RXF_HI_RES_MULTI_PKT0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_MULTI_PKT0_t;

#define DR_FRAMER_RXF_HI_RES_MULTI_BYTE2         0x1034c
#define DR_FRAMER_RXF_HI_RES_MULTI_BYTE2_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_MULTI_BYTE2_t;

#define DR_FRAMER_RXF_HI_RES_MULTI_BYTE1         0x1034d
#define DR_FRAMER_RXF_HI_RES_MULTI_BYTE1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_MULTI_BYTE1_t;

#define DR_FRAMER_RXF_HI_RES_MULTI_BYTE0         0x1034e
#define DR_FRAMER_RXF_HI_RES_MULTI_BYTE0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_HI_RES_MULTI_BYTE0_t;

#define DR_FRAMER_RXF_MED_CIR_MULTI_PKT1         0x1034f
#define DR_FRAMER_RXF_MED_CIR_MULTI_PKT1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_MULTI_PKT1_t;

#define DR_FRAMER_RXF_MED_CIR_MULTI_PKT0         0x10350
#define DR_FRAMER_RXF_MED_CIR_MULTI_PKT0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_MULTI_PKT0_t;

#define DR_FRAMER_RXF_MED_CIR_MULTI_BYTE2        0x10351
#define DR_FRAMER_RXF_MED_CIR_MULTI_BYTE2_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_MULTI_BYTE2_t;

#define DR_FRAMER_RXF_MED_CIR_MULTI_BYTE1        0x10352
#define DR_FRAMER_RXF_MED_CIR_MULTI_BYTE1_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_MULTI_BYTE1_t;

#define DR_FRAMER_RXF_MED_CIR_MULTI_BYTE0        0x10353
#define DR_FRAMER_RXF_MED_CIR_MULTI_BYTE0_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_CIR_MULTI_BYTE0_t;

#define DR_FRAMER_RXF_MED_EIR_MULTI_PKT1         0x10354
#define DR_FRAMER_RXF_MED_EIR_MULTI_PKT1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_MULTI_PKT1_t;

#define DR_FRAMER_RXF_MED_EIR_MULTI_PKT0         0x10355
#define DR_FRAMER_RXF_MED_EIR_MULTI_PKT0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_MULTI_PKT0_t;

#define DR_FRAMER_RXF_MED_EIR_MULTI_BYTE2        0x10356
#define DR_FRAMER_RXF_MED_EIR_MULTI_BYTE2_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_MULTI_BYTE2_t;

#define DR_FRAMER_RXF_MED_EIR_MULTI_BYTE1        0x10357
#define DR_FRAMER_RXF_MED_EIR_MULTI_BYTE1_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_MULTI_BYTE1_t;

#define DR_FRAMER_RXF_MED_EIR_MULTI_BYTE0        0x10358
#define DR_FRAMER_RXF_MED_EIR_MULTI_BYTE0_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MED_EIR_MULTI_BYTE0_t;

#define DR_FRAMER_RXF_CTRL_MULTI_PKT1            0x10359
#define DR_FRAMER_RXF_CTRL_MULTI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_MULTI_PKT1_t;

#define DR_FRAMER_RXF_CTRL_MULTI_PKT0            0x1035a
#define DR_FRAMER_RXF_CTRL_MULTI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_MULTI_PKT0_t;

#define DR_FRAMER_RXF_CTRL_MULTI_BYTE2           0x1035b
#define DR_FRAMER_RXF_CTRL_MULTI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_MULTI_BYTE2_t;

#define DR_FRAMER_RXF_CTRL_MULTI_BYTE1           0x1035c
#define DR_FRAMER_RXF_CTRL_MULTI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_MULTI_BYTE1_t;

#define DR_FRAMER_RXF_CTRL_MULTI_BYTE0           0x1035d
#define DR_FRAMER_RXF_CTRL_MULTI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_CTRL_MULTI_BYTE0_t;

#define DR_FRAMER_RXF_FAIR_MULTI_PKT1            0x1035e
#define DR_FRAMER_RXF_FAIR_MULTI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_MULTI_PKT1_t;

#define DR_FRAMER_RXF_FAIR_MULTI_PKT0            0x1035f
#define DR_FRAMER_RXF_FAIR_MULTI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_MULTI_PKT0_t;

#define DR_FRAMER_RXF_FAIR_MULTI_BYTE2           0x10360
#define DR_FRAMER_RXF_FAIR_MULTI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_MULTI_BYTE2_t;

#define DR_FRAMER_RXF_FAIR_MULTI_BYTE1           0x10361
#define DR_FRAMER_RXF_FAIR_MULTI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_MULTI_BYTE1_t;

#define DR_FRAMER_RXF_FAIR_MULTI_BYTE0           0x10362
#define DR_FRAMER_RXF_FAIR_MULTI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FAIR_MULTI_BYTE0_t;

#define DR_FRAMER_TXF_HI_RES_MULTI_PKT1          0x10363
#define DR_FRAMER_TXF_HI_RES_MULTI_PKT1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_MULTI_PKT1_t;

#define DR_FRAMER_TXF_HI_RES_MULTI_PKT0          0x10364
#define DR_FRAMER_TXF_HI_RES_MULTI_PKT0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_MULTI_PKT0_t;

#define DR_FRAMER_TXF_HI_RES_MULTI_BYTE2         0x10365
#define DR_FRAMER_TXF_HI_RES_MULTI_BYTE2_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_MULTI_BYTE2_t;

#define DR_FRAMER_TXF_HI_RES_MULTI_BYTE1         0x10366
#define DR_FRAMER_TXF_HI_RES_MULTI_BYTE1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_MULTI_BYTE1_t;

#define DR_FRAMER_TXF_HI_RES_MULTI_BYTE0         0x10367
#define DR_FRAMER_TXF_HI_RES_MULTI_BYTE0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_HI_RES_MULTI_BYTE0_t;

#define DR_FRAMER_TXF_MED_CIR_MULTI_PKT1         0x10368
#define DR_FRAMER_TXF_MED_CIR_MULTI_PKT1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_MULTI_PKT1_t;

#define DR_FRAMER_TXF_MED_CIR_MULTI_PKT0         0x10369
#define DR_FRAMER_TXF_MED_CIR_MULTI_PKT0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_MULTI_PKT0_t;

#define DR_FRAMER_TXF_MED_CIR_MULTI_BYTE2        0x1036a
#define DR_FRAMER_TXF_MED_CIR_MULTI_BYTE2_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_MULTI_BYTE2_t;

#define DR_FRAMER_TXF_MED_CIR_MULTI_BYTE1        0x1036b
#define DR_FRAMER_TXF_MED_CIR_MULTI_BYTE1_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_MULTI_BYTE1_t;

#define DR_FRAMER_TXF_MED_CIR_MULTI_BYTE0        0x1036c
#define DR_FRAMER_TXF_MED_CIR_MULTI_BYTE0_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_CIR_MULTI_BYTE0_t;

#define DR_FRAMER_TXF_MED_EIR_MULTI_PKT1         0x1036d
#define DR_FRAMER_TXF_MED_EIR_MULTI_PKT1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_MULTI_PKT1_t;

#define DR_FRAMER_TXF_MED_EIR_MULTI_PKT0         0x1036e
#define DR_FRAMER_TXF_MED_EIR_MULTI_PKT0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_MULTI_PKT0_t;

#define DR_FRAMER_TXF_MED_EIR_MULTI_BYTE2        0x1036f
#define DR_FRAMER_TXF_MED_EIR_MULTI_BYTE2_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_MULTI_BYTE2_t;

#define DR_FRAMER_TXF_MED_EIR_MULTI_BYTE1        0x10370
#define DR_FRAMER_TXF_MED_EIR_MULTI_BYTE1_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_MULTI_BYTE1_t;

#define DR_FRAMER_TXF_MED_EIR_MULTI_BYTE0        0x10371
#define DR_FRAMER_TXF_MED_EIR_MULTI_BYTE0_dft    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_MED_EIR_MULTI_BYTE0_t;

#define DR_FRAMER_TXF_CTRL_MULTI_PKT1            0x10372
#define DR_FRAMER_TXF_CTRL_MULTI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_MULTI_PKT1_t;

#define DR_FRAMER_TXF_CTRL_MULTI_PKT0            0x10373
#define DR_FRAMER_TXF_CTRL_MULTI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_MULTI_PKT0_t;

#define DR_FRAMER_TXF_CTRL_MULTI_BYTE2           0x10374
#define DR_FRAMER_TXF_CTRL_MULTI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_MULTI_BYTE2_t;

#define DR_FRAMER_TXF_CTRL_MULTI_BYTE1           0x10375
#define DR_FRAMER_TXF_CTRL_MULTI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_MULTI_BYTE1_t;

#define DR_FRAMER_TXF_CTRL_MULTI_BYTE0           0x10376
#define DR_FRAMER_TXF_CTRL_MULTI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_CTRL_MULTI_BYTE0_t;

#define DR_FRAMER_TXF_FAIR_MULTI_PKT1            0x10377
#define DR_FRAMER_TXF_FAIR_MULTI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_MULTI_PKT1_t;

#define DR_FRAMER_TXF_FAIR_MULTI_PKT0            0x10378
#define DR_FRAMER_TXF_FAIR_MULTI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_MULTI_PKT0_t;

#define DR_FRAMER_TXF_FAIR_MULTI_BYTE2           0x10379
#define DR_FRAMER_TXF_FAIR_MULTI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_MULTI_BYTE2_t;

#define DR_FRAMER_TXF_FAIR_MULTI_BYTE1           0x1037a
#define DR_FRAMER_TXF_FAIR_MULTI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_MULTI_BYTE1_t;

#define DR_FRAMER_TXF_FAIR_MULTI_BYTE0           0x1037b
#define DR_FRAMER_TXF_FAIR_MULTI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FAIR_MULTI_BYTE0_t;

#define DR_FRAMER_RXF_MCASTSA_PKT1               0x1037e
#define DR_FRAMER_RXF_MCASTSA_PKT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MCASTSA_PKT1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MCASTSA_PKT1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MCASTSA_PKT1_t;

#define DR_FRAMER_RXF_MCASTSA_PKT0               0x1037f
#define DR_FRAMER_RXF_MCASTSA_PKT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_MCASTSA_PKT0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_MCASTSA_PKT0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_MCASTSA_PKT0_t;

#define DR_FRAMER_RXF_DELETED_PKT1               0x10399
#define DR_FRAMER_RXF_DELETED_PKT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_DELETED_PKT1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_DELETED_PKT1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_DELETED_PKT1_t;

#define DR_FRAMER_RXF_DELETED_PKT0               0x1039a
#define DR_FRAMER_RXF_DELETED_PKT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_DELETED_PKT0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_DELETED_PKT0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_DELETED_PKT0_t;

#define DR_FRAMER_RXF_DELETED_BYTE2              0x1039b
#define DR_FRAMER_RXF_DELETED_BYTE2_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_DELETED_BYTE2    :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_DELETED_BYTE2    :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_DELETED_BYTE2_t;

#define DR_FRAMER_RXF_DELETED_BYTE1              0x1039c
#define DR_FRAMER_RXF_DELETED_BYTE1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_DELETED_BYTE1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_DELETED_BYTE1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_DELETED_BYTE1_t;

#define DR_FRAMER_RXF_DELETED_BYTE0              0x1039d
#define DR_FRAMER_RXF_DELETED_BYTE0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_DELETED_BYTE0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_DELETED_BYTE0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_DELETED_BYTE0_t;

#define DR_FRAMER_RXF_BAD_PKT1                   0x1039e
#define DR_FRAMER_RXF_BAD_PKT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_BAD_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_BAD_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_BAD_PKT1_t;

#define DR_FRAMER_RXF_BAD_PKT0                   0x1039f
#define DR_FRAMER_RXF_BAD_PKT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_BAD_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_BAD_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_BAD_PKT0_t;

#define DR_FRAMER_RXF_BAD_BYTE2                  0x103a0
#define DR_FRAMER_RXF_BAD_BYTE2_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_BAD_BYTE2        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_BAD_BYTE2        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_BAD_BYTE2_t;

#define DR_FRAMER_RXF_BAD_BYTE1                  0x103a1
#define DR_FRAMER_RXF_BAD_BYTE1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_BAD_BYTE1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_BAD_BYTE1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_BAD_BYTE1_t;

#define DR_FRAMER_RXF_BAD_BYTE0                  0x103a2
#define DR_FRAMER_RXF_BAD_BYTE0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_BAD_BYTE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_BAD_BYTE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_BAD_BYTE0_t;

#define DR_FRAMER_RXF_FLOOD_PKT1                 0x103a3
#define DR_FRAMER_RXF_FLOOD_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FLOOD_PKT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FLOOD_PKT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FLOOD_PKT1_t;

#define DR_FRAMER_RXF_FLOOD_PKT0                 0x103a4
#define DR_FRAMER_RXF_FLOOD_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FLOOD_PKT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FLOOD_PKT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FLOOD_PKT0_t;

#define DR_FRAMER_RXF_FLOOD_BYTE2                0x103a5
#define DR_FRAMER_RXF_FLOOD_BYTE2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_FLOOD_BYTE2      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FLOOD_BYTE2      :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FLOOD_BYTE2_t;

#define DR_FRAMER_RXF_FLOOD_BYTE1                0x103a6
#define DR_FRAMER_RXF_FLOOD_BYTE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FLOOD_BYTE1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FLOOD_BYTE1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FLOOD_BYTE1_t;

#define DR_FRAMER_RXF_FLOOD_BYTE0                0x103a7
#define DR_FRAMER_RXF_FLOOD_BYTE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_FLOOD_BYTE0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_FLOOD_BYTE0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_FLOOD_BYTE0_t;

#define DR_FRAMER_RXF_NOFLOOD_PKT1               0x103a8
#define DR_FRAMER_RXF_NOFLOOD_PKT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_NOFLOOD_PKT1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_NOFLOOD_PKT1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_NOFLOOD_PKT1_t;

#define DR_FRAMER_RXF_NOFLOOD_PKT0               0x103a9
#define DR_FRAMER_RXF_NOFLOOD_PKT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_NOFLOOD_PKT0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_NOFLOOD_PKT0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_NOFLOOD_PKT0_t;

#define DR_FRAMER_RXF_NOFLOOD_BYTE2              0x103aa
#define DR_FRAMER_RXF_NOFLOOD_BYTE2_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_NOFLOOD_BYTE2    :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_NOFLOOD_BYTE2    :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_NOFLOOD_BYTE2_t;

#define DR_FRAMER_RXF_NOFLOOD_BYTE1              0x103ab
#define DR_FRAMER_RXF_NOFLOOD_BYTE1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_NOFLOOD_BYTE1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_NOFLOOD_BYTE1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_NOFLOOD_BYTE1_t;

#define DR_FRAMER_RXF_NOFLOOD_BYTE0              0x103ac
#define DR_FRAMER_RXF_NOFLOOD_BYTE0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_NOFLOOD_BYTE0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_NOFLOOD_BYTE0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_NOFLOOD_BYTE0_t;

#define DR_FRAMER_RXF_IDLE_PKT1                  0x103ad
#define DR_FRAMER_RXF_IDLE_PKT1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_IDLE_PKT1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_PKT1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_PKT1_t;

#define DR_FRAMER_RXF_IDLE_PKT0                  0x103ae
#define DR_FRAMER_RXF_IDLE_PKT0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_IDLE_PKT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_PKT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_PKT0_t;

#define DR_FRAMER_RXF_IDLE_BYTE2                 0x103af
#define DR_FRAMER_RXF_IDLE_BYTE2_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXF_IDLE_BYTE2       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_BYTE2       :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_BYTE2_t;

#define DR_FRAMER_RXF_IDLE_BYTE1                 0x103b0
#define DR_FRAMER_RXF_IDLE_BYTE1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_IDLE_BYTE1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_BYTE1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_BYTE1_t;

#define DR_FRAMER_RXF_IDLE_BYTE0                 0x103b1
#define DR_FRAMER_RXF_IDLE_BYTE0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXF_IDLE_BYTE0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXF_IDLE_BYTE0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_RXF_IDLE_BYTE0_t;

#define DR_FRAMER_TXF_BAD_PKT1                   0x103b2
#define DR_FRAMER_TXF_BAD_PKT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_BAD_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_BAD_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_BAD_PKT1_t;

#define DR_FRAMER_TXF_BAD_PKT0                   0x103b3
#define DR_FRAMER_TXF_BAD_PKT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_BAD_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_BAD_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_BAD_PKT0_t;

#define DR_FRAMER_TXF_BAD_BYTE2                  0x103b4
#define DR_FRAMER_TXF_BAD_BYTE2_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_BAD_BYTE2        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_BAD_BYTE2        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_BAD_BYTE2_t;

#define DR_FRAMER_TXF_BAD_BYTE1                  0x103b5
#define DR_FRAMER_TXF_BAD_BYTE1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_BAD_BYTE1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_BAD_BYTE1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_BAD_BYTE1_t;

#define DR_FRAMER_TXF_BAD_BYTE0                  0x103b6
#define DR_FRAMER_TXF_BAD_BYTE0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_BAD_BYTE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_BAD_BYTE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_BAD_BYTE0_t;

#define DR_FRAMER_TXF_FLOOD_PKT1                 0x103b7
#define DR_FRAMER_TXF_FLOOD_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FLOOD_PKT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FLOOD_PKT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FLOOD_PKT1_t;

#define DR_FRAMER_TXF_FLOOD_PKT0                 0x103b8
#define DR_FRAMER_TXF_FLOOD_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FLOOD_PKT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FLOOD_PKT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FLOOD_PKT0_t;

#define DR_FRAMER_TXF_FLOOD_BYTE2                0x103b9
#define DR_FRAMER_TXF_FLOOD_BYTE2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_FLOOD_BYTE2      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FLOOD_BYTE2      :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FLOOD_BYTE2_t;

#define DR_FRAMER_TXF_FLOOD_BYTE1                0x103ba
#define DR_FRAMER_TXF_FLOOD_BYTE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FLOOD_BYTE1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FLOOD_BYTE1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FLOOD_BYTE1_t;

#define DR_FRAMER_TXF_FLOOD_BYTE0                0x103bb
#define DR_FRAMER_TXF_FLOOD_BYTE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_FLOOD_BYTE0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_FLOOD_BYTE0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_FLOOD_BYTE0_t;

#define DR_FRAMER_TXF_NOFLOOD_PKT1               0x103bc
#define DR_FRAMER_TXF_NOFLOOD_PKT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_NOFLOOD_PKT1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_NOFLOOD_PKT1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_NOFLOOD_PKT1_t;

#define DR_FRAMER_TXF_NOFLOOD_PKT0               0x103bd
#define DR_FRAMER_TXF_NOFLOOD_PKT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_NOFLOOD_PKT0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_NOFLOOD_PKT0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_NOFLOOD_PKT0_t;

#define DR_FRAMER_TXF_NOFLOOD_BYTE2              0x103be
#define DR_FRAMER_TXF_NOFLOOD_BYTE2_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_NOFLOOD_BYTE2    :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_NOFLOOD_BYTE2    :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_NOFLOOD_BYTE2_t;

#define DR_FRAMER_TXF_NOFLOOD_BYTE1              0x103bf
#define DR_FRAMER_TXF_NOFLOOD_BYTE1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_NOFLOOD_BYTE1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_NOFLOOD_BYTE1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_NOFLOOD_BYTE1_t;

#define DR_FRAMER_TXF_NOFLOOD_BYTE0              0x103c0
#define DR_FRAMER_TXF_NOFLOOD_BYTE0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_NOFLOOD_BYTE0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_NOFLOOD_BYTE0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_NOFLOOD_BYTE0_t;

#define DR_FRAMER_TXF_IDLE_PKT1                  0x103c1
#define DR_FRAMER_TXF_IDLE_PKT1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_IDLE_PKT1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_IDLE_PKT1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_IDLE_PKT1_t;

#define DR_FRAMER_TXF_IDLE_PKT0                  0x103c2
#define DR_FRAMER_TXF_IDLE_PKT0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_IDLE_PKT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_IDLE_PKT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_IDLE_PKT0_t;

#define DR_FRAMER_TXF_IDLE_BYTE2                 0x103c3
#define DR_FRAMER_TXF_IDLE_BYTE2_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXF_IDLE_BYTE2       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_IDLE_BYTE2       :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_IDLE_BYTE2_t;

#define DR_FRAMER_TXF_IDLE_BYTE1                 0x103c4
#define DR_FRAMER_TXF_IDLE_BYTE1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_IDLE_BYTE1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_IDLE_BYTE1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_IDLE_BYTE1_t;

#define DR_FRAMER_TXF_IDLE_BYTE0                 0x103c5
#define DR_FRAMER_TXF_IDLE_BYTE0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXF_IDLE_BYTE0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXF_IDLE_BYTE0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_FRAMER_TXF_IDLE_BYTE0_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::host
 */

#define DR_HOST_CR4                              0x10022
#define DR_HOST_CR4_dft                          0x0009
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RXH_STRIP_SRP        :  2 ; /* bits 14:13 */
    cs_uint16 RXH_STRIP_CRC        :  1 ; /* bits 12:12 */
    cs_uint16 DROPH                :  1 ; /* bits 11:11 */
    cs_uint16 RXH_PPP              :  1 ; /* bits 10:10 */
    cs_uint16 RESERVED9            :  1 ; /* bits 9:9 */
    cs_uint16 HOST_EVEN_PRTY       :  1 ; /* bits 8:8 */
    cs_uint16 RESERVED             :  2 ; /* bits 7:6 */
    cs_uint16 RXH_CHANNEL          :  2 ; /* bits 5:4 */
    cs_uint16 TXH_EMPTY_PKT_FLTR_OFF :  1 ; /* bits 3:3 */
    cs_uint16 TXH_SHRT_PKT_FLTR_OFF :  1 ; /* bits 2:2 */
    cs_uint16 TXH_SRP_PRTY_CHK_OFF :  1 ; /* bits 1:1 */
    cs_uint16 TXH_CTRL_PRTY_CHK_OFF :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_PRTY_CHK_OFF :  1 ; /* bits 0:0 */
    cs_uint16 TXH_SRP_PRTY_CHK_OFF :  1 ; /* bits 1:1 */
    cs_uint16 TXH_SHRT_PKT_FLTR_OFF :  1 ; /* bits 2:2 */
    cs_uint16 TXH_EMPTY_PKT_FLTR_OFF :  1 ; /* bits 3:3 */
    cs_uint16 RXH_CHANNEL          :  2 ; /* bits 5:4 */
    cs_uint16 RESERVED             :  2 ; /* bits 7:6 */
    cs_uint16 HOST_EVEN_PRTY       :  1 ; /* bits 8:8 */
    cs_uint16 RESERVED9            :  1 ; /* bits 9:9 */
    cs_uint16 RXH_PPP              :  1 ; /* bits 10:10 */
    cs_uint16 DROPH                :  1 ; /* bits 11:11 */
    cs_uint16 RXH_STRIP_CRC        :  1 ; /* bits 12:12 */
    cs_uint16 RXH_STRIP_SRP        :  2 ; /* bits 14:13 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_CR4_t;
#define     RXH_STRIP_SRP_SRP_NOSTRIP                     0x00
#define     RXH_STRIP_SRP_SRP_ENCAP_STRIP                 0x01
#define     RXH_STRIP_SRP_SRP_FULLSTRIP                   0x02
#define     RXH_STRIP_SRP_Reserved                        0x03
#define     RXH_PPP_FIXED_PPP                             0x01
#define     RXH_PPP_FIXED_HDLC                            0x00

#define DR_HOST_TXH_FULL_ASSERT_TH               0x10043
#define DR_HOST_TXH_FULL_ASSERT_TH_dft           0x0028
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 TXH_FULL_ASSERT_TH   :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FULL_ASSERT_TH   :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FULL_ASSERT_TH_t;

#define DR_HOST_TXH_FULL_DEASSERT_TH             0x10045
#define DR_HOST_TXH_FULL_DEASSERT_TH_dft         0x0020
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 TXH_FULL_DEASSERT_TH :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FULL_DEASSERT_TH :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FULL_DEASSERT_TH_t;

#define DR_HOST_RXH_UNDRFLW_TH                   0x10046
#define DR_HOST_RXH_UNDRFLW_TH_dft               0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 RXH_UNDRFLW_TH       :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_UNDRFLW_TH       :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_UNDRFLW_TH_t;

#define DR_HOST_TXH_RUNTSZ                       0x10049
#define DR_HOST_TXH_RUNTSZ_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 TXH_RUNTSZ           :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_RUNTSZ           :  7 ; /* bits 6:0 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_RUNTSZ_t;

#define DR_HOST_RXH_GIANTSZ                      0x1004a
#define DR_HOST_RXH_GIANTSZ_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 RXH_GIANTSZ          : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_GIANTSZ          : 14 ; /* bits 13:0 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_GIANTSZ_t;

#define DR_HOST_TXH_GIANTSZ                      0x1004c
#define DR_HOST_TXH_GIANTSZ_dft                  0x2400
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 TXH_GIANTSZ          : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_GIANTSZ          : 14 ; /* bits 13:0 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_GIANTSZ_t;

#define DR_HOST_CR4A                             0x1004d
#define DR_HOST_CR4A_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 CTL_OAM_CH0_ON       :  1 ; /* bits 9:9 */
    cs_uint16 HOSTPRIEN            :  1 ; /* bits 8:8 */
    cs_uint16 HOSTNUMCHAN          :  2 ; /* bits 7:6 */
    cs_uint16 HOSTPRIMED           :  3 ; /* bits 5:3 */
    cs_uint16 HOSTPRI              :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HOSTPRI              :  3 ; /* bits 2:0 */
    cs_uint16 HOSTPRIMED           :  3 ; /* bits 5:3 */
    cs_uint16 HOSTNUMCHAN          :  2 ; /* bits 7:6 */
    cs_uint16 HOSTPRIEN            :  1 ; /* bits 8:8 */
    cs_uint16 CTL_OAM_CH0_ON       :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_CR4A_t;
#define     HOSTNUMCHAN_ONE_CHNL                          0x00
#define     HOSTNUMCHAN_TWO_CHNL                          0x01
#define     HOSTNUMCHAN_THR_CHNL                          0x02
#define     HOSTNUMCHAN_FOR_CHNL                          0x03

#define DR_HOST_EXTTB_PIPECTL                    0x1006f
#define DR_HOST_EXTTB_PIPECTL_dft                0x0007
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 ENABLE               :  1 ; /* bits 5:5 */
    cs_uint16 PIPE_DEPTH           :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PIPE_DEPTH           :  5 ; /* bits 4:0 */
    cs_uint16 ENABLE               :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB_PIPECTL_t;

#define DR_HOST_EXTTB0_BASE                      0x10074
#define DR_HOST_EXTTB0_BASE_dft                  0x2000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB0_BASE          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB0_BASE          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB0_BASE_t;

#define DR_HOST_EXTTB1_BASE                      0x10075
#define DR_HOST_EXTTB1_BASE_dft                  0x2400
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB1_BASE          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB1_BASE          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB1_BASE_t;

#define DR_HOST_EXTTB2_BASE                      0x10076
#define DR_HOST_EXTTB2_BASE_dft                  0x2800
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB2_BASE          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB2_BASE          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB2_BASE_t;

#define DR_HOST_EXTTB3_BASE                      0x10077
#define DR_HOST_EXTTB3_BASE_dft                  0x2c00
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB3_BASE          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB3_BASE          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB3_BASE_t;

#define DR_HOST_EXTTB0_MAX                       0x10078
#define DR_HOST_EXTTB0_MAX_dft                   0x03ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB0_MAX           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB0_MAX           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB0_MAX_t;

#define DR_HOST_EXTTB1_MAX                       0x10079
#define DR_HOST_EXTTB1_MAX_dft                   0x03ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB1_MAX           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB1_MAX           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB1_MAX_t;

#define DR_HOST_EXTTB2_MAX                       0x1007a
#define DR_HOST_EXTTB2_MAX_dft                   0x03ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB2_MAX           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB2_MAX           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB2_MAX_t;

#define DR_HOST_EXTTB3_MAX                       0x1007b
#define DR_HOST_EXTTB3_MAX_dft                   0x03ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB3_MAX           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB3_MAX           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB3_MAX_t;

#define DR_HOST_EXTTB0_FULL                      0x1007c
#define DR_HOST_EXTTB0_FULL_dft                  0x03fc
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB0_FULL          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB0_FULL          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB0_FULL_t;

#define DR_HOST_EXTTB1_FULL                      0x1007d
#define DR_HOST_EXTTB1_FULL_dft                  0x03fc
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB1_FULL          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB1_FULL          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB1_FULL_t;

#define DR_HOST_EXTTB2_FULL                      0x1007e
#define DR_HOST_EXTTB2_FULL_dft                  0x03fc
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB2_FULL          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB2_FULL          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB2_FULL_t;

#define DR_HOST_EXTTB3_FULL                      0x1007f
#define DR_HOST_EXTTB3_FULL_dft                  0x03fc
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB3_FULL          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB3_FULL          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB3_FULL_t;

#define DR_HOST_EXTTB0_DEPTH                     0x1009c
#define DR_HOST_EXTTB0_DEPTH_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB0_DEPTH         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB0_DEPTH         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB0_DEPTH_t;

#define DR_HOST_EXTTB1_DEPTH                     0x1009d
#define DR_HOST_EXTTB1_DEPTH_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB1_DEPTH         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB1_DEPTH         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB1_DEPTH_t;

#define DR_HOST_EXTTB2_DEPTH                     0x1009e
#define DR_HOST_EXTTB2_DEPTH_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB2_DEPTH         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB2_DEPTH         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB2_DEPTH_t;

#define DR_HOST_EXTTB3_DEPTH                     0x1009f
#define DR_HOST_EXTTB3_DEPTH_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB3_DEPTH         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB3_DEPTH         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB3_DEPTH_t;

#define DR_HOST_STRIP_SRP_PRG1                   0x100d8
#define DR_HOST_STRIP_SRP_PRG1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 STRIP_PRG_EN         :  1 ; /* bits 3:3 */
    cs_uint16 STRIP_PRG_MODE       :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRIP_PRG_MODE       :  3 ; /* bits 2:0 */
    cs_uint16 STRIP_PRG_EN         :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_STRIP_SRP_PRG1_t;

#define DR_HOST_STRIP_SRP_PRG0                   0x100d9
#define DR_HOST_STRIP_SRP_PRG0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRIP_PRG_PROTO      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRIP_PRG_PROTO      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_STRIP_SRP_PRG0_t;

#define DR_HOST_TXH_SHRT_PKT                     0x100ff
#define DR_HOST_TXH_SHRT_PKT_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_SHRT_PKT         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_SHRT_PKT         :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_SHRT_PKT_t;

#define DR_HOST_RXH_OVERFLOW1                    0x10192
#define DR_HOST_RXH_OVERFLOW1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_OVERFLOW1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_OVERFLOW1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_OVERFLOW1_t;

#define DR_HOST_RXH_OVERFLOW0                    0x10193
#define DR_HOST_RXH_OVERFLOW0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_OVERFLOW0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_OVERFLOW0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_OVERFLOW0_t;

#define DR_HOST_TXH_DPERR                        0x10195
#define DR_HOST_TXH_DPERR_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_DPERR            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_DPERR            :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_DPERR_t;

#define DR_HOST_TXH_SRP_PERR                     0x10197
#define DR_HOST_TXH_SRP_PERR_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_SRP_PERR         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_SRP_PERR         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_SRP_PERR_t;

#define DR_HOST_TXH_CTRL_PERR                    0x10199
#define DR_HOST_TXH_CTRL_PERR_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_CTRL_PERR        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_PERR        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_PERR_t;

#define DR_HOST_TXH_ERR                          0x1019b
#define DR_HOST_TXH_ERR_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_ERR              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_ERR              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_ERR_t;

#define DR_HOST_TXH_PKT_ERR                      0x1019d
#define DR_HOST_TXH_PKT_ERR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_PKT_ERR          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_PKT_ERR          :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_PKT_ERR_t;

#define DR_HOST_RXH_STSIG_ERR                    0x1019e
#define DR_HOST_RXH_STSIG_ERR_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_STSIG_ERR        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_STSIG_ERR        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_STSIG_ERR_t;

#define DR_HOST_RXH_GIANT                        0x101a0
#define DR_HOST_RXH_GIANT_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_GIANT            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_GIANT            :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_GIANT_t;

#define DR_HOST_TXH_RUNT                         0x101a2
#define DR_HOST_TXH_RUNT_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_RUNT             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_RUNT             :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_RUNT_t;

#define DR_HOST_EXTTB_DPERR                      0x101fa
#define DR_HOST_EXTTB_DPERR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ECCFIX               :  8 ; /* bits 15:8 */
    cs_uint16 ECCERR               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ECCERR               :  8 ; /* bits 7:0 */
    cs_uint16 ECCFIX               :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB_DPERR_t;

#define DR_HOST_EXTTB_DROP_PKT                   0x101fb
#define DR_HOST_EXTTB_DROP_PKT_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EXTTB_DROP_PKT       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EXTTB_DROP_PKT       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_EXTTB_DROP_PKT_t;

#define DR_HOST_RXH_FE1                          0x101fc
#define DR_HOST_RXH_FE1_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 RXH_FE1              :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FE1              :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FE1_t;

#define DR_HOST_RXH_FE0                          0x101fd
#define DR_HOST_RXH_FE0_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FE0              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FE0              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FE0_t;

#define DR_HOST_RXH_NONFE1                       0x101fe
#define DR_HOST_RXH_NONFE1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 RXH_NONFE1           :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_NONFE1           :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_NONFE1_t;

#define DR_HOST_RXH_NONFE0                       0x101ff
#define DR_HOST_RXH_NONFE0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_NONFE0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_NONFE0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_NONFE0_t;

#define DR_HOST_RXH_UNI_PKT1                     0x10228
#define DR_HOST_RXH_UNI_PKT1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_UNI_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_UNI_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_UNI_PKT1_t;

#define DR_HOST_RXH_UNI_PKT0                     0x10229
#define DR_HOST_RXH_UNI_PKT0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_UNI_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_UNI_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_UNI_PKT0_t;

#define DR_HOST_RXH_UNI_BYTE2                    0x1022a
#define DR_HOST_RXH_UNI_BYTE2_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_UNI_BYTE2        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_UNI_BYTE2        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_UNI_BYTE2_t;

#define DR_HOST_RXH_UNI_BYTE1                    0x1022b
#define DR_HOST_RXH_UNI_BYTE1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_UNI_BYTE1_t;

#define DR_HOST_RXH_UNI_BYTE0                    0x1022c
#define DR_HOST_RXH_UNI_BYTE0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_UNI_BYTE0_t;

#define DR_HOST_RXH_MULTI_PKT1                   0x1022d
#define DR_HOST_RXH_MULTI_PKT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MULTI_PKT1_t;

#define DR_HOST_RXH_MULTI_PKT0                   0x1022e
#define DR_HOST_RXH_MULTI_PKT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MULTI_PKT0_t;

#define DR_HOST_RXH_MULTI_BYTE2                  0x1022f
#define DR_HOST_RXH_MULTI_BYTE2_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_MULTI_BYTE2      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MULTI_BYTE2      :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MULTI_BYTE2_t;

#define DR_HOST_RXH_MULTI_BYTE1                  0x10230
#define DR_HOST_RXH_MULTI_BYTE1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MULTI_BYTE1_t;

#define DR_HOST_RXH_MULTI_BYTE0                  0x10231
#define DR_HOST_RXH_MULTI_BYTE0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MULTI_BYTE0_t;

#define DR_HOST_RXH_HI_UNI_PKT1                  0x10232
#define DR_HOST_RXH_HI_UNI_PKT1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_UNI_PKT1_t;

#define DR_HOST_RXH_HI_UNI_PKT0                  0x10233
#define DR_HOST_RXH_HI_UNI_PKT0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_UNI_PKT0_t;

#define DR_HOST_RXH_HI_UNI_BYTE2                 0x10234
#define DR_HOST_RXH_HI_UNI_BYTE2_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_UNI_BYTE2_t;

#define DR_HOST_RXH_HI_UNI_BYTE1                 0x10235
#define DR_HOST_RXH_HI_UNI_BYTE1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_UNI_BYTE1_t;

#define DR_HOST_RXH_HI_UNI_BYTE0                 0x10236
#define DR_HOST_RXH_HI_UNI_BYTE0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_UNI_BYTE0_t;

#define DR_HOST_RXH_HI_MULTI_PKT1                0x10237
#define DR_HOST_RXH_HI_MULTI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_MULTI_PKT1_t;

#define DR_HOST_RXH_HI_MULTI_PKT0                0x10238
#define DR_HOST_RXH_HI_MULTI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_MULTI_PKT0_t;

#define DR_HOST_RXH_HI_MULTI_BYTE2               0x10239
#define DR_HOST_RXH_HI_MULTI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_MULTI_BYTE2_t;

#define DR_HOST_RXH_HI_MULTI_BYTE1               0x1023a
#define DR_HOST_RXH_HI_MULTI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_MULTI_BYTE1_t;

#define DR_HOST_RXH_HI_MULTI_BYTE0               0x1023b
#define DR_HOST_RXH_HI_MULTI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_MULTI_BYTE0_t;

#define DR_HOST_TXH_UNI_PKT1                     0x1023c
#define DR_HOST_TXH_UNI_PKT1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_UNI_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_UNI_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_UNI_PKT1_t;

#define DR_HOST_TXH_UNI_PKT0                     0x1023d
#define DR_HOST_TXH_UNI_PKT0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_UNI_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_UNI_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_UNI_PKT0_t;

#define DR_HOST_TXH_UNI_BYTE2                    0x1023e
#define DR_HOST_TXH_UNI_BYTE2_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_UNI_BYTE2        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_UNI_BYTE2        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_UNI_BYTE2_t;

#define DR_HOST_TXH_UNI_BYTE1                    0x1023f
#define DR_HOST_TXH_UNI_BYTE1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_UNI_BYTE1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_UNI_BYTE1_t;

#define DR_HOST_TXH_UNI_BYTE0                    0x10240
#define DR_HOST_TXH_UNI_BYTE0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_UNI_BYTE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_UNI_BYTE0_t;

#define DR_HOST_TXH_MULTI_PKT1                   0x10241
#define DR_HOST_TXH_MULTI_PKT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MULTI_PKT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MULTI_PKT1_t;

#define DR_HOST_TXH_MULTI_PKT0                   0x10242
#define DR_HOST_TXH_MULTI_PKT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MULTI_PKT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MULTI_PKT0_t;

#define DR_HOST_TXH_MULTI_BYTE2                  0x10243
#define DR_HOST_TXH_MULTI_BYTE2_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MULTI_BYTE2      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MULTI_BYTE2      :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MULTI_BYTE2_t;

#define DR_HOST_TXH_MULTI_BYTE1                  0x10244
#define DR_HOST_TXH_MULTI_BYTE1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MULTI_BYTE1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MULTI_BYTE1_t;

#define DR_HOST_TXH_MULTI_BYTE0                  0x10245
#define DR_HOST_TXH_MULTI_BYTE0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MULTI_BYTE0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MULTI_BYTE0_t;

#define DR_HOST_TXH_HI_UNI_PKT1                  0x10246
#define DR_HOST_TXH_HI_UNI_PKT1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_UNI_PKT1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_UNI_PKT1_t;

#define DR_HOST_TXH_HI_UNI_PKT0                  0x10247
#define DR_HOST_TXH_HI_UNI_PKT0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_UNI_PKT0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_UNI_PKT0_t;

#define DR_HOST_TXH_HI_UNI_BYTE2                 0x10248
#define DR_HOST_TXH_HI_UNI_BYTE2_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_UNI_BYTE2     :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_UNI_BYTE2_t;

#define DR_HOST_TXH_HI_UNI_BYTE1                 0x10249
#define DR_HOST_TXH_HI_UNI_BYTE1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_UNI_BYTE1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_UNI_BYTE1_t;

#define DR_HOST_TXH_HI_UNI_BYTE0                 0x1024a
#define DR_HOST_TXH_HI_UNI_BYTE0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_UNI_BYTE0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_UNI_BYTE0_t;

#define DR_HOST_TXH_HI_MULTI_PKT1                0x1024b
#define DR_HOST_TXH_HI_MULTI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_MULTI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_MULTI_PKT1_t;

#define DR_HOST_TXH_HI_MULTI_PKT0                0x1024c
#define DR_HOST_TXH_HI_MULTI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_MULTI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_MULTI_PKT0_t;

#define DR_HOST_TXH_HI_MULTI_BYTE2               0x1024d
#define DR_HOST_TXH_HI_MULTI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_MULTI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_MULTI_BYTE2_t;

#define DR_HOST_TXH_HI_MULTI_BYTE1               0x1024e
#define DR_HOST_TXH_HI_MULTI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_MULTI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_MULTI_BYTE1_t;

#define DR_HOST_TXH_HI_MULTI_BYTE0               0x1024f
#define DR_HOST_TXH_HI_MULTI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_MULTI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_MULTI_BYTE0_t;

#define DR_HOST_TXH_WUNI_PKT1                    0x10250
#define DR_HOST_TXH_WUNI_PKT1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WUNI_PKT1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WUNI_PKT1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WUNI_PKT1_t;

#define DR_HOST_TXH_WUNI_PKT0                    0x10251
#define DR_HOST_TXH_WUNI_PKT0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WUNI_PKT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WUNI_PKT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WUNI_PKT0_t;

#define DR_HOST_TXH_WUNI_BYTE2                   0x10252
#define DR_HOST_TXH_WUNI_BYTE2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_WUNI_BYTE2       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WUNI_BYTE2       :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WUNI_BYTE2_t;

#define DR_HOST_TXH_WUNI_BYTE1                   0x10253
#define DR_HOST_TXH_WUNI_BYTE1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WUNI_BYTE1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WUNI_BYTE1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WUNI_BYTE1_t;

#define DR_HOST_TXH_WUNI_BYTE0                   0x10254
#define DR_HOST_TXH_WUNI_BYTE0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WUNI_BYTE0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WUNI_BYTE0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WUNI_BYTE0_t;

#define DR_HOST_TXH_WMULTI_PKT1                  0x10255
#define DR_HOST_TXH_WMULTI_PKT1_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WMULTI_PKT1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WMULTI_PKT1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WMULTI_PKT1_t;

#define DR_HOST_TXH_WMULTI_PKT0                  0x10256
#define DR_HOST_TXH_WMULTI_PKT0_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WMULTI_PKT0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WMULTI_PKT0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WMULTI_PKT0_t;

#define DR_HOST_TXH_WMULTI_BYTE2                 0x10257
#define DR_HOST_TXH_WMULTI_BYTE2_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_WMULTI_BYTE2     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WMULTI_BYTE2     :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WMULTI_BYTE2_t;

#define DR_HOST_TXH_WMULTI_BYTE1                 0x10258
#define DR_HOST_TXH_WMULTI_BYTE1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WMULTI_BYTE1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WMULTI_BYTE1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WMULTI_BYTE1_t;

#define DR_HOST_TXH_WMULTI_BYTE0                 0x10259
#define DR_HOST_TXH_WMULTI_BYTE0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_WMULTI_BYTE0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_WMULTI_BYTE0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_WMULTI_BYTE0_t;

#define DR_HOST_TXH_HI_WUNI_PKT1                 0x1025a
#define DR_HOST_TXH_HI_WUNI_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WUNI_PKT1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WUNI_PKT1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WUNI_PKT1_t;

#define DR_HOST_TXH_HI_WUNI_PKT0                 0x1025b
#define DR_HOST_TXH_HI_WUNI_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WUNI_PKT0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WUNI_PKT0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WUNI_PKT0_t;

#define DR_HOST_TXH_HI_WUNI_BYTE2                0x1025c
#define DR_HOST_TXH_HI_WUNI_BYTE2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_WUNI_BYTE2    :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WUNI_BYTE2    :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WUNI_BYTE2_t;

#define DR_HOST_TXH_HI_WUNI_BYTE1                0x1025d
#define DR_HOST_TXH_HI_WUNI_BYTE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WUNI_BYTE1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WUNI_BYTE1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WUNI_BYTE1_t;

#define DR_HOST_TXH_HI_WUNI_BYTE0                0x1025e
#define DR_HOST_TXH_HI_WUNI_BYTE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WUNI_BYTE0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WUNI_BYTE0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WUNI_BYTE0_t;

#define DR_HOST_TXH_HI_WMULTI_PKT1               0x1025f
#define DR_HOST_TXH_HI_WMULTI_PKT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WMULTI_PKT1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WMULTI_PKT1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WMULTI_PKT1_t;

#define DR_HOST_TXH_HI_WMULTI_PKT0               0x10260
#define DR_HOST_TXH_HI_WMULTI_PKT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WMULTI_PKT0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WMULTI_PKT0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WMULTI_PKT0_t;

#define DR_HOST_TXH_HI_WMULTI_BYTE2              0x10261
#define DR_HOST_TXH_HI_WMULTI_BYTE2_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_WMULTI_BYTE2  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WMULTI_BYTE2  :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WMULTI_BYTE2_t;

#define DR_HOST_TXH_HI_WMULTI_BYTE1              0x10262
#define DR_HOST_TXH_HI_WMULTI_BYTE1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WMULTI_BYTE1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WMULTI_BYTE1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WMULTI_BYTE1_t;

#define DR_HOST_TXH_HI_WMULTI_BYTE0              0x10263
#define DR_HOST_TXH_HI_WMULTI_BYTE0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_WMULTI_BYTE0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_WMULTI_BYTE0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_WMULTI_BYTE0_t;

#define DR_HOST_RXH_HI_RES_UNI_PKT1              0x10280
#define DR_HOST_RXH_HI_RES_UNI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_UNI_PKT1_t;

#define DR_HOST_RXH_HI_RES_UNI_PKT0              0x10281
#define DR_HOST_RXH_HI_RES_UNI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_UNI_PKT0_t;

#define DR_HOST_RXH_HI_RES_UNI_BYTE2             0x10282
#define DR_HOST_RXH_HI_RES_UNI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_UNI_BYTE2_t;

#define DR_HOST_RXH_HI_RES_UNI_BYTE1             0x10283
#define DR_HOST_RXH_HI_RES_UNI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_UNI_BYTE1_t;

#define DR_HOST_RXH_HI_RES_UNI_BYTE0             0x10284
#define DR_HOST_RXH_HI_RES_UNI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_UNI_BYTE0_t;

#define DR_HOST_RXH_MED_CIR_UNI_PKT1             0x10285
#define DR_HOST_RXH_MED_CIR_UNI_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_UNI_PKT1_t;

#define DR_HOST_RXH_MED_CIR_UNI_PKT0             0x10286
#define DR_HOST_RXH_MED_CIR_UNI_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_UNI_PKT0_t;

#define DR_HOST_RXH_MED_CIR_UNI_BYTE2            0x10287
#define DR_HOST_RXH_MED_CIR_UNI_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_UNI_BYTE2_t;

#define DR_HOST_RXH_MED_CIR_UNI_BYTE1            0x10288
#define DR_HOST_RXH_MED_CIR_UNI_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_UNI_BYTE1_t;

#define DR_HOST_RXH_MED_CIR_UNI_BYTE0            0x10289
#define DR_HOST_RXH_MED_CIR_UNI_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_UNI_BYTE0_t;

#define DR_HOST_RXH_MED_EIR_UNI_PKT1             0x1028a
#define DR_HOST_RXH_MED_EIR_UNI_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_UNI_PKT1_t;

#define DR_HOST_RXH_MED_EIR_UNI_PKT0             0x1028b
#define DR_HOST_RXH_MED_EIR_UNI_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_UNI_PKT0_t;

#define DR_HOST_RXH_MED_EIR_UNI_BYTE2            0x1028c
#define DR_HOST_RXH_MED_EIR_UNI_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_UNI_BYTE2_t;

#define DR_HOST_RXH_MED_EIR_UNI_BYTE1            0x1028d
#define DR_HOST_RXH_MED_EIR_UNI_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_UNI_BYTE1_t;

#define DR_HOST_RXH_MED_EIR_UNI_BYTE0            0x1028e
#define DR_HOST_RXH_MED_EIR_UNI_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_UNI_BYTE0_t;

#define DR_HOST_RXH_CTRL_UNI_PKT1                0x1028f
#define DR_HOST_RXH_CTRL_UNI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_UNI_PKT1_t;

#define DR_HOST_RXH_CTRL_UNI_PKT0                0x10290
#define DR_HOST_RXH_CTRL_UNI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_UNI_PKT0_t;

#define DR_HOST_RXH_CTRL_UNI_BYTE2               0x10291
#define DR_HOST_RXH_CTRL_UNI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_UNI_BYTE2_t;

#define DR_HOST_RXH_CTRL_UNI_BYTE1               0x10292
#define DR_HOST_RXH_CTRL_UNI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_UNI_BYTE1_t;

#define DR_HOST_RXH_CTRL_UNI_BYTE0               0x10293
#define DR_HOST_RXH_CTRL_UNI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_UNI_BYTE0_t;

#define DR_HOST_RXH_FAIR_UNI_PKT1                0x10294
#define DR_HOST_RXH_FAIR_UNI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_UNI_PKT1_t;

#define DR_HOST_RXH_FAIR_UNI_PKT0                0x10295
#define DR_HOST_RXH_FAIR_UNI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_UNI_PKT0_t;

#define DR_HOST_RXH_FAIR_UNI_BYTE2               0x10296
#define DR_HOST_RXH_FAIR_UNI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_UNI_BYTE2_t;

#define DR_HOST_RXH_FAIR_UNI_BYTE1               0x10297
#define DR_HOST_RXH_FAIR_UNI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_UNI_BYTE1_t;

#define DR_HOST_RXH_FAIR_UNI_BYTE0               0x10298
#define DR_HOST_RXH_FAIR_UNI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_UNI_BYTE0_t;

#define DR_HOST_TXH_HI_RES_UNI_PKT1              0x10299
#define DR_HOST_TXH_HI_RES_UNI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_UNI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_UNI_PKT1_t;

#define DR_HOST_TXH_HI_RES_UNI_PKT0              0x1029a
#define DR_HOST_TXH_HI_RES_UNI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_UNI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_UNI_PKT0_t;

#define DR_HOST_TXH_HI_RES_UNI_BYTE2             0x1029b
#define DR_HOST_TXH_HI_RES_UNI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_UNI_BYTE2_t;

#define DR_HOST_TXH_HI_RES_UNI_BYTE1             0x1029c
#define DR_HOST_TXH_HI_RES_UNI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_UNI_BYTE1_t;

#define DR_HOST_TXH_HI_RES_UNI_BYTE0             0x1029d
#define DR_HOST_TXH_HI_RES_UNI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_UNI_BYTE0_t;

#define DR_HOST_TXH_MED_CIR_UNI_PKT1             0x1029e
#define DR_HOST_TXH_MED_CIR_UNI_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_UNI_PKT1_t;

#define DR_HOST_TXH_MED_CIR_UNI_PKT0             0x1029f
#define DR_HOST_TXH_MED_CIR_UNI_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_UNI_PKT0_t;

#define DR_HOST_TXH_MED_CIR_UNI_BYTE2            0x102a0
#define DR_HOST_TXH_MED_CIR_UNI_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_UNI_BYTE2_t;

#define DR_HOST_TXH_MED_CIR_UNI_BYTE1            0x102a1
#define DR_HOST_TXH_MED_CIR_UNI_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_UNI_BYTE1_t;

#define DR_HOST_TXH_MED_CIR_UNI_BYTE0            0x102a2
#define DR_HOST_TXH_MED_CIR_UNI_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_UNI_BYTE0_t;

#define DR_HOST_TXH_MED_EIR_UNI_PKT1             0x102a3
#define DR_HOST_TXH_MED_EIR_UNI_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_UNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_UNI_PKT1_t;

#define DR_HOST_TXH_MED_EIR_UNI_PKT0             0x102a4
#define DR_HOST_TXH_MED_EIR_UNI_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_UNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_UNI_PKT0_t;

#define DR_HOST_TXH_MED_EIR_UNI_BYTE2            0x102a5
#define DR_HOST_TXH_MED_EIR_UNI_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_UNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_UNI_BYTE2_t;

#define DR_HOST_TXH_MED_EIR_UNI_BYTE1            0x102a6
#define DR_HOST_TXH_MED_EIR_UNI_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_UNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_UNI_BYTE1_t;

#define DR_HOST_TXH_MED_EIR_UNI_BYTE0            0x102a7
#define DR_HOST_TXH_MED_EIR_UNI_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_UNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_UNI_BYTE0_t;

#define DR_HOST_TXH_CTRL_UNI_PKT1                0x102a8
#define DR_HOST_TXH_CTRL_UNI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_UNI_PKT1_t;

#define DR_HOST_TXH_CTRL_UNI_PKT0                0x102a9
#define DR_HOST_TXH_CTRL_UNI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_UNI_PKT0_t;

#define DR_HOST_TXH_CTRL_UNI_BYTE2               0x102aa
#define DR_HOST_TXH_CTRL_UNI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_UNI_BYTE2_t;

#define DR_HOST_TXH_CTRL_UNI_BYTE1               0x102ab
#define DR_HOST_TXH_CTRL_UNI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_UNI_BYTE1_t;

#define DR_HOST_TXH_CTRL_UNI_BYTE0               0x102ac
#define DR_HOST_TXH_CTRL_UNI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_UNI_BYTE0_t;

#define DR_HOST_TXH_FAIR_UNI_PKT1                0x102ad
#define DR_HOST_TXH_FAIR_UNI_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_UNI_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_UNI_PKT1_t;

#define DR_HOST_TXH_FAIR_UNI_PKT0                0x102ae
#define DR_HOST_TXH_FAIR_UNI_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_UNI_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_UNI_PKT0_t;

#define DR_HOST_TXH_FAIR_UNI_BYTE2               0x102af
#define DR_HOST_TXH_FAIR_UNI_BYTE2_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_UNI_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_UNI_BYTE2_t;

#define DR_HOST_TXH_FAIR_UNI_BYTE1               0x102b0
#define DR_HOST_TXH_FAIR_UNI_BYTE1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_UNI_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_UNI_BYTE1_t;

#define DR_HOST_TXH_FAIR_UNI_BYTE0               0x102b1
#define DR_HOST_TXH_FAIR_UNI_BYTE0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_UNI_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_UNI_BYTE0_t;

#define DR_HOST_TXH_HI_RES_WUNI_PKT1             0x102b2
#define DR_HOST_TXH_HI_RES_WUNI_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WUNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WUNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WUNI_PKT1_t;

#define DR_HOST_TXH_HI_RES_WUNI_PKT0             0x102b3
#define DR_HOST_TXH_HI_RES_WUNI_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WUNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WUNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WUNI_PKT0_t;

#define DR_HOST_TXH_HI_RES_WUNI_BYTE2            0x102b4
#define DR_HOST_TXH_HI_RES_WUNI_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_RES_WUNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WUNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WUNI_BYTE2_t;

#define DR_HOST_TXH_HI_RES_WUNI_BYTE1            0x102b5
#define DR_HOST_TXH_HI_RES_WUNI_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WUNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WUNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WUNI_BYTE1_t;

#define DR_HOST_TXH_HI_RES_WUNI_BYTE0            0x102b6
#define DR_HOST_TXH_HI_RES_WUNI_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WUNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WUNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WUNI_BYTE0_t;

#define DR_HOST_TXH_MED_CIR_WUNI_PKT1            0x102b7
#define DR_HOST_TXH_MED_CIR_WUNI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WUNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WUNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WUNI_PKT1_t;

#define DR_HOST_TXH_MED_CIR_WUNI_PKT0            0x102b8
#define DR_HOST_TXH_MED_CIR_WUNI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WUNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WUNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WUNI_PKT0_t;

#define DR_HOST_TXH_MED_CIR_WUNI_BYTE2           0x102b9
#define DR_HOST_TXH_MED_CIR_WUNI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_CIR_WUNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WUNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WUNI_BYTE2_t;

#define DR_HOST_TXH_MED_CIR_WUNI_BYTE1           0x102ba
#define DR_HOST_TXH_MED_CIR_WUNI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WUNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WUNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WUNI_BYTE1_t;

#define DR_HOST_TXH_MED_CIR_WUNI_BYTE0           0x102bb
#define DR_HOST_TXH_MED_CIR_WUNI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WUNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WUNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WUNI_BYTE0_t;

#define DR_HOST_TXH_MED_EIR_WUNI_PKT1            0x102bc
#define DR_HOST_TXH_MED_EIR_WUNI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WUNI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WUNI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WUNI_PKT1_t;

#define DR_HOST_TXH_MED_EIR_WUNI_PKT0            0x102bd
#define DR_HOST_TXH_MED_EIR_WUNI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WUNI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WUNI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WUNI_PKT0_t;

#define DR_HOST_TXH_MED_EIR_WUNI_BYTE2           0x102be
#define DR_HOST_TXH_MED_EIR_WUNI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_EIR_WUNI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WUNI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WUNI_BYTE2_t;

#define DR_HOST_TXH_MED_EIR_WUNI_BYTE1           0x102bf
#define DR_HOST_TXH_MED_EIR_WUNI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WUNI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WUNI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WUNI_BYTE1_t;

#define DR_HOST_TXH_MED_EIR_WUNI_BYTE0           0x102c0
#define DR_HOST_TXH_MED_EIR_WUNI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WUNI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WUNI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WUNI_BYTE0_t;

#define DR_HOST_TXH_CTRL_WUNI_PKT1               0x102c1
#define DR_HOST_TXH_CTRL_WUNI_PKT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WUNI_PKT1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WUNI_PKT1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WUNI_PKT1_t;

#define DR_HOST_TXH_CTRL_WUNI_PKT0               0x102c2
#define DR_HOST_TXH_CTRL_WUNI_PKT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WUNI_PKT0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WUNI_PKT0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WUNI_PKT0_t;

#define DR_HOST_TXH_CTRL_WUNI_BYTE2              0x102c3
#define DR_HOST_TXH_CTRL_WUNI_BYTE2_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_CTRL_WUNI_BYTE2  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WUNI_BYTE2  :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WUNI_BYTE2_t;

#define DR_HOST_TXH_CTRL_WUNI_BYTE1              0x102c4
#define DR_HOST_TXH_CTRL_WUNI_BYTE1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WUNI_BYTE1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WUNI_BYTE1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WUNI_BYTE1_t;

#define DR_HOST_TXH_CTRL_WUNI_BYTE0              0x102c5
#define DR_HOST_TXH_CTRL_WUNI_BYTE0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WUNI_BYTE0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WUNI_BYTE0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WUNI_BYTE0_t;

#define DR_HOST_TXH_FAIR_WUNI_PKT1               0x102c6
#define DR_HOST_TXH_FAIR_WUNI_PKT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WUNI_PKT1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WUNI_PKT1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WUNI_PKT1_t;

#define DR_HOST_TXH_FAIR_WUNI_PKT0               0x102c7
#define DR_HOST_TXH_FAIR_WUNI_PKT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WUNI_PKT0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WUNI_PKT0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WUNI_PKT0_t;

#define DR_HOST_TXH_FAIR_WUNI_BYTE2              0x102c8
#define DR_HOST_TXH_FAIR_WUNI_BYTE2_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_FAIR_WUNI_BYTE2  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WUNI_BYTE2  :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WUNI_BYTE2_t;

#define DR_HOST_TXH_FAIR_WUNI_BYTE1              0x102c9
#define DR_HOST_TXH_FAIR_WUNI_BYTE1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WUNI_BYTE1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WUNI_BYTE1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WUNI_BYTE1_t;

#define DR_HOST_TXH_FAIR_WUNI_BYTE0              0x102ca
#define DR_HOST_TXH_FAIR_WUNI_BYTE0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WUNI_BYTE0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WUNI_BYTE0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WUNI_BYTE0_t;

#define DR_HOST_RXH_HI_RES_MULTI_PKT1            0x102cb
#define DR_HOST_RXH_HI_RES_MULTI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_MULTI_PKT1_t;

#define DR_HOST_RXH_HI_RES_MULTI_PKT0            0x102cc
#define DR_HOST_RXH_HI_RES_MULTI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_MULTI_PKT0_t;

#define DR_HOST_RXH_HI_RES_MULTI_BYTE2           0x102cd
#define DR_HOST_RXH_HI_RES_MULTI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_MULTI_BYTE2_t;

#define DR_HOST_RXH_HI_RES_MULTI_BYTE1           0x102ce
#define DR_HOST_RXH_HI_RES_MULTI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_MULTI_BYTE1_t;

#define DR_HOST_RXH_HI_RES_MULTI_BYTE0           0x102cf
#define DR_HOST_RXH_HI_RES_MULTI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_HI_RES_MULTI_BYTE0_t;

#define DR_HOST_RXH_MED_CIR_MULTI_PKT1           0x102d0
#define DR_HOST_RXH_MED_CIR_MULTI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_MULTI_PKT1_t;

#define DR_HOST_RXH_MED_CIR_MULTI_PKT0           0x102d1
#define DR_HOST_RXH_MED_CIR_MULTI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_MULTI_PKT0_t;

#define DR_HOST_RXH_MED_CIR_MULTI_BYTE2          0x102d2
#define DR_HOST_RXH_MED_CIR_MULTI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_MULTI_BYTE2_t;

#define DR_HOST_RXH_MED_CIR_MULTI_BYTE1          0x102d3
#define DR_HOST_RXH_MED_CIR_MULTI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_MULTI_BYTE1_t;

#define DR_HOST_RXH_MED_CIR_MULTI_BYTE0          0x102d4
#define DR_HOST_RXH_MED_CIR_MULTI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_CIR_MULTI_BYTE0_t;

#define DR_HOST_RXH_MED_EIR_MULTI_PKT1           0x102d5
#define DR_HOST_RXH_MED_EIR_MULTI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_MULTI_PKT1_t;

#define DR_HOST_RXH_MED_EIR_MULTI_PKT0           0x102d6
#define DR_HOST_RXH_MED_EIR_MULTI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_MULTI_PKT0_t;

#define DR_HOST_RXH_MED_EIR_MULTI_BYTE2          0x102d7
#define DR_HOST_RXH_MED_EIR_MULTI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_MULTI_BYTE2_t;

#define DR_HOST_RXH_MED_EIR_MULTI_BYTE1          0x102d8
#define DR_HOST_RXH_MED_EIR_MULTI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_MULTI_BYTE1_t;

#define DR_HOST_RXH_MED_EIR_MULTI_BYTE0          0x102d9
#define DR_HOST_RXH_MED_EIR_MULTI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_MED_EIR_MULTI_BYTE0_t;

#define DR_HOST_RXH_CTRL_MULTI_PKT1              0x102da
#define DR_HOST_RXH_CTRL_MULTI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_MULTI_PKT1_t;

#define DR_HOST_RXH_CTRL_MULTI_PKT0              0x102db
#define DR_HOST_RXH_CTRL_MULTI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_MULTI_PKT0_t;

#define DR_HOST_RXH_CTRL_MULTI_BYTE2             0x102dc
#define DR_HOST_RXH_CTRL_MULTI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_MULTI_BYTE2_t;

#define DR_HOST_RXH_CTRL_MULTI_BYTE1             0x102dd
#define DR_HOST_RXH_CTRL_MULTI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_MULTI_BYTE1_t;

#define DR_HOST_RXH_CTRL_MULTI_BYTE0             0x102de
#define DR_HOST_RXH_CTRL_MULTI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_CTRL_MULTI_BYTE0_t;

#define DR_HOST_RXH_FAIR_MULTI_PKT1              0x102df
#define DR_HOST_RXH_FAIR_MULTI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_MULTI_PKT1_t;

#define DR_HOST_RXH_FAIR_MULTI_PKT0              0x102e0
#define DR_HOST_RXH_FAIR_MULTI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_MULTI_PKT0_t;

#define DR_HOST_RXH_FAIR_MULTI_BYTE2             0x102e1
#define DR_HOST_RXH_FAIR_MULTI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXH_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_MULTI_BYTE2_t;

#define DR_HOST_RXH_FAIR_MULTI_BYTE1             0x102e2
#define DR_HOST_RXH_FAIR_MULTI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_MULTI_BYTE1_t;

#define DR_HOST_RXH_FAIR_MULTI_BYTE0             0x102e3
#define DR_HOST_RXH_FAIR_MULTI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXH_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXH_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_RXH_FAIR_MULTI_BYTE0_t;

#define DR_HOST_TXH_HI_RES_MULTI_PKT1            0x102e4
#define DR_HOST_TXH_HI_RES_MULTI_PKT1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_MULTI_PKT1_t;

#define DR_HOST_TXH_HI_RES_MULTI_PKT0            0x102e5
#define DR_HOST_TXH_HI_RES_MULTI_PKT0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_MULTI_PKT0_t;

#define DR_HOST_TXH_HI_RES_MULTI_BYTE2           0x102e6
#define DR_HOST_TXH_HI_RES_MULTI_BYTE2_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_MULTI_BYTE2_t;

#define DR_HOST_TXH_HI_RES_MULTI_BYTE1           0x102e7
#define DR_HOST_TXH_HI_RES_MULTI_BYTE1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_MULTI_BYTE1_t;

#define DR_HOST_TXH_HI_RES_MULTI_BYTE0           0x102e8
#define DR_HOST_TXH_HI_RES_MULTI_BYTE0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_MULTI_BYTE0_t;

#define DR_HOST_TXH_MED_CIR_MULTI_PKT1           0x102e9
#define DR_HOST_TXH_MED_CIR_MULTI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_MULTI_PKT1_t;

#define DR_HOST_TXH_MED_CIR_MULTI_PKT0           0x102ea
#define DR_HOST_TXH_MED_CIR_MULTI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_MULTI_PKT0_t;

#define DR_HOST_TXH_MED_CIR_MULTI_BYTE2          0x102eb
#define DR_HOST_TXH_MED_CIR_MULTI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_MULTI_BYTE2_t;

#define DR_HOST_TXH_MED_CIR_MULTI_BYTE1          0x102ec
#define DR_HOST_TXH_MED_CIR_MULTI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_MULTI_BYTE1_t;

#define DR_HOST_TXH_MED_CIR_MULTI_BYTE0          0x102ed
#define DR_HOST_TXH_MED_CIR_MULTI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_MULTI_BYTE0_t;

#define DR_HOST_TXH_MED_EIR_MULTI_PKT1           0x102ee
#define DR_HOST_TXH_MED_EIR_MULTI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_MULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_MULTI_PKT1_t;

#define DR_HOST_TXH_MED_EIR_MULTI_PKT0           0x102ef
#define DR_HOST_TXH_MED_EIR_MULTI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_MULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_MULTI_PKT0_t;

#define DR_HOST_TXH_MED_EIR_MULTI_BYTE2          0x102f0
#define DR_HOST_TXH_MED_EIR_MULTI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_MULTI_BYTE2_t;

#define DR_HOST_TXH_MED_EIR_MULTI_BYTE1          0x102f1
#define DR_HOST_TXH_MED_EIR_MULTI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_MULTI_BYTE1_t;

#define DR_HOST_TXH_MED_EIR_MULTI_BYTE0          0x102f2
#define DR_HOST_TXH_MED_EIR_MULTI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_MULTI_BYTE0_t;

#define DR_HOST_TXH_CTRL_MULTI_PKT1              0x102f3
#define DR_HOST_TXH_CTRL_MULTI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_MULTI_PKT1_t;

#define DR_HOST_TXH_CTRL_MULTI_PKT0              0x102f4
#define DR_HOST_TXH_CTRL_MULTI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_MULTI_PKT0_t;

#define DR_HOST_TXH_CTRL_MULTI_BYTE2             0x102f5
#define DR_HOST_TXH_CTRL_MULTI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_MULTI_BYTE2_t;

#define DR_HOST_TXH_CTRL_MULTI_BYTE1             0x102f6
#define DR_HOST_TXH_CTRL_MULTI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_MULTI_BYTE1_t;

#define DR_HOST_TXH_CTRL_MULTI_BYTE0             0x102f7
#define DR_HOST_TXH_CTRL_MULTI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_MULTI_BYTE0_t;

#define DR_HOST_TXH_FAIR_MULTI_PKT1              0x102f8
#define DR_HOST_TXH_FAIR_MULTI_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_MULTI_PKT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_MULTI_PKT1_t;

#define DR_HOST_TXH_FAIR_MULTI_PKT0              0x102f9
#define DR_HOST_TXH_FAIR_MULTI_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_MULTI_PKT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_MULTI_PKT0_t;

#define DR_HOST_TXH_FAIR_MULTI_BYTE2             0x102fa
#define DR_HOST_TXH_FAIR_MULTI_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_MULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_MULTI_BYTE2_t;

#define DR_HOST_TXH_FAIR_MULTI_BYTE1             0x102fb
#define DR_HOST_TXH_FAIR_MULTI_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_MULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_MULTI_BYTE1_t;

#define DR_HOST_TXH_FAIR_MULTI_BYTE0             0x102fc
#define DR_HOST_TXH_FAIR_MULTI_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_MULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_MULTI_BYTE0_t;

#define DR_HOST_TXH_HI_RES_WMULTI_PKT1           0x102fd
#define DR_HOST_TXH_HI_RES_WMULTI_PKT1_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WMULTI_PKT1_t;

#define DR_HOST_TXH_HI_RES_WMULTI_PKT0           0x102fe
#define DR_HOST_TXH_HI_RES_WMULTI_PKT0_dft       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WMULTI_PKT0_t;

#define DR_HOST_TXH_HI_RES_WMULTI_BYTE2          0x102ff
#define DR_HOST_TXH_HI_RES_WMULTI_BYTE2_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_HI_RES_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WMULTI_BYTE2_t;

#define DR_HOST_TXH_HI_RES_WMULTI_BYTE1          0x10300
#define DR_HOST_TXH_HI_RES_WMULTI_BYTE1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WMULTI_BYTE1_t;

#define DR_HOST_TXH_HI_RES_WMULTI_BYTE0          0x10301
#define DR_HOST_TXH_HI_RES_WMULTI_BYTE0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_HI_RES_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_HI_RES_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_HI_RES_WMULTI_BYTE0_t;

#define DR_HOST_TXH_MED_CIR_WMULTI_PKT1          0x10302
#define DR_HOST_TXH_MED_CIR_WMULTI_PKT1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WMULTI_PKT1_t;

#define DR_HOST_TXH_MED_CIR_WMULTI_PKT0          0x10303
#define DR_HOST_TXH_MED_CIR_WMULTI_PKT0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WMULTI_PKT0_t;

#define DR_HOST_TXH_MED_CIR_WMULTI_BYTE2         0x10304
#define DR_HOST_TXH_MED_CIR_WMULTI_BYTE2_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_CIR_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WMULTI_BYTE2_t;

#define DR_HOST_TXH_MED_CIR_WMULTI_BYTE1         0x10305
#define DR_HOST_TXH_MED_CIR_WMULTI_BYTE1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WMULTI_BYTE1_t;

#define DR_HOST_TXH_MED_CIR_WMULTI_BYTE0         0x10306
#define DR_HOST_TXH_MED_CIR_WMULTI_BYTE0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_CIR_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_CIR_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_CIR_WMULTI_BYTE0_t;

#define DR_HOST_TXH_MED_EIR_WMULTI_PKT1          0x10307
#define DR_HOST_TXH_MED_EIR_WMULTI_PKT1_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WMULTI_PKT1_t;

#define DR_HOST_TXH_MED_EIR_WMULTI_PKT0          0x10308
#define DR_HOST_TXH_MED_EIR_WMULTI_PKT0_dft      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WMULTI_PKT0_t;

#define DR_HOST_TXH_MED_EIR_WMULTI_BYTE2         0x10309
#define DR_HOST_TXH_MED_EIR_WMULTI_BYTE2_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_MED_EIR_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WMULTI_BYTE2_t;

#define DR_HOST_TXH_MED_EIR_WMULTI_BYTE1         0x1030a
#define DR_HOST_TXH_MED_EIR_WMULTI_BYTE1_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WMULTI_BYTE1_t;

#define DR_HOST_TXH_MED_EIR_WMULTI_BYTE0         0x1030b
#define DR_HOST_TXH_MED_EIR_WMULTI_BYTE0_dft     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_MED_EIR_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_MED_EIR_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_MED_EIR_WMULTI_BYTE0_t;

#define DR_HOST_TXH_CTRL_WMULTI_PKT1             0x1030c
#define DR_HOST_TXH_CTRL_WMULTI_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WMULTI_PKT1_t;

#define DR_HOST_TXH_CTRL_WMULTI_PKT0             0x1030d
#define DR_HOST_TXH_CTRL_WMULTI_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WMULTI_PKT0_t;

#define DR_HOST_TXH_CTRL_WMULTI_BYTE2            0x1030e
#define DR_HOST_TXH_CTRL_WMULTI_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_CTRL_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WMULTI_BYTE2_t;

#define DR_HOST_TXH_CTRL_WMULTI_BYTE1            0x1030f
#define DR_HOST_TXH_CTRL_WMULTI_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WMULTI_BYTE1_t;

#define DR_HOST_TXH_CTRL_WMULTI_BYTE0            0x10310
#define DR_HOST_TXH_CTRL_WMULTI_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_CTRL_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_CTRL_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_CTRL_WMULTI_BYTE0_t;

#define DR_HOST_TXH_FAIR_WMULTI_PKT1             0x10311
#define DR_HOST_TXH_FAIR_WMULTI_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WMULTI_PKT1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WMULTI_PKT1_t;

#define DR_HOST_TXH_FAIR_WMULTI_PKT0             0x10312
#define DR_HOST_TXH_FAIR_WMULTI_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WMULTI_PKT0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WMULTI_PKT0_t;

#define DR_HOST_TXH_FAIR_WMULTI_BYTE2            0x10313
#define DR_HOST_TXH_FAIR_WMULTI_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TXH_FAIR_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WMULTI_BYTE2 :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WMULTI_BYTE2_t;

#define DR_HOST_TXH_FAIR_WMULTI_BYTE1            0x10314
#define DR_HOST_TXH_FAIR_WMULTI_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WMULTI_BYTE1 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WMULTI_BYTE1_t;

#define DR_HOST_TXH_FAIR_WMULTI_BYTE0            0x10315
#define DR_HOST_TXH_FAIR_WMULTI_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_FAIR_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_FAIR_WMULTI_BYTE0 : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_FAIR_WMULTI_BYTE0_t;

#define DR_HOST_TXH_PROT_CNT                     0x10316
#define DR_HOST_TXH_PROT_CNT_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXH_PROT_CNT         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXH_PROT_CNT         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_HOST_TXH_PROT_CNT_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::mate
 */

#define DR_MATE_FT_TTL                           0x1001e
#define DR_MATE_FT_TTL_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 FT_TTL               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FT_TTL               :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FT_TTL_t;

#define DR_MATE_CR3                              0x10023
#define DR_MATE_CR3_dft                          0x0023
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 WS_ALL               :  1 ; /* bits 12:12 */
    cs_uint16 FT                   :  2 ; /* bits 11:10 */
    cs_uint16 FT_ENABLE            :  1 ; /* bits 9:9 */
    cs_uint16 WS_STRICT            :  1 ; /* bits 8:8 */
    cs_uint16 WS_DROP_OFF          :  1 ; /* bits 7:7 */
    cs_uint16 WE_DROP_OFF          :  1 ; /* bits 6:6 */
    cs_uint16 RESERVED5            :  1 ; /* bits 5:5 */
    cs_uint16 RESERVED4            :  1 ; /* bits 4:4 */
    cs_uint16 FRM_UNDERFLOW_EN     :  1 ; /* bits 3:3 */
    cs_uint16 FRM_RUNT_FLTR_OFF    :  1 ; /* bits 2:2 */
    cs_uint16 INSERT_T             :  1 ; /* bits 1:1 */
    cs_uint16 MATE_CRC_EN          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_CRC_EN          :  1 ; /* bits 0:0 */
    cs_uint16 INSERT_T             :  1 ; /* bits 1:1 */
    cs_uint16 FRM_RUNT_FLTR_OFF    :  1 ; /* bits 2:2 */
    cs_uint16 FRM_UNDERFLOW_EN     :  1 ; /* bits 3:3 */
    cs_uint16 RESERVED4            :  1 ; /* bits 4:4 */
    cs_uint16 RESERVED5            :  1 ; /* bits 5:5 */
    cs_uint16 WE_DROP_OFF          :  1 ; /* bits 6:6 */
    cs_uint16 WS_DROP_OFF          :  1 ; /* bits 7:7 */
    cs_uint16 WS_STRICT            :  1 ; /* bits 8:8 */
    cs_uint16 FT_ENABLE            :  1 ; /* bits 9:9 */
    cs_uint16 FT                   :  2 ; /* bits 11:10 */
    cs_uint16 WS_ALL               :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_CR3_t;

#define DR_MATE_FRM_CRD_OFFSET                   0x10050
#define DR_MATE_FRM_CRD_OFFSET_dft               0x0c00
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRM_CRD_OFFSET       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_CRD_OFFSET       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_CRD_OFFSET_t;

#define DR_MATE_FRM_CRD_SHFT                     0x10051
#define DR_MATE_FRM_CRD_SHFT_dft                 0x0009
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 FRM_CRD_SHFT         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_CRD_SHFT         :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_CRD_SHFT_t;

#define DR_MATE_IDLE_CTRL                        0x10052
#define DR_MATE_IDLE_CTRL_dft                    0x040c
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 IDLE_SEQ_LENGTH      :  3 ; /* bits 12:10 */
    cs_uint16 NUM_OF_IDLES         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NUM_OF_IDLES         : 10 ; /* bits 9:0 */
    cs_uint16 IDLE_SEQ_LENGTH      :  3 ; /* bits 12:10 */
    cs_uint16 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_IDLE_CTRL_t;

#define DR_MATE_TOM_FRM_SZ                       0x10053
#define DR_MATE_TOM_FRM_SZ_dft                   0x05e9
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_FRM_SZ           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_FRM_SZ           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_FRM_SZ_t;

#define DR_MATE_TOM_FRM_HDR_SZ                   0x10054
#define DR_MATE_TOM_FRM_HDR_SZ_dft               0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 TOM_FRM_HDR_SZ       :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_FRM_HDR_SZ       :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_FRM_HDR_SZ_t;

#define DR_MATE_TOM_FIFO_TH                      0x10055
#define DR_MATE_TOM_FIFO_TH_dft                  0x0c36
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 TOM_FIFOSYNC_TH      :  6 ; /* bits 13:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 TOM_FIFOFULL_TH      :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_FIFOFULL_TH      :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 TOM_FIFOSYNC_TH      :  6 ; /* bits 13:8 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_FIFO_TH_t;

#define DR_MATE_IDLE5_CHAR                       0x10056
#define DR_MATE_IDLE5_CHAR_dft                   0x0107
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 IDLE5_CHAR           :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE5_CHAR           :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_IDLE5_CHAR_t;

#define DR_MATE_IDLE4_CHAR                       0x10057
#define DR_MATE_IDLE4_CHAR_dft                   0x0107
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 IDLE4_CHAR           :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE4_CHAR           :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_IDLE4_CHAR_t;

#define DR_MATE_IDLE3_CHAR                       0x10058
#define DR_MATE_IDLE3_CHAR_dft                   0x0107
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 IDLE3_CHAR           :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE3_CHAR           :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_IDLE3_CHAR_t;

#define DR_MATE_IDLE2_CHAR                       0x10059
#define DR_MATE_IDLE2_CHAR_dft                   0x0107
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 IDLE2_CHAR           :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE2_CHAR           :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_IDLE2_CHAR_t;

#define DR_MATE_IDLE1_CHAR                       0x1005a
#define DR_MATE_IDLE1_CHAR_dft                   0x0107
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 IDLE1_CHAR           :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE1_CHAR           :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_IDLE1_CHAR_t;

#define DR_MATE_T_CHAR                           0x1005b
#define DR_MATE_T_CHAR_dft                       0x01fd
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 T_CHAR               :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 T_CHAR               :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_T_CHAR_t;

#define DR_MATE_MATE_STARTSEQ_SZ                 0x1005c
#define DR_MATE_MATE_STARTSEQ_SZ_dft             0x0008
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 MATE_STARTSEQ_SZ     :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_SZ     :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_SZ_t;

#define DR_MATE_MATE_STARTSEQ_D7                 0x1005d
#define DR_MATE_MATE_STARTSEQ_D7_dft             0x00d5
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D7     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D7     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D7_t;

#define DR_MATE_MATE_STARTSEQ_D6                 0x1005e
#define DR_MATE_MATE_STARTSEQ_D6_dft             0x0055
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D6     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D6     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D6_t;

#define DR_MATE_MATE_STARTSEQ_D5                 0x1005f
#define DR_MATE_MATE_STARTSEQ_D5_dft             0x0055
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D5     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D5     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D5_t;

#define DR_MATE_MATE_STARTSEQ_D4                 0x10060
#define DR_MATE_MATE_STARTSEQ_D4_dft             0x0055
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D4     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D4     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D4_t;

#define DR_MATE_MATE_STARTSEQ_D3                 0x10061
#define DR_MATE_MATE_STARTSEQ_D3_dft             0x0055
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D3     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D3     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D3_t;

#define DR_MATE_MATE_STARTSEQ_D2                 0x10062
#define DR_MATE_MATE_STARTSEQ_D2_dft             0x0055
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D2     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D2     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D2_t;

#define DR_MATE_MATE_STARTSEQ_D1                 0x10063
#define DR_MATE_MATE_STARTSEQ_D1_dft             0x0055
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D1     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D1     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D1_t;

#define DR_MATE_MATE_STARTSEQ_D0                 0x10064
#define DR_MATE_MATE_STARTSEQ_D0_dft             0x01fb
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MATE_STARTSEQ_D0     :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MATE_STARTSEQ_D0     :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_MATE_STARTSEQ_D0_t;

#define DR_MATE_SERDES_STAT                      0x101a7
#define DR_MATE_SERDES_STAT_dft                  0x0009
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 SERDES_INIT          :  1 ; /* bits 3:3 */
    cs_uint16 SERDES_ERR           :  1 ; /* bits 2:2 */
    cs_uint16 SMODE                :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SMODE                :  2 ; /* bits 1:0 */
    cs_uint16 SERDES_ERR           :  1 ; /* bits 2:2 */
    cs_uint16 SERDES_INIT          :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_SERDES_STAT_t;
#define     SMODE_SMODE_RSVD0                             0x00
#define     SMODE_SMODE_PMC8355                           0x01
#define     SMODE_SMODE_RSVD1                             0x02
#define     SMODE_SMODE_BRCM8011                          0x03

#define DR_MATE_FRM_RUNT                         0x101a8
#define DR_MATE_FRM_RUNT_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 FRM_RUNT             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_RUNT             :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_RUNT_t;

#define DR_MATE_FRM_GIANT                        0x101a9
#define DR_MATE_FRM_GIANT_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 FRM_GIANT            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_GIANT            :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_GIANT_t;

#define DR_MATE_FRM_LOS                          0x101aa
#define DR_MATE_FRM_LOS_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRM_LOS              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_LOS              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_LOS_t;

#define DR_MATE_FRM_OVERFLOW                     0x101ab
#define DR_MATE_FRM_OVERFLOW_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRM_OVERFLOW         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_OVERFLOW         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_OVERFLOW_t;

#define DR_MATE_FRM_UNDERFLOW                    0x101ac
#define DR_MATE_FRM_UNDERFLOW_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRM_UNDERFLOW        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_UNDERFLOW        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_UNDERFLOW_t;

#define DR_MATE_FRM_CRC_ERR                      0x101ad
#define DR_MATE_FRM_CRC_ERR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRM_CRC_ERR          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_CRC_ERR          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_CRC_ERR_t;

#define DR_MATE_FRM_CTRL_SQNC_ERR                0x101ae
#define DR_MATE_FRM_CTRL_SQNC_ERR_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FRM_CTRL_SQNC_ERR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FRM_CTRL_SQNC_ERR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_FRM_CTRL_SQNC_ERR_t;

#define DR_MATE_TOM_WE_PKT1                      0x10278
#define DR_MATE_TOM_WE_PKT1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WE_PKT1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WE_PKT1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WE_PKT1_t;

#define DR_MATE_TOM_WE_PKT0                      0x10279
#define DR_MATE_TOM_WE_PKT0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WE_PKT0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WE_PKT0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WE_PKT0_t;

#define DR_MATE_TOM_WE_BYTE2                     0x1027a
#define DR_MATE_TOM_WE_BYTE2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TOM_WE_BYTE2         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WE_BYTE2         :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WE_BYTE2_t;

#define DR_MATE_TOM_WE_BYTE1                     0x1027b
#define DR_MATE_TOM_WE_BYTE1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WE_BYTE1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WE_BYTE1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WE_BYTE1_t;

#define DR_MATE_TOM_WE_BYTE0                     0x1027c
#define DR_MATE_TOM_WE_BYTE0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WE_BYTE0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WE_BYTE0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WE_BYTE0_t;

#define DR_MATE_TOM_SETWS_PKT1                   0x1027d
#define DR_MATE_TOM_SETWS_PKT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_SETWS_PKT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_SETWS_PKT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_SETWS_PKT1_t;

#define DR_MATE_TOM_SETWS_PKT0                   0x1027e
#define DR_MATE_TOM_SETWS_PKT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_SETWS_PKT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_SETWS_PKT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_SETWS_PKT0_t;

#define DR_MATE_TOM_FT_PKT1                      0x1037c
#define DR_MATE_TOM_FT_PKT1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_FT_PKT1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_FT_PKT1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_FT_PKT1_t;

#define DR_MATE_TOM_FT_PKT0                      0x1037d
#define DR_MATE_TOM_FT_PKT0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_FT_PKT0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_FT_PKT0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_FT_PKT0_t;

#define DR_MATE_TOM_WS_PKT1                      0x10394
#define DR_MATE_TOM_WS_PKT1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WS_PKT1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WS_PKT1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WS_PKT1_t;

#define DR_MATE_TOM_WS_PKT0                      0x10395
#define DR_MATE_TOM_WS_PKT0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WS_PKT0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WS_PKT0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WS_PKT0_t;

#define DR_MATE_TOM_WS_BYTE2                     0x10396
#define DR_MATE_TOM_WS_BYTE2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TOM_WS_BYTE2         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WS_BYTE2         :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WS_BYTE2_t;

#define DR_MATE_TOM_WS_BYTE1                     0x10397
#define DR_MATE_TOM_WS_BYTE1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WS_BYTE1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WS_BYTE1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WS_BYTE1_t;

#define DR_MATE_TOM_WS_BYTE0                     0x10398
#define DR_MATE_TOM_WS_BYTE0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TOM_WS_BYTE0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TOM_WS_BYTE0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MATE_TOM_WS_BYTE0_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::srpf
 */

#define DR_SRPF_TBH_THRESH                       0x10029
#define DR_SRPF_TBH_THRESH_dft                   0x0060
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBH_THRESH           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBH_THRESH           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TBH_THRESH_t;

#define DR_SRPF_TX_SYNC_TFAST1                   0x1002b
#define DR_SRPF_TX_SYNC_TFAST1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TX_SYNC_TFAST1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_SYNC_TFAST1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TX_SYNC_TFAST1_t;

#define DR_SRPF_TX_SYNC_TFAST0                   0x1002c
#define DR_SRPF_TX_SYNC_TFAST0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TX_SYNC_TFAST0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_SYNC_TFAST0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TX_SYNC_TFAST0_t;

#define DR_SRPF_TX_SYNC_TSLOW1                   0x1002d
#define DR_SRPF_TX_SYNC_TSLOW1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TX_SYNC_TSLOW1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_SYNC_TSLOW1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TX_SYNC_TSLOW1_t;

#define DR_SRPF_TX_SYNC_TSLOW0                   0x1002e
#define DR_SRPF_TX_SYNC_TSLOW0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TX_SYNC_TSLOW0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_SYNC_TSLOW0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TX_SYNC_TSLOW0_t;

#define DR_SRPF_IDLE_THRESH                      0x1002f
#define DR_SRPF_IDLE_THRESH_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_THRESH          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_THRESH          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE_THRESH_t;

#define DR_SRPF_ILEN                             0x10030
#define DR_SRPF_ILEN_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 ILEN                 :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ILEN                 :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_ILEN_t;

#define DR_SRPF_MAX_ALLOW                        0x10038
#define DR_SRPF_MAX_ALLOW_dft                    0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAX_ALLOW            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAX_ALLOW            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_MAX_ALLOW_t;

#define DR_SRPF_TB_LTHRESH                       0x1004e
#define DR_SRPF_TB_LTHRESH_dft                   0x0180
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_LTHRESH           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_LTHRESH           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_LTHRESH_t;

#define DR_SRPF_TB_HTHRESH                       0x1004f
#define DR_SRPF_TB_HTHRESH_dft                   0x0800
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_HTHRESH           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_HTHRESH           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_HTHRESH_t;

#define DR_SRPF_TB_MTHRESH                       0x10096
#define DR_SRPF_TB_MTHRESH_dft                   0x0180
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_MTHRESH           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_MTHRESH           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_MTHRESH_t;

#define DR_SRPF_IPS_SND_HEAD                     0x100ab
#define DR_SRPF_IPS_SND_HEAD_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 IPS_SND_HEAD         :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SND_HEAD         :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IPS_SND_HEAD_t;

#define DR_SRPF_IPS_SND_SIZE                     0x100ac
#define DR_SRPF_IPS_SND_SIZE_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 IPS_SND_SIZE         : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SND_SIZE         : 13 ; /* bits 12:0 */
    cs_uint16 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IPS_SND_SIZE_t;

#define DR_SRPF_IPS_SND_DATA3                    0x100ad
#define DR_SRPF_IPS_SND_DATA3_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_SND_DATA3        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SND_DATA3        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IPS_SND_DATA3_t;

#define DR_SRPF_IPS_SND_DATA2                    0x100ae
#define DR_SRPF_IPS_SND_DATA2_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_SND_DATA2        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SND_DATA2        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IPS_SND_DATA2_t;

#define DR_SRPF_IPS_SND_DATA1                    0x100af
#define DR_SRPF_IPS_SND_DATA1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_SND_DATA1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SND_DATA1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IPS_SND_DATA1_t;

#define DR_SRPF_IPS_SND_DATA0                    0x100b0
#define DR_SRPF_IPS_SND_DATA0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_SND_DATA0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_SND_DATA0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IPS_SND_DATA0_t;

#define DR_SRPF_CTL_SND_HEAD                     0x100bb
#define DR_SRPF_CTL_SND_HEAD_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 CTL_SND_HEAD         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_SND_HEAD         : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_CTL_SND_HEAD_t;

#define DR_SRPF_CTL_SND_SIZE                     0x100bc
#define DR_SRPF_CTL_SND_SIZE_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 CTL_SND_SIZE         : 13 ; /* bits 12:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_SND_SIZE         : 13 ; /* bits 12:0 */
    cs_uint16 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_CTL_SND_SIZE_t;

#define DR_SRPF_CTL_SND_DATA3                    0x100bd
#define DR_SRPF_CTL_SND_DATA3_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_SND_DATA3        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_SND_DATA3        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_CTL_SND_DATA3_t;

#define DR_SRPF_CTL_SND_DATA2                    0x100be
#define DR_SRPF_CTL_SND_DATA2_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_SND_DATA2        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_SND_DATA2        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_CTL_SND_DATA2_t;

#define DR_SRPF_CTL_SND_DATA1                    0x100bf
#define DR_SRPF_CTL_SND_DATA1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_SND_DATA1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_SND_DATA1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_CTL_SND_DATA1_t;

#define DR_SRPF_CTL_SND_DATA0                    0x100c0
#define DR_SRPF_CTL_SND_DATA0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_SND_DATA0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_SND_DATA0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_CTL_SND_DATA0_t;

#define DR_SRPF_CTL_SND_DATA4                    0x100c7
#define DR_SRPF_CTL_SND_DATA4_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 CTL_SND_DATA4        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_SND_DATA4        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_CTL_SND_DATA4_t;

#define DR_SRPF_DQT_A1                           0x100d2
#define DR_SRPF_DQT_A1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DQT_A1               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DQT_A1               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_DQT_A1_t;

#define DR_SRPF_DQT_A0                           0x100d3
#define DR_SRPF_DQT_A0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DQT_A0               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DQT_A0               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_DQT_A0_t;

#define DR_SRPF_DQT_B1                           0x100d4
#define DR_SRPF_DQT_B1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DQT_B1               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DQT_B1               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_DQT_B1_t;

#define DR_SRPF_DQT_B0                           0x100d5
#define DR_SRPF_DQT_B0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DQT_B0               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DQT_B0               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_DQT_B0_t;

#define DR_SRPF_DQT_C1                           0x100d6
#define DR_SRPF_DQT_C1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DQT_C1               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DQT_C1               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_DQT_C1_t;

#define DR_SRPF_DQT_C0                           0x100d7
#define DR_SRPF_DQT_C0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DQT_C0               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DQT_C0               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_DQT_C0_t;

#define DR_SRPF_MY_USAGE1                        0x101bc
#define DR_SRPF_MY_USAGE1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 MY_USAGE1            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_USAGE1            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_MY_USAGE1_t;

#define DR_SRPF_MY_USAGE0                        0x101bd
#define DR_SRPF_MY_USAGE0_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MY_USAGE0            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_USAGE0            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_MY_USAGE0_t;

#define DR_SRPF_FWD_RATE1                        0x101be
#define DR_SRPF_FWD_RATE1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 FWD_RATE1            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FWD_RATE1            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_FWD_RATE1_t;

#define DR_SRPF_FWD_RATE0                        0x101bf
#define DR_SRPF_FWD_RATE0_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FWD_RATE0            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FWD_RATE0            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_FWD_RATE0_t;

#define DR_SRPF_MY_USAGE_CNG1                    0x101da
#define DR_SRPF_MY_USAGE_CNG1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 MY_USAGE_CNG1        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_USAGE_CNG1        :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_MY_USAGE_CNG1_t;

#define DR_SRPF_MY_USAGE_CNG0                    0x101db
#define DR_SRPF_MY_USAGE_CNG0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MY_USAGE_CNG0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_USAGE_CNG0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_MY_USAGE_CNG0_t;

#define DR_SRPF_FWD_RATE_CNG1                    0x101dc
#define DR_SRPF_FWD_RATE_CNG1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 FWD_RATE_CNG1        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FWD_RATE_CNG1        :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_FWD_RATE_CNG1_t;

#define DR_SRPF_FWD_RATE_CNG0                    0x101dd
#define DR_SRPF_FWD_RATE_CNG0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FWD_RATE_CNG0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FWD_RATE_CNG0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_FWD_RATE_CNG0_t;

#define DR_SRPF_NRXMIT_RATE1                     0x101de
#define DR_SRPF_NRXMIT_RATE1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 NRXMIT_RATE1         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NRXMIT_RATE1         :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_NRXMIT_RATE1_t;

#define DR_SRPF_NRXMIT_RATE0                     0x101df
#define DR_SRPF_NRXMIT_RATE0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NRXMIT_RATE0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NRXMIT_RATE0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_NRXMIT_RATE0_t;

#define DR_SRPF_TB_HI_PKT1                       0x10264
#define DR_SRPF_TB_HI_PKT1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_HI_PKT1           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_HI_PKT1           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_HI_PKT1_t;

#define DR_SRPF_TB_HI_PKT0                       0x10265
#define DR_SRPF_TB_HI_PKT0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_HI_PKT0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_HI_PKT0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_HI_PKT0_t;

#define DR_SRPF_TB_HI_BYTE2                      0x10266
#define DR_SRPF_TB_HI_BYTE2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TB_HI_BYTE2          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_HI_BYTE2          :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_HI_BYTE2_t;

#define DR_SRPF_TB_HI_BYTE1                      0x10267
#define DR_SRPF_TB_HI_BYTE1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_HI_BYTE1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_HI_BYTE1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_HI_BYTE1_t;

#define DR_SRPF_TB_HI_BYTE0                      0x10268
#define DR_SRPF_TB_HI_BYTE0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_HI_BYTE0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_HI_BYTE0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_HI_BYTE0_t;

#define DR_SRPF_TB_LO_PKT1                       0x10269
#define DR_SRPF_TB_LO_PKT1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_LO_PKT1           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_LO_PKT1           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_LO_PKT1_t;

#define DR_SRPF_TB_LO_PKT0                       0x1026a
#define DR_SRPF_TB_LO_PKT0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_LO_PKT0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_LO_PKT0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_LO_PKT0_t;

#define DR_SRPF_TB_LO_BYTE2                      0x1026b
#define DR_SRPF_TB_LO_BYTE2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TB_LO_BYTE2          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_LO_BYTE2          :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_LO_BYTE2_t;

#define DR_SRPF_TB_LO_BYTE1                      0x1026c
#define DR_SRPF_TB_LO_BYTE1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_LO_BYTE1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_LO_BYTE1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_LO_BYTE1_t;

#define DR_SRPF_TB_LO_BYTE0                      0x1026d
#define DR_SRPF_TB_LO_BYTE0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_LO_BYTE0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_LO_BYTE0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_LO_BYTE0_t;

#define DR_SRPF_TB_UNI_PKT1                      0x1026e
#define DR_SRPF_TB_UNI_PKT1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_UNI_PKT1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_UNI_PKT1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_UNI_PKT1_t;

#define DR_SRPF_TB_UNI_PKT0                      0x1026f
#define DR_SRPF_TB_UNI_PKT0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_UNI_PKT0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_UNI_PKT0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_UNI_PKT0_t;

#define DR_SRPF_TB_UNI_BYTE2                     0x10270
#define DR_SRPF_TB_UNI_BYTE2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TB_UNI_BYTE2         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_UNI_BYTE2         :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_UNI_BYTE2_t;

#define DR_SRPF_TB_UNI_BYTE1                     0x10271
#define DR_SRPF_TB_UNI_BYTE1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_UNI_BYTE1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_UNI_BYTE1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_UNI_BYTE1_t;

#define DR_SRPF_TB_UNI_BYTE0                     0x10272
#define DR_SRPF_TB_UNI_BYTE0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_UNI_BYTE0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_UNI_BYTE0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_UNI_BYTE0_t;

#define DR_SRPF_TB_MULTI_PKT1                    0x10273
#define DR_SRPF_TB_MULTI_PKT1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_MULTI_PKT1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_MULTI_PKT1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_MULTI_PKT1_t;

#define DR_SRPF_TB_MULTI_PKT0                    0x10274
#define DR_SRPF_TB_MULTI_PKT0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_MULTI_PKT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_MULTI_PKT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_MULTI_PKT0_t;

#define DR_SRPF_TB_MULTI_BYTE2                   0x10275
#define DR_SRPF_TB_MULTI_BYTE2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TB_MULTI_BYTE2       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_MULTI_BYTE2       :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_MULTI_BYTE2_t;

#define DR_SRPF_TB_MULTI_BYTE1                   0x10276
#define DR_SRPF_TB_MULTI_BYTE1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_MULTI_BYTE1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_MULTI_BYTE1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_MULTI_BYTE1_t;

#define DR_SRPF_TB_MULTI_BYTE0                   0x10277
#define DR_SRPF_TB_MULTI_BYTE0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TB_MULTI_BYTE0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TB_MULTI_BYTE0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_TB_MULTI_BYTE0_t;

#define DR_SRPF_IDLE0                            0x103f0
#define DR_SRPF_IDLE0_dft                        0x0020
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE0           :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE1           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE1           :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE0           :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE0_t;

#define DR_SRPF_IDLE1                            0x103f1
#define DR_SRPF_IDLE1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE2           :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE3           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE3           :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE2           :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE1_t;

#define DR_SRPF_IDLE2                            0x103f2
#define DR_SRPF_IDLE2_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE4           :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE5           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE5           :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE4           :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE2_t;

#define DR_SRPF_IDLE3                            0x103f3
#define DR_SRPF_IDLE3_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE6           :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE7           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE7           :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE6           :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE3_t;

#define DR_SRPF_IDLE4                            0x103f4
#define DR_SRPF_IDLE4_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE8           :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE9           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE9           :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE8           :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE4_t;

#define DR_SRPF_IDLE5                            0x103f5
#define DR_SRPF_IDLE5_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE10          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE11          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE11          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE10          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE5_t;

#define DR_SRPF_IDLE6                            0x103f6
#define DR_SRPF_IDLE6_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE12          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE13          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE13          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE12          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE6_t;

#define DR_SRPF_IDLE7                            0x103f7
#define DR_SRPF_IDLE7_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE14          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE15          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE15          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE14          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE7_t;

#define DR_SRPF_IDLE8                            0x103f8
#define DR_SRPF_IDLE8_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE16          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE17          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE17          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE16          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE8_t;

#define DR_SRPF_IDLE9                            0x103f9
#define DR_SRPF_IDLE9_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE18          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE19          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE19          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE18          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE9_t;

#define DR_SRPF_IDLE10                           0x103fa
#define DR_SRPF_IDLE10_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE20          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE121         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE121         :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE20          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE10_t;

#define DR_SRPF_IDLE11                           0x103fb
#define DR_SRPF_IDLE11_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE22          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE23          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE23          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE22          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE11_t;

#define DR_SRPF_IDLE12                           0x103fc
#define DR_SRPF_IDLE12_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE24          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE25          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE25          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE24          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE12_t;

#define DR_SRPF_IDLE13                           0x103fd
#define DR_SRPF_IDLE13_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE26          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE27          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE27          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE26          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE13_t;

#define DR_SRPF_IDLE14                           0x103fe
#define DR_SRPF_IDLE14_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE28          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE29          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE29          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE28          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE14_t;

#define DR_SRPF_IDLE15                           0x103ff
#define DR_SRPF_IDLE15_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IDLE_BYTE30          :  8 ; /* bits 15:8 */
    cs_uint16 IDLE_BYTE31          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IDLE_BYTE31          :  8 ; /* bits 7:0 */
    cs_uint16 IDLE_BYTE30          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_SRPF_IDLE15_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::tb
 */

#define DR_TB_TB_INC_FREQ                        0x1002a
#define DR_TB_TB_INC_FREQ_dft                    0x001f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_INC_FREQ         :  8 ; /* bits 15:8 */
    cs_uint16 LTB_INC_FREQ         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_INC_FREQ         :  8 ; /* bits 7:0 */
    cs_uint16 HTB_INC_FREQ         :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TB_INC_FREQ_t;

#define DR_TB_TB_PIPECTL                         0x10037
#define DR_TB_TB_PIPECTL_dft                     0x074b
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 PIPE_DEPTH           :  5 ; /* bits 12:8 */
    cs_uint16 ALMOST_EMPTY         :  4 ; /* bits 7:4 */
    cs_uint16 ALMOST_FULL          :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ALMOST_FULL          :  4 ; /* bits 3:0 */
    cs_uint16 ALMOST_EMPTY         :  4 ; /* bits 7:4 */
    cs_uint16 PIPE_DEPTH           :  5 ; /* bits 12:8 */
    cs_uint16 rsrvd1               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TB_PIPECTL_t;

#define DR_TB_PTQ_BASE                           0x10070
#define DR_TB_PTQ_BASE_dft                       0x0f80
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PTQ_BASE             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PTQ_BASE             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_PTQ_BASE_t;

#define DR_TB_PTQ_MAX                            0x10071
#define DR_TB_PTQ_MAX_dft                        0x007f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PTQ_MAX              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PTQ_MAX              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_PTQ_MAX_t;

#define DR_TB_STQ_BASE                           0x10072
#define DR_TB_STQ_BASE_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STQ_BASE             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STQ_BASE             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_STQ_BASE_t;

#define DR_TB_STQ_MAX                            0x10073
#define DR_TB_STQ_MAX_dft                        0x0f7f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STQ_MAX              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STQ_MAX              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_STQ_MAX_t;

#define DR_TB_HTB_DPERR                          0x101b3
#define DR_TB_HTB_DPERR_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ECCFIX               :  8 ; /* bits 15:8 */
    cs_uint16 ECCERR               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ECCERR               :  8 ; /* bits 7:0 */
    cs_uint16 ECCFIX               :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HTB_DPERR_t;

#define DR_TB_LTB_DPERR                          0x101b4
#define DR_TB_LTB_DPERR_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 ECCFIX               :  8 ; /* bits 15:8 */
    cs_uint16 ECCERR               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ECCERR               :  8 ; /* bits 7:0 */
    cs_uint16 ECCFIX               :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LTB_DPERR_t;

#define DR_TB_HTB_DROP_PKT                       0x101b5
#define DR_TB_HTB_DROP_PKT_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_DROP_PKT         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_DROP_PKT         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HTB_DROP_PKT_t;

#define DR_TB_LTB_DROP_PKT                       0x101b6
#define DR_TB_LTB_DROP_PKT_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_DROP_PKT         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_DROP_PKT         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LTB_DROP_PKT_t;

#define DR_TB_HI_TB_DEL_ACC2                     0x101c0
#define DR_TB_HI_TB_DEL_ACC2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_ACC2       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_ACC2       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_ACC2_t;

#define DR_TB_HI_TB_DEL_ACC1                     0x101c1
#define DR_TB_HI_TB_DEL_ACC1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_ACC1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_ACC1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_ACC1_t;

#define DR_TB_HI_TB_DEL_ACC0                     0x101c2
#define DR_TB_HI_TB_DEL_ACC0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_ACC0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_ACC0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_ACC0_t;

#define DR_TB_HI_TB_DEL_CNT1                     0x101c3
#define DR_TB_HI_TB_DEL_CNT1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_CNT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_CNT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_CNT1_t;

#define DR_TB_HI_TB_DEL_CNT0                     0x101c4
#define DR_TB_HI_TB_DEL_CNT0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_CNT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_CNT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_CNT0_t;

#define DR_TB_HI_TB_DEL_MIN1                     0x101c5
#define DR_TB_HI_TB_DEL_MIN1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_MIN1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_MIN1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_MIN1_t;

#define DR_TB_HI_TB_DEL_MIN0                     0x101c6
#define DR_TB_HI_TB_DEL_MIN0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_MIN0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_MIN0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_MIN0_t;

#define DR_TB_HI_TB_DEL_MAX1                     0x101c7
#define DR_TB_HI_TB_DEL_MAX1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_MAX1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_MAX1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_MAX1_t;

#define DR_TB_HI_TB_DEL_MAX0                     0x101c8
#define DR_TB_HI_TB_DEL_MAX0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TB_DEL_MAX0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TB_DEL_MAX0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_HI_TB_DEL_MAX0_t;

#define DR_TB_LO_TB_DEL_ACC2                     0x101c9
#define DR_TB_LO_TB_DEL_ACC2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_ACC2       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_ACC2       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_ACC2_t;

#define DR_TB_LO_TB_DEL_ACC1                     0x101ca
#define DR_TB_LO_TB_DEL_ACC1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_ACC1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_ACC1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_ACC1_t;

#define DR_TB_LO_TB_DEL_ACC0                     0x101cb
#define DR_TB_LO_TB_DEL_ACC0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_ACC0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_ACC0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_ACC0_t;

#define DR_TB_LO_TB_DEL_CNT1                     0x101cc
#define DR_TB_LO_TB_DEL_CNT1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_CNT1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_CNT1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_CNT1_t;

#define DR_TB_LO_TB_DEL_CNT0                     0x101cd
#define DR_TB_LO_TB_DEL_CNT0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_CNT0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_CNT0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_CNT0_t;

#define DR_TB_LO_TB_DEL_MIN1                     0x101ce
#define DR_TB_LO_TB_DEL_MIN1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_MIN1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_MIN1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_MIN1_t;

#define DR_TB_LO_TB_DEL_MIN0                     0x101cf
#define DR_TB_LO_TB_DEL_MIN0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_MIN0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_MIN0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_MIN0_t;

#define DR_TB_LO_TB_DEL_MAX1                     0x101d0
#define DR_TB_LO_TB_DEL_MAX1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_MAX1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_MAX1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_MAX1_t;

#define DR_TB_LO_TB_DEL_MAX0                     0x101d1
#define DR_TB_LO_TB_DEL_MAX0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TB_DEL_MAX0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TB_DEL_MAX0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_LO_TB_DEL_MAX0_t;

#define DR_TB_TBL_KILL_PC1                       0x10380
#define DR_TB_TBL_KILL_PC1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBL_KILL_PC1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBL_KILL_PC1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBL_KILL_PC1_t;

#define DR_TB_TBL_KILL_PC0                       0x10381
#define DR_TB_TBL_KILL_PC0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBL_KILL_PC0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBL_KILL_PC0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBL_KILL_PC0_t;

#define DR_TB_TBL_KILL_BC2                       0x10382
#define DR_TB_TBL_KILL_BC2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBL_KILL_BC2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBL_KILL_BC2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBL_KILL_BC2_t;

#define DR_TB_TBL_KILL_BC1                       0x10383
#define DR_TB_TBL_KILL_BC1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBL_KILL_BC1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBL_KILL_BC1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBL_KILL_BC1_t;

#define DR_TB_TBL_KILL_BC0                       0x10384
#define DR_TB_TBL_KILL_BC0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBL_KILL_BC0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBL_KILL_BC0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBL_KILL_BC0_t;

#define DR_TB_TBH_KILL_PC1                       0x10385
#define DR_TB_TBH_KILL_PC1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBH_KILL_PC1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBH_KILL_PC1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBH_KILL_PC1_t;

#define DR_TB_TBH_KILL_PC0                       0x10386
#define DR_TB_TBH_KILL_PC0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBH_KILL_PC0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBH_KILL_PC0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBH_KILL_PC0_t;

#define DR_TB_TBH_KILL_BC2                       0x10387
#define DR_TB_TBH_KILL_BC2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBH_KILL_BC2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBH_KILL_BC2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBH_KILL_BC2_t;

#define DR_TB_TBH_KILL_BC1                       0x10388
#define DR_TB_TBH_KILL_BC1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBH_KILL_BC1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBH_KILL_BC1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBH_KILL_BC1_t;

#define DR_TB_TBH_KILL_BC0                       0x10389
#define DR_TB_TBH_KILL_BC0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBH_KILL_BC0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBH_KILL_BC0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TBH_KILL_BC0_t;

#define DR_TB_TINL_KILL_PC1                      0x1038a
#define DR_TB_TINL_KILL_PC1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINL_KILL_PC1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINL_KILL_PC1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINL_KILL_PC1_t;

#define DR_TB_TINL_KILL_PC0                      0x1038b
#define DR_TB_TINL_KILL_PC0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINL_KILL_PC0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINL_KILL_PC0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINL_KILL_PC0_t;

#define DR_TB_TINL_KILL_BC2                      0x1038c
#define DR_TB_TINL_KILL_BC2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINL_KILL_BC2        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINL_KILL_BC2        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINL_KILL_BC2_t;

#define DR_TB_TINL_KILL_BC1                      0x1038d
#define DR_TB_TINL_KILL_BC1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINL_KILL_BC1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINL_KILL_BC1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINL_KILL_BC1_t;

#define DR_TB_TINL_KILL_BC0                      0x1038e
#define DR_TB_TINL_KILL_BC0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINL_KILL_BC0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINL_KILL_BC0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINL_KILL_BC0_t;

#define DR_TB_TINH_KILL_PC1                      0x1038f
#define DR_TB_TINH_KILL_PC1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINH_KILL_PC1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINH_KILL_PC1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINH_KILL_PC1_t;

#define DR_TB_TINH_KILL_PC0                      0x10390
#define DR_TB_TINH_KILL_PC0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINH_KILL_PC0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINH_KILL_PC0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINH_KILL_PC0_t;

#define DR_TB_TINH_KILL_BC2                      0x10391
#define DR_TB_TINH_KILL_BC2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINH_KILL_BC2        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINH_KILL_BC2        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINH_KILL_BC2_t;

#define DR_TB_TINH_KILL_BC1                      0x10392
#define DR_TB_TINH_KILL_BC1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINH_KILL_BC1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINH_KILL_BC1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINH_KILL_BC1_t;

#define DR_TB_TINH_KILL_BC0                      0x10393
#define DR_TB_TINH_KILL_BC0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TINH_KILL_BC0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TINH_KILL_BC0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TB_TINH_KILL_BC0_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::rate_lmt
 */

#define DR_RATE_LMT_HI_TIME                      0x10031
#define DR_RATE_LMT_HI_TIME_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_TIME              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_TIME              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RATE_LMT_HI_TIME_t;

#define DR_RATE_LMT_HI_DELTA                     0x10032
#define DR_RATE_LMT_HI_DELTA_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_DELTA             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_DELTA             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RATE_LMT_HI_DELTA_t;

#define DR_RATE_LMT_HI_MAX                       0x10033
#define DR_RATE_LMT_HI_MAX_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HI_MAX               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HI_MAX               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RATE_LMT_HI_MAX_t;

#define DR_RATE_LMT_LO_TIME                      0x10034
#define DR_RATE_LMT_LO_TIME_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_TIME              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_TIME              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RATE_LMT_LO_TIME_t;

#define DR_RATE_LMT_LO_DELTA                     0x10035
#define DR_RATE_LMT_LO_DELTA_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_DELTA             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_DELTA             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RATE_LMT_LO_DELTA_t;

#define DR_RATE_LMT_LO_MAX                       0x10036
#define DR_RATE_LMT_LO_MAX_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LO_MAX               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LO_MAX               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_RATE_LMT_LO_MAX_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::mac_head
 */

#define DR_MAC_HEAD_MAC_OFFSET0                  0x10080
#define DR_MAC_HEAD_MAC_OFFSET0_dft              0x00c0
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_OFFSET0_t;

#define DR_MAC_HEAD_MAC_OFFSET1                  0x10081
#define DR_MAC_HEAD_MAC_OFFSET1_dft              0x00c0
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_OFFSET1_t;

#define DR_MAC_HEAD_MAC_OFFSET2                  0x10082
#define DR_MAC_HEAD_MAC_OFFSET2_dft              0x00c0
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_OFFSET2_t;

#define DR_MAC_HEAD_MAC_OFFSET3                  0x10083
#define DR_MAC_HEAD_MAC_OFFSET3_dft              0x00c0
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COS                  :  6 ; /* bits 5:0 */
    cs_uint16 IPDA                 :  6 ; /* bits 11:6 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WS                   :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_OFFSET3_t;

#define DR_MAC_HEAD_MAC_PROTOCOL0                0x10084
#define DR_MAC_HEAD_MAC_PROTOCOL0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_PROTOCOL0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_PROTOCOL0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_PROTOCOL0_t;

#define DR_MAC_HEAD_MAC_PROTOCOL1                0x10085
#define DR_MAC_HEAD_MAC_PROTOCOL1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_PROTOCOL1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_PROTOCOL1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_PROTOCOL1_t;

#define DR_MAC_HEAD_MAC_PROTOCOL2                0x10086
#define DR_MAC_HEAD_MAC_PROTOCOL2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_PROTOCOL2        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_PROTOCOL2        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_PROTOCOL2_t;

#define DR_MAC_HEAD_MAC_PROTOCOL3                0x10087
#define DR_MAC_HEAD_MAC_PROTOCOL3_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_PROTOCOL3        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_PROTOCOL3        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_PROTOCOL3_t;

#define DR_MAC_HEAD_MAC_MODE                     0x10088
#define DR_MAC_HEAD_MAC_MODE_dft                 0x041f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SEL_FLUSH_CH         :  4 ; /* bits 15:12 */
    cs_uint16 MAC_REFLECT          :  1 ; /* bits 11:11 */
    cs_uint16 REW_DRONLY           :  1 ; /* bits 10:10 */
    cs_uint16 REW_SA               :  1 ; /* bits 9:9 */
    cs_uint16 SETWS                :  1 ; /* bits 8:8 */
    cs_uint16 WS                   :  1 ; /* bits 7:7 */
    cs_uint16 WR_RID               :  2 ; /* bits 6:5 */
    cs_uint16 PT                   :  2 ; /* bits 4:3 */
    cs_uint16 MAC_MODE             :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_MODE             :  3 ; /* bits 2:0 */
    cs_uint16 PT                   :  2 ; /* bits 4:3 */
    cs_uint16 WR_RID               :  2 ; /* bits 6:5 */
    cs_uint16 WS                   :  1 ; /* bits 7:7 */
    cs_uint16 SETWS                :  1 ; /* bits 8:8 */
    cs_uint16 REW_SA               :  1 ; /* bits 9:9 */
    cs_uint16 REW_DRONLY           :  1 ; /* bits 10:10 */
    cs_uint16 MAC_REFLECT          :  1 ; /* bits 11:11 */
    cs_uint16 SEL_FLUSH_CH         :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_MODE_t;
#define     SEL_FLUSH_CH_FLUSH_CH0                        0x0c
#define     SEL_FLUSH_CH_FLUSH_CH1                        0x0d
#define     SEL_FLUSH_CH_FLUSH_CH2                        0x0e
#define     SEL_FLUSH_CH_FLUSH_CH3                        0x0f
#define     WR_RID_INSERT_FLIP                            0x00
#define     WR_RID_EXIST_FLIP                             0x01
#define     WR_RID_INSERT_ONLY                            0x02
#define     WR_RID_DONT_TOUCH                             0x03

#define DR_MAC_HEAD_MAC_SA2                      0x10089
#define DR_MAC_HEAD_MAC_SA2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_SA2              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_SA2              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_SA2_t;

#define DR_MAC_HEAD_MAC_SA1                      0x1008a
#define DR_MAC_HEAD_MAC_SA1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_SA1              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_SA1              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_SA1_t;

#define DR_MAC_HEAD_MAC_SA0                      0x1008b
#define DR_MAC_HEAD_MAC_SA0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_SA0              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_SA0              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_SA0_t;

#define DR_MAC_HEAD_MACWR                        0x1008c
#define DR_MAC_HEAD_MACWR_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FORCESTRICT          :  1 ; /* bits 15:15 */
    cs_uint16 STRICTRI             :  1 ; /* bits 14:14 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 TTLBIBASE            :  2 ; /* bits 11:10 */
    cs_uint16 TTLUNIBASE           :  2 ; /* bits 9:8 */
    cs_uint16 TTLBI                :  2 ; /* bits 7:6 */
    cs_uint16 TTLUNI               :  2 ; /* bits 5:4 */
    cs_uint16 TTLBASE              :  2 ; /* bits 3:2 */
    cs_uint16 TTL                  :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL                  :  2 ; /* bits 1:0 */
    cs_uint16 TTLBASE              :  2 ; /* bits 3:2 */
    cs_uint16 TTLUNI               :  2 ; /* bits 5:4 */
    cs_uint16 TTLBI                :  2 ; /* bits 7:6 */
    cs_uint16 TTLUNIBASE           :  2 ; /* bits 9:8 */
    cs_uint16 TTLBIBASE            :  2 ; /* bits 11:10 */
    cs_uint16 WE                   :  1 ; /* bits 12:12 */
    cs_uint16 STRICT_MODE               :  1 ; /* bits 13:13 */
    cs_uint16 STRICTRI             :  1 ; /* bits 14:14 */
    cs_uint16 FORCESTRICT          :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACWR_t;
#define     TTL_DONT_TOUCH                                0x00
#define     TTL_ENC_DA_TTL                                0x01
#define     TTL_REG_RPR_TTL                               0x02
#define     TTL_TTL_BASE                                  0x03
#define     TTLBASE_DONT_TOUCH                            0x00
#define     TTLBASE_ENC_DA_TTL                            0x01
#define     TTLBASE_REG_RPR_TTL                           0x02
#define     TTLBASE_TTL                                   0x03
#define     TTLUNI_DONT_TOUCH0                            0x00
#define     TTLUNI_DONT_TOUCH1                            0x01
#define     TTLUNI_REG_RPR_TTL                            0x02
#define     TTLUNI_TTLBASE                                0x03
#define     TTLBI_DONT_TOUCH0                             0x00
#define     TTLBI_DONT_TOUCH1                             0x01
#define     TTLBI_REG_RPR_TTL                             0x02
#define     TTLBI_TTLBASE                                 0x03
#define     TTLUNIBASE_DONT_TOUCH0                        0x00
#define     TTLUNIBASE_DONT_TOUCH1                        0x01
#define     TTLUNIBASE_REG_RPR_TTL                        0x02
#define     TTLUNIBASE_TTL                                0x03
#define     TTLBIBASE_DONT_TOUCH0                         0x00
#define     TTLBIBASE_DONT_TOUCH1                         0x01
#define     TTLBIBASE_REG_RPR_TTL                         0x02
#define     TTLBIBASE_TTL                                 0x03

#define DR_MAC_HEAD_MACTTL0                      0x1008d
#define DR_MAC_HEAD_MACTTL0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TTLBASE              :  8 ; /* bits 15:8 */
    cs_uint16 TTL                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL                  :  8 ; /* bits 7:0 */
    cs_uint16 TTLBASE              :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACTTL0_t;

#define DR_MAC_HEAD_MACTTL1                      0x1008e
#define DR_MAC_HEAD_MACTTL1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TTLBI                :  8 ; /* bits 15:8 */
    cs_uint16 TTLUNI               :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTLUNI               :  8 ; /* bits 7:0 */
    cs_uint16 TTLBI                :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACTTL1_t;

#define DR_MAC_HEAD_MACTTL2                      0x1008f
#define DR_MAC_HEAD_MACTTL2_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TTLBIBASE            :  8 ; /* bits 15:8 */
    cs_uint16 TTLUNIBASE           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTLUNIBASE           :  8 ; /* bits 7:0 */
    cs_uint16 TTLBIBASE            :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACTTL2_t;

#define DR_MAC_HEAD_MACTSN                       0x10090
#define DR_MAC_HEAD_MACTSN_dft                   0x0200
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 IDLEUPDATE           :  1 ; /* bits 10:10 */
    cs_uint16 IDLESTRIP            :  1 ; /* bits 9:9 */
    cs_uint16 ENABLE               :  1 ; /* bits 8:8 */
    cs_uint16 TSN                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TSN                  :  8 ; /* bits 7:0 */
    cs_uint16 ENABLE               :  1 ; /* bits 8:8 */
    cs_uint16 IDLESTRIP            :  1 ; /* bits 9:9 */
    cs_uint16 IDLEUPDATE           :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACTSN_t;

#define DR_MAC_HEAD_MAC_TSN_PKT1                 0x10091
#define DR_MAC_HEAD_MAC_TSN_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_TSN_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_TSN_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_TSN_PKT1_t;

#define DR_MAC_HEAD_MAC_TSN_PKT0                 0x10092
#define DR_MAC_HEAD_MAC_TSN_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_TSN_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_TSN_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_TSN_PKT0_t;

#define DR_MAC_HEAD_MAC_EXPTSN_PKT1              0x10093
#define DR_MAC_HEAD_MAC_EXPTSN_PKT1_dft          0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_EXPTSN_PKT1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_EXPTSN_PKT1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_EXPTSN_PKT1_t;

#define DR_MAC_HEAD_MAC_EXPTSN_PKT0              0x10094
#define DR_MAC_HEAD_MAC_EXPTSN_PKT0_dft          0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_EXPTSN_PKT0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_EXPTSN_PKT0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_EXPTSN_PKT0_t;

#define DR_MAC_HEAD_FLUSHED_TSN                  0x10095
#define DR_MAC_HEAD_FLUSHED_TSN_dft              0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 FLUSHED_TSN          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FLUSHED_TSN          :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_FLUSHED_TSN_t;

#define DR_MAC_HEAD_MAC_SADA_PKT1                0x100fc
#define DR_MAC_HEAD_MAC_SADA_PKT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_SADA_PKT1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_SADA_PKT1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_SADA_PKT1_t;

#define DR_MAC_HEAD_MAC_SADA_PKT0                0x100fd
#define DR_MAC_HEAD_MAC_SADA_PKT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_SADA_PKT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_SADA_PKT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_SADA_PKT0_t;

#define DR_MAC_HEAD_MAC_REWRITE_PKT1             0x101b0
#define DR_MAC_HEAD_MAC_REWRITE_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_REWRITE_PKT1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_REWRITE_PKT1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_REWRITE_PKT1_t;

#define DR_MAC_HEAD_MAC_REWRITE_PKT0             0x101b1
#define DR_MAC_HEAD_MAC_REWRITE_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAC_REWRITE_PKT0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAC_REWRITE_PKT0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MAC_REWRITE_PKT0_t;

#define DR_MAC_HEAD_FLUSH_HOST_PKT1              0x101e0
#define DR_MAC_HEAD_FLUSH_HOST_PKT1_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FLUSH_HOST_PKT1      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FLUSH_HOST_PKT1      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_FLUSH_HOST_PKT1_t;

#define DR_MAC_HEAD_FLUSH_HOST_PKT0              0x101e1
#define DR_MAC_HEAD_FLUSH_HOST_PKT0_dft          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FLUSH_HOST_PKT0      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FLUSH_HOST_PKT0      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_FLUSH_HOST_PKT0_t;

#define DR_MAC_HEAD_FLUSH_HOST_BYTE2             0x101e2
#define DR_MAC_HEAD_FLUSH_HOST_BYTE2_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 FLUSH_HOST_BYTE2     :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FLUSH_HOST_BYTE2     :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_FLUSH_HOST_BYTE2_t;

#define DR_MAC_HEAD_FLUSH_HOST_BYTE1             0x101e3
#define DR_MAC_HEAD_FLUSH_HOST_BYTE1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FLUSH_HOST_BYTE1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FLUSH_HOST_BYTE1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_FLUSH_HOST_BYTE1_t;

#define DR_MAC_HEAD_FLUSH_HOST_BYTE0             0x101e4
#define DR_MAC_HEAD_FLUSH_HOST_BYTE0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FLUSH_HOST_BYTE0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FLUSH_HOST_BYTE0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_FLUSH_HOST_BYTE0_t;

#define DR_MAC_HEAD_STRICTFLUSH_PKT1             0x101e5
#define DR_MAC_HEAD_STRICTFLUSH_PKT1_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICTFLUSH_PKT1     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICTFLUSH_PKT1     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_STRICTFLUSH_PKT1_t;

#define DR_MAC_HEAD_STRICTFLUSH_PKT0             0x101e6
#define DR_MAC_HEAD_STRICTFLUSH_PKT0_dft         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICTFLUSH_PKT0     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICTFLUSH_PKT0     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_STRICTFLUSH_PKT0_t;

#define DR_MAC_HEAD_STRICTFLUSH_BYTE2            0x101e7
#define DR_MAC_HEAD_STRICTFLUSH_BYTE2_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 STRICTFLUSH_BYTE2    :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICTFLUSH_BYTE2    :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_STRICTFLUSH_BYTE2_t;

#define DR_MAC_HEAD_STRICTFLUSH_BYTE1            0x101e8
#define DR_MAC_HEAD_STRICTFLUSH_BYTE1_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICTFLUSH_BYTE1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICTFLUSH_BYTE1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_STRICTFLUSH_BYTE1_t;

#define DR_MAC_HEAD_STRICTFLUSH_BYTE0            0x101e9
#define DR_MAC_HEAD_STRICTFLUSH_BYTE0_dft        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICTFLUSH_BYTE0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICTFLUSH_BYTE0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_STRICTFLUSH_BYTE0_t;

#define DR_MAC_HEAD_MACDROP_PKT1                 0x101ea
#define DR_MAC_HEAD_MACDROP_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MACDROP_PKT1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MACDROP_PKT1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACDROP_PKT1_t;

#define DR_MAC_HEAD_MACDROP_PKT0                 0x101eb
#define DR_MAC_HEAD_MACDROP_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MACDROP_PKT0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MACDROP_PKT0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACDROP_PKT0_t;

#define DR_MAC_HEAD_MACDROP_BYTE2                0x101ec
#define DR_MAC_HEAD_MACDROP_BYTE2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 MACDROP_BYTE2        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MACDROP_BYTE2        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACDROP_BYTE2_t;

#define DR_MAC_HEAD_MACDROP_BYTE1                0x101ed
#define DR_MAC_HEAD_MACDROP_BYTE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MACDROP_BYTE1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MACDROP_BYTE1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACDROP_BYTE1_t;

#define DR_MAC_HEAD_MACDROP_BYTE0                0x101ee
#define DR_MAC_HEAD_MACDROP_BYTE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MACDROP_BYTE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MACDROP_BYTE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MAC_HEAD_MACDROP_BYTE0_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::lookup
 */

#define DR_LOOKUP_LPSAT                          0x10098
#define DR_LOOKUP_LPSAT_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LPSAT_READ_ADDR      :  1 ; /* bits 15:15 */
    cs_uint16 LPSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 LPSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 LPSAT_ADDR           : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LPSAT_ADDR           : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 LPSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 LPSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 LPSAT_READ_ADDR      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_LOOKUP_LPSAT_t;

#define DR_LOOKUP_LBSAT                          0x10099
#define DR_LOOKUP_LBSAT_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LBSAT_READ_ADDR      :  1 ; /* bits 15:15 */
    cs_uint16 LBSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 LBSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 LBSAT_ADDR           : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LBSAT_ADDR           : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 LBSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 LBSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 LBSAT_READ_ADDR      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_LOOKUP_LBSAT_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::stat
 */

#define DR_STAT_SPSAT                            0x1009a
#define DR_STAT_SPSAT_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPSAT_READ_ADDR      :  1 ; /* bits 15:15 */
    cs_uint16 SPSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 SPSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 SPSAT_ADDR           : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPSAT_ADDR           : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 SPSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 SPSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 SPSAT_READ_ADDR      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_SPSAT_t;

#define DR_STAT_SBSAT                            0x1009b
#define DR_STAT_SBSAT_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SBSAT_READ_ADDR      :  1 ; /* bits 15:15 */
    cs_uint16 SBSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 SBSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 SBSAT_ADDR           : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SBSAT_ADDR           : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 SBSAT_SADA           :  1 ; /* bits 13:13 */
    cs_uint16 SBSAT_ADDR_VALID     :  1 ; /* bits 14:14 */
    cs_uint16 SBSAT_READ_ADDR      :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_SBSAT_t;

#define DR_STAT_CAM_CR                           0x10188
#define DR_STAT_CAM_CR_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 RESET_ENTRY          :  1 ; /* bits 1:1 */
    cs_uint16 PROBE                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PROBE                :  1 ; /* bits 0:0 */
    cs_uint16 RESET_ENTRY          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_CAM_CR_t;

#define DR_STAT_MASK3                            0x10189
#define DR_STAT_MASK3_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 MASK3                :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MASK3                :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_MASK3_t;

#define DR_STAT_MASK2                            0x1018a
#define DR_STAT_MASK2_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MASK2                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MASK2                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_MASK2_t;

#define DR_STAT_MASK1                            0x1018b
#define DR_STAT_MASK1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MASK1                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MASK1                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_MASK1_t;

#define DR_STAT_MASK0                            0x1018c
#define DR_STAT_MASK0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MASK0                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MASK0                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_MASK0_t;

#define DR_STAT_CAM_SR                           0x1018d
#define DR_STAT_CAM_SR_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  5 ;
    cs_uint16 HIT                  :  1 ; /* bits 10:10 */
    cs_uint16 HIT_A                : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HIT_A                : 10 ; /* bits 9:0 */
    cs_uint16 HIT                  :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd1               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_STAT_CAM_SR_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::tbd
 */

#define DR_TBD_IPS_CTL_CR                        0x100a0
#define DR_TBD_IPS_CTL_CR_dft                    0x0003
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_NEW_SRC          :  8 ; /* bits 15:8 */
    cs_uint16 IPS_NEW              :  1 ; /* bits 7:7 */
    cs_uint16 TTL_MODE             :  1 ; /* bits 6:6 */
    cs_uint16 CTL_RCV_ERR_ENABLE   :  1 ; /* bits 5:5 */
    cs_uint16 CTL_RCV_ENABLE       :  1 ; /* bits 4:4 */
    cs_uint16 CTL_RCV_DEFAULT_DEST :  1 ; /* bits 3:3 */
    cs_uint16 IPS_RCV_ERR_ENABLE   :  1 ; /* bits 2:2 */
    cs_uint16 IPS_RCV_ENABLE       :  1 ; /* bits 1:1 */
    cs_uint16 IPS_RCV_DEFAULT_DEST :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DEFAULT_DEST :  1 ; /* bits 0:0 */
    cs_uint16 IPS_RCV_ENABLE       :  1 ; /* bits 1:1 */
    cs_uint16 IPS_RCV_ERR_ENABLE   :  1 ; /* bits 2:2 */
    cs_uint16 CTL_RCV_DEFAULT_DEST :  1 ; /* bits 3:3 */
    cs_uint16 CTL_RCV_ENABLE       :  1 ; /* bits 4:4 */
    cs_uint16 CTL_RCV_ERR_ENABLE   :  1 ; /* bits 5:5 */
    cs_uint16 TTL_MODE             :  1 ; /* bits 6:6 */
    cs_uint16 IPS_NEW              :  1 ; /* bits 7:7 */
    cs_uint16 IPS_NEW_SRC          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_CTL_CR_t;

#define DR_TBD_IPS_RCV_HEAD                      0x100a1
#define DR_TBD_IPS_RCV_HEAD_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 IPS_RCV_HEAD         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_HEAD         :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_HEAD_t;

#define DR_TBD_IPS_RCV_TAIL                      0x100a2
#define DR_TBD_IPS_RCV_TAIL_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 IPS_RCV_TAIL         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_TAIL         :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_TAIL_t;

#define DR_TBD_IPS_RCV_DATA3                     0x100a3
#define DR_TBD_IPS_RCV_DATA3_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_DATA3        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DATA3        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DATA3_t;

#define DR_TBD_IPS_RCV_DATA2                     0x100a4
#define DR_TBD_IPS_RCV_DATA2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_DATA2        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DATA2        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DATA2_t;

#define DR_TBD_IPS_RCV_DATA1                     0x100a5
#define DR_TBD_IPS_RCV_DATA1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_DATA1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DATA1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DATA1_t;

#define DR_TBD_IPS_RCV_DATA0                     0x100a6
#define DR_TBD_IPS_RCV_DATA0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_DATA0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DATA0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DATA0_t;

#define DR_TBD_IPS_RCV_DROP_COUNT1               0x100a7
#define DR_TBD_IPS_RCV_DROP_COUNT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_DROP_COUNT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DROP_COUNT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DROP_COUNT1_t;

#define DR_TBD_IPS_RCV_DROP_COUNT0               0x100a8
#define DR_TBD_IPS_RCV_DROP_COUNT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_DROP_COUNT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DROP_COUNT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DROP_COUNT0_t;

#define DR_TBD_IPS_RCV_ERR_COUNT1                0x100a9
#define DR_TBD_IPS_RCV_ERR_COUNT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_ERR_COUNT1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_ERR_COUNT1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_ERR_COUNT1_t;

#define DR_TBD_IPS_RCV_ERR_COUNT0                0x100aa
#define DR_TBD_IPS_RCV_ERR_COUNT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_ERR_COUNT0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_ERR_COUNT0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_ERR_COUNT0_t;

#define DR_TBD_CTL_RCV_HEAD                      0x100b1
#define DR_TBD_CTL_RCV_HEAD_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 CTL_RCV_HEAD         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_HEAD         : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_HEAD_t;

#define DR_TBD_CTL_RCV_TAIL                      0x100b2
#define DR_TBD_CTL_RCV_TAIL_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 CTL_RCV_TAIL         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_TAIL         : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_TAIL_t;

#define DR_TBD_CTL_RCV_DATA3                     0x100b3
#define DR_TBD_CTL_RCV_DATA3_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_DATA3        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_DATA3        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_DATA3_t;

#define DR_TBD_CTL_RCV_DATA2                     0x100b4
#define DR_TBD_CTL_RCV_DATA2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_DATA2        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_DATA2        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_DATA2_t;

#define DR_TBD_CTL_RCV_DATA1                     0x100b5
#define DR_TBD_CTL_RCV_DATA1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_DATA1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_DATA1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_DATA1_t;

#define DR_TBD_CTL_RCV_DATA0                     0x100b6
#define DR_TBD_CTL_RCV_DATA0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_DATA0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_DATA0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_DATA0_t;

#define DR_TBD_CTL_RCV_DROP_COUNT1               0x100b7
#define DR_TBD_CTL_RCV_DROP_COUNT1_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_DROP_COUNT1  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_DROP_COUNT1  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_DROP_COUNT1_t;

#define DR_TBD_CTL_RCV_DROP_COUNT0               0x100b8
#define DR_TBD_CTL_RCV_DROP_COUNT0_dft           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_DROP_COUNT0  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_DROP_COUNT0  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_DROP_COUNT0_t;

#define DR_TBD_CTL_RCV_ERR_COUNT1                0x100b9
#define DR_TBD_CTL_RCV_ERR_COUNT1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_ERR_COUNT1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_ERR_COUNT1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_ERR_COUNT1_t;

#define DR_TBD_CTL_RCV_ERR_COUNT0                0x100ba
#define DR_TBD_CTL_RCV_ERR_COUNT0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_RCV_ERR_COUNT0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_RCV_ERR_COUNT0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_RCV_ERR_COUNT0_t;

#define DR_TBD_STATIONS                          0x100c1
#define DR_TBD_STATIONS_dft                      0x0300
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 MASK_MAX             :  1 ; /* bits 9:9 */
    cs_uint16 MASK_ZERO            :  1 ; /* bits 8:8 */
    cs_uint16 MAX                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAX                  :  8 ; /* bits 7:0 */
    cs_uint16 MASK_ZERO            :  1 ; /* bits 8:8 */
    cs_uint16 MASK_MAX             :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_STATIONS_t;

#define DR_TBD_IPS_RCV_DATA4                     0x100c2
#define DR_TBD_IPS_RCV_DATA4_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 IPS_RCV_DATA4        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DATA4        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DATA4_t;

#define DR_TBD_IPS_RCV_DATA5                     0x100c3
#define DR_TBD_IPS_RCV_DATA5_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 IPS_RCV_DATA5        :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IPS_RCV_DATA5        :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_IPS_RCV_DATA5_t;

#define DR_TBD_CTL_TYPE3                         0x100c8
#define DR_TBD_CTL_TYPE3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_TYPE3            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_TYPE3            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_TYPE3_t;

#define DR_TBD_CTL_MASK3                         0x100c9
#define DR_TBD_CTL_MASK3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_MASK3            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_MASK3            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_MASK3_t;

#define DR_TBD_CTL_TYPE2                         0x100ca
#define DR_TBD_CTL_TYPE2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_TYPE2            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_TYPE2            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_TYPE2_t;

#define DR_TBD_CTL_MASK2                         0x100cb
#define DR_TBD_CTL_MASK2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_MASK2            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_MASK2            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_MASK2_t;

#define DR_TBD_CTL_TYPE1                         0x100cc
#define DR_TBD_CTL_TYPE1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_TYPE1            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_TYPE1            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_TYPE1_t;

#define DR_TBD_CTL_MASK1                         0x100cd
#define DR_TBD_CTL_MASK1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_MASK1            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_MASK1            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_MASK1_t;

#define DR_TBD_CTL_TYPE0                         0x100ce
#define DR_TBD_CTL_TYPE0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_TYPE0            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_TYPE0            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_TYPE0_t;

#define DR_TBD_CTL_MASK0                         0x100cf
#define DR_TBD_CTL_MASK0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CTL_MASK0            : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL_MASK0            : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_CTL_MASK0_t;

#define DR_TBD_DEC_MODE2_3                       0x100d0
#define DR_TBD_DEC_MODE2_3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DEC_MODE3            :  8 ; /* bits 15:8 */
    cs_uint16 DEC_MODE2            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DEC_MODE2            :  8 ; /* bits 7:0 */
    cs_uint16 DEC_MODE3            :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_DEC_MODE2_3_t;

#define DR_TBD_DEC_MODE0_1                       0x100d1
#define DR_TBD_DEC_MODE0_1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DEC_MODE1            :  8 ; /* bits 15:8 */
    cs_uint16 DEC_MODE0            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DEC_MODE0            :  8 ; /* bits 7:0 */
    cs_uint16 DEC_MODE1            :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_DEC_MODE0_1_t;

#define DR_TBD_PROT_TIMER1                       0x100da
#define DR_TBD_PROT_TIMER1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PROT_TIMER1          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PROT_TIMER1          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_PROT_TIMER1_t;

#define DR_TBD_PROT_TIMER0                       0x100db
#define DR_TBD_PROT_TIMER0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PROT_TIMER0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PROT_TIMER0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_PROT_TIMER0_t;

#define DR_TBD_RING_ID_ERR                       0x101b2
#define DR_TBD_RING_ID_ERR_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RING_ID_ERR          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RING_ID_ERR          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_RING_ID_ERR_t;

#define DR_TBD_TBD_RUNT_USG                      0x101b7
#define DR_TBD_TBD_RUNT_USG_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TBD_RUNT_USG         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBD_RUNT_USG         :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_TBD_RUNT_USG_t;

#define DR_TBD_SA_STRIP_PKT1                     0x101b8
#define DR_TBD_SA_STRIP_PKT1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SA_STRIP_PKT1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA_STRIP_PKT1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_SA_STRIP_PKT1_t;

#define DR_TBD_SA_STRIP_PKT0                     0x101b9
#define DR_TBD_SA_STRIP_PKT0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SA_STRIP_PKT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA_STRIP_PKT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_SA_STRIP_PKT0_t;

#define DR_TBD_TTL_DROP_PKT1                     0x101ba
#define DR_TBD_TTL_DROP_PKT1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TTL_DROP_PKT1        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL_DROP_PKT1        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_TTL_DROP_PKT1_t;

#define DR_TBD_TTL_DROP_PKT0                     0x101bb
#define DR_TBD_TTL_DROP_PKT0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TTL_DROP_PKT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL_DROP_PKT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_TTL_DROP_PKT0_t;

#define DR_TBD_STRICT_STRIP_PKT1                 0x101ef
#define DR_TBD_STRICT_STRIP_PKT1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICT_STRIP_PKT1    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICT_STRIP_PKT1    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_STRICT_STRIP_PKT1_t;

#define DR_TBD_STRICT_STRIP_PKT0                 0x101f0
#define DR_TBD_STRICT_STRIP_PKT0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICT_STRIP_PKT0    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICT_STRIP_PKT0    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_STRICT_STRIP_PKT0_t;

#define DR_TBD_STRICT_STRIP_BYTE2                0x101f1
#define DR_TBD_STRICT_STRIP_BYTE2_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 STRICT_STRIP_BYTE2   :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICT_STRIP_BYTE2   :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_STRICT_STRIP_BYTE2_t;

#define DR_TBD_STRICT_STRIP_BYTE1                0x101f2
#define DR_TBD_STRICT_STRIP_BYTE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICT_STRIP_BYTE1   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICT_STRIP_BYTE1   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_STRICT_STRIP_BYTE1_t;

#define DR_TBD_STRICT_STRIP_BYTE0                0x101f3
#define DR_TBD_STRICT_STRIP_BYTE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 STRICT_STRIP_BYTE0   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STRICT_STRIP_BYTE0   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_STRICT_STRIP_BYTE0_t;

#define DR_TBD_SA_STRIP_BYTE2                    0x101f4
#define DR_TBD_SA_STRIP_BYTE2_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 SA_STRIP_BYTE2       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA_STRIP_BYTE2       :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_SA_STRIP_BYTE2_t;

#define DR_TBD_SA_STRIP_BYTE1                    0x101f5
#define DR_TBD_SA_STRIP_BYTE1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SA_STRIP_BYTE1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA_STRIP_BYTE1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_SA_STRIP_BYTE1_t;

#define DR_TBD_SA_STRIP_BYTE0                    0x101f6
#define DR_TBD_SA_STRIP_BYTE0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SA_STRIP_BYTE0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA_STRIP_BYTE0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_SA_STRIP_BYTE0_t;

#define DR_TBD_TTL_DROP_BYTE2                    0x101f7
#define DR_TBD_TTL_DROP_BYTE2_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TTL_DROP_BYTE2       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL_DROP_BYTE2       :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_TTL_DROP_BYTE2_t;

#define DR_TBD_TTL_DROP_BYTE1                    0x101f8
#define DR_TBD_TTL_DROP_BYTE1_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TTL_DROP_BYTE1       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL_DROP_BYTE1       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_TTL_DROP_BYTE1_t;

#define DR_TBD_TTL_DROP_BYTE0                    0x101f9
#define DR_TBD_TTL_DROP_BYTE0_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TTL_DROP_BYTE0       : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL_DROP_BYTE0       : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_TBD_TTL_DROP_BYTE0_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * RingMAC::ms
 */

#define DR_MS_CR_SR                              0x10100
#define DR_MS_CR_SR_dft                          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 BAD_USG_CNT          :  3 ; /* bits 15:13 */
    cs_uint16 DROP_USG_CNT         :  3 ; /* bits 12:10 */
    cs_uint16 IN_USG_CNT           :  3 ; /* bits 9:7 */
    cs_uint16 OUT_USG_CNT          :  3 ; /* bits 6:4 */
    cs_uint16 USG_TRS              :  1 ; /* bits 3:3 */
    cs_uint16 DATA_TRS             :  1 ; /* bits 2:2 */
    cs_uint16 DROP_USG             :  1 ; /* bits 1:1 */
    cs_uint16 TIMEOUT              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TIMEOUT              :  1 ; /* bits 0:0 */
    cs_uint16 DROP_USG             :  1 ; /* bits 1:1 */
    cs_uint16 DATA_TRS             :  1 ; /* bits 2:2 */
    cs_uint16 USG_TRS              :  1 ; /* bits 3:3 */
    cs_uint16 OUT_USG_CNT          :  3 ; /* bits 6:4 */
    cs_uint16 IN_USG_CNT           :  3 ; /* bits 9:7 */
    cs_uint16 DROP_USG_CNT         :  3 ; /* bits 12:10 */
    cs_uint16 BAD_USG_CNT          :  3 ; /* bits 15:13 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_CR_SR_t;

#define DR_MS_SEMA4                              0x10101
#define DR_MS_SEMA4_dft                          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FMS                  :  8 ; /* bits 15:8 */
    cs_uint16 TMS                  :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TMS                  :  8 ; /* bits 7:0 */
    cs_uint16 FMS                  :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SEMA4_t;

#define DR_MS_TIMER_CR                           0x10102
#define DR_MS_TIMER_CR_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 T1ENAB               :  1 ; /* bits 3:3 */
    cs_uint16 T1MODE               :  1 ; /* bits 2:2 */
    cs_uint16 T0ENAB               :  1 ; /* bits 1:1 */
    cs_uint16 T0MODE               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 T0MODE               :  1 ; /* bits 0:0 */
    cs_uint16 T0ENAB               :  1 ; /* bits 1:1 */
    cs_uint16 T1MODE               :  1 ; /* bits 2:2 */
    cs_uint16 T1ENAB               :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_TIMER_CR_t;

#define DR_MS_T1_CNT1                            0x10103
#define DR_MS_T1_CNT1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 T1_CNT1              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 T1_CNT1              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_T1_CNT1_t;

#define DR_MS_T1_CNT0                            0x10104
#define DR_MS_T1_CNT0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 T1_CNT0              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 T1_CNT0              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_T1_CNT0_t;

#define DR_MS_T0_CNT1                            0x10105
#define DR_MS_T0_CNT1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 T0_CNT1              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 T0_CNT1              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_T0_CNT1_t;

#define DR_MS_T0_CNT0                            0x10106
#define DR_MS_T0_CNT0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 T0_CNT0              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 T0_CNT0              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_T0_CNT0_t;

#define DR_MS_PROV1                              0x10107
#define DR_MS_PROV1_dft                          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PROV1_ADDR           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PROV1_ADDR           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_PROV1_t;

#define DR_MS_PROV0                              0x10108
#define DR_MS_PROV0_dft                          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PROV0_ADDR           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PROV0_ADDR           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_PROV0_t;

#define DR_MS_COEFF                              0x10109
#define DR_MS_COEFF_dft                          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 AGECOEFF             :  4 ; /* bits 15:12 */
    cs_uint16 LP_ALLOW             :  4 ; /* bits 11:8 */
    cs_uint16 LP_FWD               :  4 ; /* bits 7:4 */
    cs_uint16 LP_MU                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LP_MU                :  4 ; /* bits 3:0 */
    cs_uint16 LP_FWD               :  4 ; /* bits 7:4 */
    cs_uint16 LP_ALLOW             :  4 ; /* bits 11:8 */
    cs_uint16 AGECOEFF             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_COEFF_t;

#define DR_MS_MY_SA2                             0x1010a
#define DR_MS_MY_SA2_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MY_SA2_ADDR          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_SA2_ADDR          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_MY_SA2_t;

#define DR_MS_MY_SA1                             0x1010b
#define DR_MS_MY_SA1_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MY_SA1_ADDR          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_SA1_ADDR          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_MY_SA1_t;

#define DR_MS_MY_SA0                             0x1010c
#define DR_MS_MY_SA0_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MY_SA0_ADDR          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_SA0_ADDR          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_MY_SA0_t;

#define DR_MS_RSVD_MSG                           0x1010d
#define DR_MS_RSVD_MSG_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RSVD_MSG_ADDR        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RSVD_MSG_ADDR        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_RSVD_MSG_t;

#define DR_MS_NEW_MULTICHOKE                     0x1010e
#define DR_MS_NEW_MULTICHOKE_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 MULTICHOKE_NEW       :  1 ; /* bits 8:8 */
    cs_uint16 MULTICHOKE_SRC       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MULTICHOKE_SRC       :  8 ; /* bits 7:0 */
    cs_uint16 MULTICHOKE_NEW       :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_NEW_MULTICHOKE_t;

#define DR_MS_OPTIONS                            0x10110
#define DR_MS_OPTIONS_dft                        0x0008
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 STALL                :  1 ; /* bits 3:3 */
    cs_uint16 ALL_CHK_EN           :  1 ; /* bits 2:2 */
    cs_uint16 IN_PAR_ENB           :  1 ; /* bits 1:1 */
    cs_uint16 EX_PAR_ENB           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EX_PAR_ENB           :  1 ; /* bits 0:0 */
    cs_uint16 IN_PAR_ENB           :  1 ; /* bits 1:1 */
    cs_uint16 ALL_CHK_EN           :  1 ; /* bits 2:2 */
    cs_uint16 STALL                :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_OPTIONS_t;

#define DR_MS_CCR                                0x10111
#define DR_MS_CCR_dft                            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CCR_ADDR             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CCR_ADDR             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_CCR_t;

#define DR_MS_ERR                                0x10112
#define DR_MS_ERR_dft                            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 I_PER                :  1 ; /* bits 2:2 */
    cs_uint16 D_PERR               :  1 ; /* bits 1:1 */
    cs_uint16 NST_A                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NST_A                :  1 ; /* bits 0:0 */
    cs_uint16 D_PERR               :  1 ; /* bits 1:1 */
    cs_uint16 I_PER                :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_ERR_t;

#define DR_MS_PC                                 0x10113
#define DR_MS_PC_dft                             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 PCT                  :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PCT                  :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_PC_t;

#define DR_MS_IX                                 0x10114
#define DR_MS_IX_dft                             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 IX                   :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IX                   :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_IX_t;

#define DR_MS_IX_SEL                             0x10115
#define DR_MS_IX_SEL_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 IX_SEL               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IX_SEL               :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_IX_SEL_t;

#define DR_MS_JIX                                0x10116
#define DR_MS_JIX_dft                            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 JIX                  :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 JIX                  :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_JIX_t;

#define DR_MS_BASE0_TYPE                         0x10117
#define DR_MS_BASE0_TYPE_dft                     0x0004
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 BASE0_TYPE           :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE0_TYPE           :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE0_TYPE_t;

#define DR_MS_BASE1_TYPE                         0x10118
#define DR_MS_BASE1_TYPE_dft                     0x0004
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 BASE1_TYPE           :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE1_TYPE           :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE1_TYPE_t;

#define DR_MS_BASE2_TYPE                         0x10119
#define DR_MS_BASE2_TYPE_dft                     0x0004
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 BASE2_TYPE           :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE2_TYPE           :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE2_TYPE_t;

#define DR_MS_BASE3_TYPE                         0x1011a
#define DR_MS_BASE3_TYPE_dft                     0x0004
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 BASE3_TYPE           :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE3_TYPE           :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE3_TYPE_t;

#define DR_MS_BASE0_INST                         0x1011b
#define DR_MS_BASE0_INST_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 BASE0_INST           :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE0_INST           :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE0_INST_t;

#define DR_MS_BASE1_INST                         0x1011c
#define DR_MS_BASE1_INST_dft                     0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 BASE1_INST           :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE1_INST           :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE1_INST_t;

#define DR_MS_BASE2_INST                         0x1011d
#define DR_MS_BASE2_INST_dft                     0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 BASE2_INST           :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE2_INST           :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE2_INST_t;

#define DR_MS_BASE3_INST                         0x1011e
#define DR_MS_BASE3_INST_dft                     0x0003
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 BASE3_INST           :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BASE3_INST           :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_BASE3_INST_t;

#define DR_MS_LTB_MIN_DEP1                       0x10120
#define DR_MS_LTB_MIN_DEP1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_MIN_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_MIN_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_MIN_DEP1_t;

#define DR_MS_LTB_MIN_DEP0                       0x10121
#define DR_MS_LTB_MIN_DEP0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_MIN_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_MIN_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_MIN_DEP0_t;

#define DR_MS_LTB_MAX_DEP1                       0x10122
#define DR_MS_LTB_MAX_DEP1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_MAX_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_MAX_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_MAX_DEP1_t;

#define DR_MS_LTB_MAX_DEP0                       0x10123
#define DR_MS_LTB_MAX_DEP0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_MAX_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_MAX_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_MAX_DEP0_t;

#define DR_MS_LTB_ACC_DEP2                       0x10124
#define DR_MS_LTB_ACC_DEP2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_ACC_DEP2_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_ACC_DEP2_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_ACC_DEP2_t;

#define DR_MS_LTB_ACC_DEP1                       0x10125
#define DR_MS_LTB_ACC_DEP1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_ACC_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_ACC_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_ACC_DEP1_t;

#define DR_MS_LTB_ACC_DEP0                       0x10126
#define DR_MS_LTB_ACC_DEP0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_ACC_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_ACC_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_ACC_DEP0_t;

#define DR_MS_LTB_PKT_CNT1                       0x10127
#define DR_MS_LTB_PKT_CNT1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_PKT_CNT1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_PKT_CNT1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_PKT_CNT1_t;

#define DR_MS_LTB_PKT_CNT0                       0x10128
#define DR_MS_LTB_PKT_CNT0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 LTB_PKT_CNT0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LTB_PKT_CNT0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_LTB_PKT_CNT0_t;

#define DR_MS_HTB_MIN_DEP1                       0x10129
#define DR_MS_HTB_MIN_DEP1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_MIN_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_MIN_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_MIN_DEP1_t;

#define DR_MS_HTB_MIN_DEP0                       0x1012a
#define DR_MS_HTB_MIN_DEP0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_MIN_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_MIN_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_MIN_DEP0_t;

#define DR_MS_HTB_MAX_DEP1                       0x1012b
#define DR_MS_HTB_MAX_DEP1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_MAX_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_MAX_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_MAX_DEP1_t;

#define DR_MS_HTB_MAX_DEP0                       0x1012c
#define DR_MS_HTB_MAX_DEP0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_MAX_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_MAX_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_MAX_DEP0_t;

#define DR_MS_HTB_ACC_DEP2                       0x1012d
#define DR_MS_HTB_ACC_DEP2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_ACC_DEP2_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_ACC_DEP2_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_ACC_DEP2_t;

#define DR_MS_HTB_ACC_DEP1                       0x1012e
#define DR_MS_HTB_ACC_DEP1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_ACC_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_ACC_DEP1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_ACC_DEP1_t;

#define DR_MS_HTB_ACC_DEP0                       0x1012f
#define DR_MS_HTB_ACC_DEP0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_ACC_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_ACC_DEP0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_ACC_DEP0_t;

#define DR_MS_HTB_PKT_CNT1                       0x10130
#define DR_MS_HTB_PKT_CNT1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_PKT_CNT1_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_PKT_CNT1_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_PKT_CNT1_t;

#define DR_MS_HTB_PKT_CNT0                       0x10131
#define DR_MS_HTB_PKT_CNT0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 HTB_PKT_CNT0_ADDR    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 HTB_PKT_CNT0_ADDR    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_HTB_PKT_CNT0_t;

#define DR_MS_IN_USG4                            0x10132
#define DR_MS_IN_USG4_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SA                   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA                   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_IN_USG4_t;

#define DR_MS_IN_USG3                            0x10133
#define DR_MS_IN_USG3_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SA                   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA                   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_IN_USG3_t;

#define DR_MS_IN_USG2                            0x10134
#define DR_MS_IN_USG2_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SA                   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SA                   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_IN_USG2_t;

#define DR_MS_IN_USG1                            0x10135
#define DR_MS_IN_USG1_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 VERSION_RESERVED     : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VERSION_RESERVED     : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_IN_USG1_t;

#define DR_MS_IN_USG0                            0x10136
#define DR_MS_IN_USG0_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 UsageControlfield    : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 UsageControlfield    : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_IN_USG0_t;

#define DR_MS_MCFAIR_CR                          0x10137
#define DR_MS_MCFAIR_CR_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 MC_EN                :  1 ; /* bits 9:9 */
    cs_uint16 MC_T0_T1             :  1 ; /* bits 8:8 */
    cs_uint16 MCFAIR_TH            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MCFAIR_TH            :  8 ; /* bits 7:0 */
    cs_uint16 MC_T0_T1             :  1 ; /* bits 8:8 */
    cs_uint16 MC_EN                :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_MCFAIR_CR_t;

#define DR_MS_ACTVWGHT_CR                        0x10138
#define DR_MS_ACTVWGHT_CR_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 AW_EN                :  1 ; /* bits 9:9 */
    cs_uint16 AW_T0_T1             :  1 ; /* bits 8:8 */
    cs_uint16 ACTVWGHT_TH          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ACTVWGHT_TH          :  8 ; /* bits 7:0 */
    cs_uint16 AW_T0_T1             :  1 ; /* bits 8:8 */
    cs_uint16 AW_EN                :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_ACTVWGHT_CR_t;

#define DR_MS_COEFF2                             0x10139
#define DR_MS_COEFF2_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 RAMPCOEFF            :  4 ; /* bits 11:8 */
    cs_uint16 RATECOEFF            :  4 ; /* bits 7:4 */
    cs_uint16 LP_NRXMIT            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LP_NRXMIT            :  4 ; /* bits 3:0 */
    cs_uint16 RATECOEFF            :  4 ; /* bits 7:4 */
    cs_uint16 RAMPCOEFF            :  4 ; /* bits 11:8 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_COEFF2_t;

#define DR_MS_TTL_TO_WRAP                        0x1013a
#define DR_MS_TTL_TO_WRAP_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TTL_TO_WRAP          :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TTL_TO_WRAP          :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_TTL_TO_WRAP_t;

#define DR_MS_MY_WEIGHT                          0x1013b
#define DR_MS_MY_WEIGHT_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 MY_WEIGHT            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MY_WEIGHT            :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_MY_WEIGHT_t;

#define DR_MS_UNRESV_RATE1                       0x1013c
#define DR_MS_UNRESV_RATE1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 UNRES_RATE1          :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 UNRES_RATE1          :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_UNRESV_RATE1_t;

#define DR_MS_UNRESV_RATE0                       0x1013d
#define DR_MS_UNRESV_RATE0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 UNRES_RATE0          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 UNRES_RATE0          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_UNRESV_RATE0_t;

#define DR_MS_MAX_RCV_RATE1                      0x1013e
#define DR_MS_MAX_RCV_RATE1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 MAX_RCV_RATE1        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAX_RCV_RATE1        :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_MAX_RCV_RATE1_t;

#define DR_MS_MAX_RCV_RATE0                      0x1013f
#define DR_MS_MAX_RCV_RATE0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 MAX_RCV_RATE0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MAX_RCV_RATE0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_MAX_RCV_RATE0_t;

#define DR_MS_SPARE_REG7                         0x10140
#define DR_MS_SPARE_REG7_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG7           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG7           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG7_t;

#define DR_MS_SPARE_REG6                         0x10141
#define DR_MS_SPARE_REG6_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG6           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG6           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG6_t;

#define DR_MS_SPARE_REG5                         0x10142
#define DR_MS_SPARE_REG5_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG5           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG5           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG5_t;

#define DR_MS_SPARE_REG4                         0x10143
#define DR_MS_SPARE_REG4_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG4           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG4           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG4_t;

#define DR_MS_SPARE_REG3                         0x10144
#define DR_MS_SPARE_REG3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG3           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG3           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG3_t;

#define DR_MS_SPARE_REG2                         0x10145
#define DR_MS_SPARE_REG2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG2           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG2           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG2_t;

#define DR_MS_SPARE_REG1                         0x10146
#define DR_MS_SPARE_REG1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG1           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG1           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG1_t;

#define DR_MS_SPARE_REG0                         0x10147
#define DR_MS_SPARE_REG0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SPARE_REG0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_SPARE_REG0_t;

#define DR_MS_RTT1_CR                            0x10148
#define DR_MS_RTT1_CR_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RTT_EN               :  1 ; /* bits 15:15 */
    cs_uint16 RTT_T0_T1            :  1 ; /* bits 14:14 */
    cs_uint16 RTT_TH               : 14 ; /* bits 13:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RTT_TH               : 14 ; /* bits 13:0 */
    cs_uint16 RTT_T0_T1            :  1 ; /* bits 14:14 */
    cs_uint16 RTT_EN               :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_RTT1_CR_t;

#define DR_MS_RTT0_CR                            0x10149
#define DR_MS_RTT0_CR_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RTT_TH               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RTT_TH               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_RTT0_CR_t;

#define DR_MS_RATE_LOW_TH1                       0x1014a
#define DR_MS_RATE_LOW_TH1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 RATE_LOW_TH1         :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RATE_LOW_TH1         :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_RATE_LOW_TH1_t;

#define DR_MS_RATE_LOW_TH0                       0x1014b
#define DR_MS_RATE_LOW_TH0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RATE_LOW_TH0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RATE_LOW_TH0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_RATE_LOW_TH0_t;

#define DR_MS_RATE_HIGH_TH1                      0x1014c
#define DR_MS_RATE_HIGH_TH1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 RATE_HIGH_TH1        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RATE_HIGH_TH1        :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_RATE_HIGH_TH1_t;

#define DR_MS_RATE_HIGH_TH0                      0x1014d
#define DR_MS_RATE_HIGH_TH0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RATE_HIGH_TH0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RATE_HIGH_TH0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_RATE_HIGH_TH0_t;

#define DR_MS_TBD_TIME_CNT1                      0x1014e
#define DR_MS_TBD_TIME_CNT1_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 TBD_TIME_CNT1        : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBD_TIME_CNT1        : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_TBD_TIME_CNT1_t;

#define DR_MS_TBD_TIME_CNT0                      0x1014f
#define DR_MS_TBD_TIME_CNT0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TBD_TIME_CNT0        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TBD_TIME_CNT0        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} DR_MS_TBD_TIME_CNT0_t;


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* RingMAC */

typedef struct {
  DR_MICRO_IF_JTAG1_t                      JTAG1;                         /* addr: 0x0000 */
  DR_MICRO_IF_JTAG0_t                      JTAG0;                         /* addr: 0x0001 */
  DR_MICRO_IF_SCRATCH_t                    SCRATCH;                       /* addr: 0x0002 */
  DR_MICRO_IF_CHIP_ID_t                    CHIP_ID;                       /* addr: 0x0003 */
  cs_uint16                                rsrvd1;
  DR_MICRO_IF_IRQ5_t                       IRQ5;                          /* addr: 0x0005 */
  DR_MICRO_IF_IRQ_ENAB5_t                  IRQ_ENAB5;                     /* addr: 0x0006 */
  DR_MICRO_IF_IRQ_STAT5_t                  IRQ_STAT5;                     /* addr: 0x0007 */
  cs_uint16                                rsrvd2;
  DR_MICRO_IF_IRQ4_t                       IRQ4;                          /* addr: 0x0009 */
  DR_MICRO_IF_IRQ_ENAB4_t                  IRQ_ENAB4;                     /* addr: 0x000a */
  DR_MICRO_IF_IRQ_STAT4_t                  IRQ_STAT4;                     /* addr: 0x000b */
  cs_uint16                                rsrvd3;
  DR_MICRO_IF_IRQ3_t                       IRQ3;                          /* addr: 0x000d */
  DR_MICRO_IF_IRQ_ENAB3_t                  IRQ_ENAB3;                     /* addr: 0x000e */
  DR_MICRO_IF_IRQ_STAT3_t                  IRQ_STAT3;                     /* addr: 0x000f */
  cs_uint16                                rsrvd4;
  DR_MICRO_IF_IRQ2_t                       IRQ2;                          /* addr: 0x0011 */
  DR_MICRO_IF_IRQ_ENAB2_t                  IRQ_ENAB2;                     /* addr: 0x0012 */
  DR_MICRO_IF_IRQ_STAT2_t                  IRQ_STAT2;                     /* addr: 0x0013 */
  cs_uint16                                rsrvd5;
  DR_MICRO_IF_IRQ1_t                       IRQ1;                          /* addr: 0x0015 */
  DR_MICRO_IF_IRQ_ENAB1_t                  IRQ_ENAB1;                     /* addr: 0x0016 */
  DR_MICRO_IF_IRQ_STAT1_t                  IRQ_STAT1;                     /* addr: 0x0017 */
  DR_MICRO_IF_MEMPAR1_t                    MEMPAR1;                       /* addr: 0x0018 */
  DR_MICRO_IF_IRQ0_t                       IRQ0;                          /* addr: 0x0019 */
  DR_MICRO_IF_IRQ_ENAB0_t                  IRQ_ENAB0;                     /* addr: 0x001a */
  DR_MICRO_IF_IRQ_STAT0_t                  IRQ_STAT0;                     /* addr: 0x001b */
  DR_MICRO_IF_MEMPAR0_t                    MEMPAR0;                       /* addr: 0x001c */
  DR_MICRO_IF_IRQMAP_t                     IRQMAP;                        /* addr: 0x001d */
  DR_MATE_FT_TTL_t                         FT_TTL;                        /* addr: 0x001e */
  DR_MICRO_IF_CR6_t                        CR6;                           /* addr: 0x001f */
  DR_MICRO_IF_SRESET_t                     SRESET;                        /* addr: 0x0020 */
  DR_FRAMER_CR5_t                          CR5;                           /* addr: 0x0021 */
  DR_HOST_CR4_t                            CR4;                           /* addr: 0x0022 */
  DR_MATE_CR3_t                            CR3_;                           /* addr: 0x0023 */
  DR_MICRO_IF_CR2_t                        CR2_;                           /* addr: 0x0024 */
  DR_MICRO_IF_CR1_t                        CR1_;                           /* addr: 0x0025 */
  DR_MICRO_IF_CR0_t                        CR0_;                           /* addr: 0x0026 */
  DR_RPR_CR2A_t                            CR2A;                          /* addr: 0x0027 */
  DR_MICRO_IF_SRP_HDR_t                    SRP_HDR;                       /* addr: 0x0028 */
  DR_SRPF_TBH_THRESH_t                     TBH_THRESH;                    /* addr: 0x0029 */
  DR_TB_TB_INC_FREQ_t                      TB_INC_FREQ;                   /* addr: 0x002a */
  DR_SRPF_TX_SYNC_TFAST1_t                 TX_SYNC_TFAST1;                /* addr: 0x002b */
  DR_SRPF_TX_SYNC_TFAST0_t                 TX_SYNC_TFAST0;                /* addr: 0x002c */
  DR_SRPF_TX_SYNC_TSLOW1_t                 TX_SYNC_TSLOW1;                /* addr: 0x002d */
  DR_SRPF_TX_SYNC_TSLOW0_t                 TX_SYNC_TSLOW0;                /* addr: 0x002e */
  DR_SRPF_IDLE_THRESH_t                    IDLE_THRESH;                   /* addr: 0x002f */
  DR_SRPF_ILEN_t                           ILEN;                          /* addr: 0x0030 */
  DR_RATE_LMT_HI_TIME_t                    HI_TIME;                       /* addr: 0x0031 */
  DR_RATE_LMT_HI_DELTA_t                   HI_DELTA;                      /* addr: 0x0032 */
  DR_RATE_LMT_HI_MAX_t                     HI_MAX;                        /* addr: 0x0033 */
  DR_RATE_LMT_LO_TIME_t                    LO_TIME;                       /* addr: 0x0034 */
  DR_RATE_LMT_LO_DELTA_t                   LO_DELTA;                      /* addr: 0x0035 */
  DR_RATE_LMT_LO_MAX_t                     LO_MAX;                        /* addr: 0x0036 */
  DR_TB_TB_PIPECTL_t                       TB_PIPECTL;                    /* addr: 0x0037 */
  DR_SRPF_MAX_ALLOW_t                      MAX_ALLOW;                     /* addr: 0x0038 */
  cs_uint16                                rsrvd6;
  DR_RPR_MED_TIME_t                        MED_TIME;                      /* addr: 0x003a */
  DR_RPR_MED_DELTA_t                       MED_DELTA;                     /* addr: 0x003b */
  DR_RPR_MED_MAX_t                         MED_MAX;                       /* addr: 0x003c */
  DR_RPR_CTL_TIME_t                        CTL_TIME;                      /* addr: 0x003d */
  DR_RPR_CTL_DELTA_t                       CTL_DELTA;                     /* addr: 0x003e */
  DR_RPR_CTL_MAX_t                         CTL_MAX;                       /* addr: 0x003f */
  DR_FRAMER_RX_TIMEOUT1_t                  RX_TIMEOUT1;                   /* addr: 0x0040 */
  DR_FRAMER_RX_TIMEOUT0_t                  RX_TIMEOUT0;                   /* addr: 0x0041 */
  DR_FRAMER_RXF_FULL_ASSERT_TH_t           RXF_FULL_ASSERT_TH;            /* addr: 0x0042 */
  DR_HOST_TXH_FULL_ASSERT_TH_t             TXH_FULL_ASSERT_TH;            /* addr: 0x0043 */
  DR_FRAMER_RXF_FULL_DEASSERT_TH_t         RXF_FULL_DEASSERT_TH;          /* addr: 0x0044 */
  DR_HOST_TXH_FULL_DEASSERT_TH_t           TXH_FULL_DEASSERT_TH;          /* addr: 0x0045 */
  DR_HOST_RXH_UNDRFLW_TH_t                 RXH_UNDRFLW_TH;                /* addr: 0x0046 */
  DR_FRAMER_TXF_UNDRFLW_TH_t               TXF_UNDRFLW_TH;                /* addr: 0x0047 */
  DR_FRAMER_RXF_RUNTSZ_t                   RXF_RUNTSZ;                    /* addr: 0x0048 */
  DR_HOST_TXH_RUNTSZ_t                     TXH_RUNTSZ;                    /* addr: 0x0049 */
  DR_HOST_RXH_GIANTSZ_t                    RXH_GIANTSZ;                   /* addr: 0x004a */
  DR_FRAMER_RXF_GIANTSZ_t                  RXF_GIANTSZ;                   /* addr: 0x004b */
  DR_HOST_TXH_GIANTSZ_t                    TXH_GIANTSZ;                   /* addr: 0x004c */
  DR_HOST_CR4A_t                           CR4A;                          /* addr: 0x004d */
  DR_SRPF_TB_LTHRESH_t                     TB_LTHRESH;                    /* addr: 0x004e */
  DR_SRPF_TB_HTHRESH_t                     TB_HTHRESH;                    /* addr: 0x004f */
  DR_MATE_FRM_CRD_OFFSET_t                 FRM_CRD_OFFSET;                /* addr: 0x0050 */
  DR_MATE_FRM_CRD_SHFT_t                   FRM_CRD_SHFT;                  /* addr: 0x0051 */
  DR_MATE_IDLE_CTRL_t                      IDLE_CTRL;                     /* addr: 0x0052 */
  DR_MATE_TOM_FRM_SZ_t                     TOM_FRM_SZ;                    /* addr: 0x0053 */
  DR_MATE_TOM_FRM_HDR_SZ_t                 TOM_FRM_HDR_SZ;                /* addr: 0x0054 */
  DR_MATE_TOM_FIFO_TH_t                    TOM_FIFO_TH;                   /* addr: 0x0055 */
  DR_MATE_IDLE5_CHAR_t                     IDLE5_CHAR;                    /* addr: 0x0056 */
  DR_MATE_IDLE4_CHAR_t                     IDLE4_CHAR;                    /* addr: 0x0057 */
  DR_MATE_IDLE3_CHAR_t                     IDLE3_CHAR;                    /* addr: 0x0058 */
  DR_MATE_IDLE2_CHAR_t                     IDLE2_CHAR;                    /* addr: 0x0059 */
  DR_MATE_IDLE1_CHAR_t                     IDLE1_CHAR;                    /* addr: 0x005a */
  DR_MATE_T_CHAR_t                         T_CHAR;                        /* addr: 0x005b */
  DR_MATE_MATE_STARTSEQ_SZ_t               MATE_STARTSEQ_SZ;              /* addr: 0x005c */
  DR_MATE_MATE_STARTSEQ_D7_t               MATE_STARTSEQ_D7;              /* addr: 0x005d */
  DR_MATE_MATE_STARTSEQ_D6_t               MATE_STARTSEQ_D6;              /* addr: 0x005e */
  DR_MATE_MATE_STARTSEQ_D5_t               MATE_STARTSEQ_D5;              /* addr: 0x005f */
  DR_MATE_MATE_STARTSEQ_D4_t               MATE_STARTSEQ_D4;              /* addr: 0x0060 */
  DR_MATE_MATE_STARTSEQ_D3_t               MATE_STARTSEQ_D3;              /* addr: 0x0061 */
  DR_MATE_MATE_STARTSEQ_D2_t               MATE_STARTSEQ_D2;              /* addr: 0x0062 */
  DR_MATE_MATE_STARTSEQ_D1_t               MATE_STARTSEQ_D1;              /* addr: 0x0063 */
  DR_MATE_MATE_STARTSEQ_D0_t               MATE_STARTSEQ_D0;              /* addr: 0x0064 */
  DR_RPR_HIRES_TIME_t                      HIRES_TIME;                    /* addr: 0x0065 */
  DR_RPR_HIRES_DELTA_t                     HIRES_DELTA;                   /* addr: 0x0066 */
  DR_RPR_HIRES_MAX_t                       HIRES_MAX;                     /* addr: 0x0067 */
  DR_RPR_HIA0_TIME_t                       HIA0_TIME;                     /* addr: 0x0068 */
  DR_RPR_HIA0_DELTA_t                      HIA0_DELTA;                    /* addr: 0x0069 */
  DR_RPR_HIA0_MAX_t                        HIA0_MAX;                      /* addr: 0x006a */
  cs_uint16                                rsrvd7[2];
  DR_RPR_CRLMT_t                           CRLMT;                         /* addr: 0x006d */
  DR_RPR_CRLMT2_t                          CRLMT2;                        /* addr: 0x006e */
  DR_HOST_EXTTB_PIPECTL_t                  EXTTB_PIPECTL;                 /* addr: 0x006f */
  DR_TB_PTQ_BASE_t                         PTQ_BASE;                      /* addr: 0x0070 */
  DR_TB_PTQ_MAX_t                          PTQ_MAX;                       /* addr: 0x0071 */
  DR_TB_STQ_BASE_t                         STQ_BASE;                      /* addr: 0x0072 */
  DR_TB_STQ_MAX_t                          STQ_MAX;                       /* addr: 0x0073 */
  DR_HOST_EXTTB0_BASE_t                    EXTTB0_BASE;                   /* addr: 0x0074 */
  DR_HOST_EXTTB1_BASE_t                    EXTTB1_BASE;                   /* addr: 0x0075 */
  DR_HOST_EXTTB2_BASE_t                    EXTTB2_BASE;                   /* addr: 0x0076 */
  DR_HOST_EXTTB3_BASE_t                    EXTTB3_BASE;                   /* addr: 0x0077 */
  DR_HOST_EXTTB0_MAX_t                     EXTTB0_MAX;                    /* addr: 0x0078 */
  DR_HOST_EXTTB1_MAX_t                     EXTTB1_MAX;                    /* addr: 0x0079 */
  DR_HOST_EXTTB2_MAX_t                     EXTTB2_MAX;                    /* addr: 0x007a */
  DR_HOST_EXTTB3_MAX_t                     EXTTB3_MAX;                    /* addr: 0x007b */
  DR_HOST_EXTTB0_FULL_t                    EXTTB0_FULL;                   /* addr: 0x007c */
  DR_HOST_EXTTB1_FULL_t                    EXTTB1_FULL;                   /* addr: 0x007d */
  DR_HOST_EXTTB2_FULL_t                    EXTTB2_FULL;                   /* addr: 0x007e */
  DR_HOST_EXTTB3_FULL_t                    EXTTB3_FULL;                   /* addr: 0x007f */
  DR_MAC_HEAD_MAC_OFFSET0_t                MAC_OFFSET0;                   /* addr: 0x0080 */
  DR_MAC_HEAD_MAC_OFFSET1_t                MAC_OFFSET1;                   /* addr: 0x0081 */
  DR_MAC_HEAD_MAC_OFFSET2_t                MAC_OFFSET2;                   /* addr: 0x0082 */
  DR_MAC_HEAD_MAC_OFFSET3_t                MAC_OFFSET3;                   /* addr: 0x0083 */
  DR_MAC_HEAD_MAC_PROTOCOL0_t              MAC_PROTOCOL0;                 /* addr: 0x0084 */
  DR_MAC_HEAD_MAC_PROTOCOL1_t              MAC_PROTOCOL1;                 /* addr: 0x0085 */
  DR_MAC_HEAD_MAC_PROTOCOL2_t              MAC_PROTOCOL2;                 /* addr: 0x0086 */
  DR_MAC_HEAD_MAC_PROTOCOL3_t              MAC_PROTOCOL3;                 /* addr: 0x0087 */
  DR_MAC_HEAD_MAC_MODE_t                   MAC_MODE;                      /* addr: 0x0088 */
  DR_MAC_HEAD_MAC_SA2_t                    MAC_SA2;                       /* addr: 0x0089 */
  DR_MAC_HEAD_MAC_SA1_t                    MAC_SA1;                       /* addr: 0x008a */
  DR_MAC_HEAD_MAC_SA0_t                    MAC_SA0;                       /* addr: 0x008b */
  DR_MAC_HEAD_MACWR_t                      MACWR;                         /* addr: 0x008c */
  DR_MAC_HEAD_MACTTL0_t                    MACTTL0;                       /* addr: 0x008d */
  DR_MAC_HEAD_MACTTL1_t                    MACTTL1;                       /* addr: 0x008e */
  DR_MAC_HEAD_MACTTL2_t                    MACTTL2;                       /* addr: 0x008f */
  DR_MAC_HEAD_MACTSN_t                     MACTSN;                        /* addr: 0x0090 */
  DR_MAC_HEAD_MAC_TSN_PKT1_t               MAC_TSN_PKT1;                  /* addr: 0x0091 */
  DR_MAC_HEAD_MAC_TSN_PKT0_t               MAC_TSN_PKT0;                  /* addr: 0x0092 */
  DR_MAC_HEAD_MAC_EXPTSN_PKT1_t            MAC_EXPTSN_PKT1;               /* addr: 0x0093 */
  DR_MAC_HEAD_MAC_EXPTSN_PKT0_t            MAC_EXPTSN_PKT0;               /* addr: 0x0094 */
  DR_MAC_HEAD_FLUSHED_TSN_t                FLUSHED_TSN;                   /* addr: 0x0095 */
  DR_SRPF_TB_MTHRESH_t                     TB_MTHRESH;                    /* addr: 0x0096 */
  cs_uint16                                rsrvd8;
  DR_LOOKUP_LPSAT_t                        LPSAT;                         /* addr: 0x0098 */
  DR_LOOKUP_LBSAT_t                        LBSAT;                         /* addr: 0x0099 */
  DR_STAT_SPSAT_t                          SPSAT;                         /* addr: 0x009a */
  DR_STAT_SBSAT_t                          SBSAT;                         /* addr: 0x009b */
  DR_HOST_EXTTB0_DEPTH_t                   EXTTB0_DEPTH;                  /* addr: 0x009c */
  DR_HOST_EXTTB1_DEPTH_t                   EXTTB1_DEPTH;                  /* addr: 0x009d */
  DR_HOST_EXTTB2_DEPTH_t                   EXTTB2_DEPTH;                  /* addr: 0x009e */
  DR_HOST_EXTTB3_DEPTH_t                   EXTTB3_DEPTH;                  /* addr: 0x009f */
  DR_TBD_IPS_CTL_CR_t                      IPS_CTL_CR;                    /* addr: 0x00a0 */
  DR_TBD_IPS_RCV_HEAD_t                    IPS_RCV_HEAD;                  /* addr: 0x00a1 */
  DR_TBD_IPS_RCV_TAIL_t                    IPS_RCV_TAIL;                  /* addr: 0x00a2 */
  DR_TBD_IPS_RCV_DATA3_t                   IPS_RCV_DATA3;                 /* addr: 0x00a3 */
  DR_TBD_IPS_RCV_DATA2_t                   IPS_RCV_DATA2;                 /* addr: 0x00a4 */
  DR_TBD_IPS_RCV_DATA1_t                   IPS_RCV_DATA1;                 /* addr: 0x00a5 */
  DR_TBD_IPS_RCV_DATA0_t                   IPS_RCV_DATA0;                 /* addr: 0x00a6 */
  DR_TBD_IPS_RCV_DROP_COUNT1_t             IPS_RCV_DROP_COUNT1;           /* addr: 0x00a7 */
  DR_TBD_IPS_RCV_DROP_COUNT0_t             IPS_RCV_DROP_COUNT0;           /* addr: 0x00a8 */
  DR_TBD_IPS_RCV_ERR_COUNT1_t              IPS_RCV_ERR_COUNT1;            /* addr: 0x00a9 */
  DR_TBD_IPS_RCV_ERR_COUNT0_t              IPS_RCV_ERR_COUNT0;            /* addr: 0x00aa */
  DR_SRPF_IPS_SND_HEAD_t                   IPS_SND_HEAD;                  /* addr: 0x00ab */
  DR_SRPF_IPS_SND_SIZE_t                   IPS_SND_SIZE;                  /* addr: 0x00ac */
  DR_SRPF_IPS_SND_DATA3_t                  IPS_SND_DATA3;                 /* addr: 0x00ad */
  DR_SRPF_IPS_SND_DATA2_t                  IPS_SND_DATA2;                 /* addr: 0x00ae */
  DR_SRPF_IPS_SND_DATA1_t                  IPS_SND_DATA1;                 /* addr: 0x00af */
  DR_SRPF_IPS_SND_DATA0_t                  IPS_SND_DATA0;                 /* addr: 0x00b0 */
  DR_TBD_CTL_RCV_HEAD_t                    CTL_RCV_HEAD;                  /* addr: 0x00b1 */
  DR_TBD_CTL_RCV_TAIL_t                    CTL_RCV_TAIL;                  /* addr: 0x00b2 */
  DR_TBD_CTL_RCV_DATA3_t                   CTL_RCV_DATA3;                 /* addr: 0x00b3 */
  DR_TBD_CTL_RCV_DATA2_t                   CTL_RCV_DATA2;                 /* addr: 0x00b4 */
  DR_TBD_CTL_RCV_DATA1_t                   CTL_RCV_DATA1;                 /* addr: 0x00b5 */
  DR_TBD_CTL_RCV_DATA0_t                   CTL_RCV_DATA0;                 /* addr: 0x00b6 */
  DR_TBD_CTL_RCV_DROP_COUNT1_t             CTL_RCV_DROP_COUNT1;           /* addr: 0x00b7 */
  DR_TBD_CTL_RCV_DROP_COUNT0_t             CTL_RCV_DROP_COUNT0;           /* addr: 0x00b8 */
  DR_TBD_CTL_RCV_ERR_COUNT1_t              CTL_RCV_ERR_COUNT1;            /* addr: 0x00b9 */
  DR_TBD_CTL_RCV_ERR_COUNT0_t              CTL_RCV_ERR_COUNT0;            /* addr: 0x00ba */
  DR_SRPF_CTL_SND_HEAD_t                   CTL_SND_HEAD;                  /* addr: 0x00bb */
  DR_SRPF_CTL_SND_SIZE_t                   CTL_SND_SIZE;                  /* addr: 0x00bc */
  DR_SRPF_CTL_SND_DATA3_t                  CTL_SND_DATA3;                 /* addr: 0x00bd */
  DR_SRPF_CTL_SND_DATA2_t                  CTL_SND_DATA2;                 /* addr: 0x00be */
  DR_SRPF_CTL_SND_DATA1_t                  CTL_SND_DATA1;                 /* addr: 0x00bf */
  DR_SRPF_CTL_SND_DATA0_t                  CTL_SND_DATA0;                 /* addr: 0x00c0 */
  DR_TBD_STATIONS_t                        STATIONS;                      /* addr: 0x00c1 */
  DR_TBD_IPS_RCV_DATA4_t                   IPS_RCV_DATA4;                 /* addr: 0x00c2 */
  DR_TBD_IPS_RCV_DATA5_t                   IPS_RCV_DATA5;                 /* addr: 0x00c3 */
  DR_FRAMER_RXF_IDLE_SA2_t                 RXF_IDLE_SA2;                  /* addr: 0x00c4 */
  DR_FRAMER_RXF_IDLE_SA1_t                 RXF_IDLE_SA1;                  /* addr: 0x00c5 */
  DR_FRAMER_RXF_IDLE_SA0_t                 RXF_IDLE_SA0;                  /* addr: 0x00c6 */
  DR_SRPF_CTL_SND_DATA4_t                  CTL_SND_DATA4;                 /* addr: 0x00c7 */
  DR_TBD_CTL_TYPE3_t                       CTL_TYPE3;                     /* addr: 0x00c8 */
  DR_TBD_CTL_MASK3_t                       CTL_MASK3;                     /* addr: 0x00c9 */
  DR_TBD_CTL_TYPE2_t                       CTL_TYPE2;                     /* addr: 0x00ca */
  DR_TBD_CTL_MASK2_t                       CTL_MASK2;                     /* addr: 0x00cb */
  DR_TBD_CTL_TYPE1_t                       CTL_TYPE1;                     /* addr: 0x00cc */
  DR_TBD_CTL_MASK1_t                       CTL_MASK1;                     /* addr: 0x00cd */
  DR_TBD_CTL_TYPE0_t                       CTL_TYPE0;                     /* addr: 0x00ce */
  DR_TBD_CTL_MASK0_t                       CTL_MASK0;                     /* addr: 0x00cf */
  DR_TBD_DEC_MODE2_3_t                     DEC_MODE2_3;                   /* addr: 0x00d0 */
  DR_TBD_DEC_MODE0_1_t                     DEC_MODE0_1;                   /* addr: 0x00d1 */
  DR_SRPF_DQT_A1_t                         DQT_A1;                        /* addr: 0x00d2 */
  DR_SRPF_DQT_A0_t                         DQT_A0;                        /* addr: 0x00d3 */
  DR_SRPF_DQT_B1_t                         DQT_B1;                        /* addr: 0x00d4 */
  DR_SRPF_DQT_B0_t                         DQT_B0;                        /* addr: 0x00d5 */
  DR_SRPF_DQT_C1_t                         DQT_C1;                        /* addr: 0x00d6 */
  DR_SRPF_DQT_C0_t                         DQT_C0;                        /* addr: 0x00d7 */
  DR_HOST_STRIP_SRP_PRG1_t                 STRIP_SRP_PRG1;                /* addr: 0x00d8 */
  DR_HOST_STRIP_SRP_PRG0_t                 STRIP_SRP_PRG0;                /* addr: 0x00d9 */
  DR_TBD_PROT_TIMER1_t                     PROT_TIMER1;                   /* addr: 0x00da */
  DR_TBD_PROT_TIMER0_t                     PROT_TIMER0;                   /* addr: 0x00db */
  DR_FRAMER_TXF_RATEMAX_t                  TXF_RATEMAX;                   /* addr: 0x00dc */
  DR_FRAMER_TXF_RATETIME_t                 TXF_RATETIME;                  /* addr: 0x00dd */
  DR_FRAMER_TXF_RATEDELTA_t                TXF_RATEDELTA;                 /* addr: 0x00de */
  cs_uint16                                rsrvd9;
  DR_MICRO_IF_FMRO_SEL_t                   FMRO_SEL;                      /* addr: 0x00e0 */
  DR_MICRO_IF_DIAG_CR_t                    DIAG_CR;                       /* addr: 0x00e1 */
  DR_MICRO_IF_MODE_SLEW_t                  MODE_SLEW;                     /* addr: 0x00e2 */
  cs_uint16                                rsrvd10[5];
  DR_MICRO_IF_LOCK_t                       LOCK;                          /* addr: 0x00e8 */
  cs_uint16                                rsrvd11[15];
  DR_MICRO_IF_WDOG_CR_t                    WDOG_CR;                       /* addr: 0x00f8 */
  DR_MICRO_IF_WDVAL1_t                     WDVAL1;                        /* addr: 0x00f9 */
  DR_MICRO_IF_WDVAL0_t                     WDVAL0;                        /* addr: 0x00fa */
  DR_MICRO_IF_MODE_OP_t                    MODE_OP;                       /* addr: 0x00fb */
  DR_MAC_HEAD_MAC_SADA_PKT1_t              MAC_SADA_PKT1;                 /* addr: 0x00fc */
  DR_MAC_HEAD_MAC_SADA_PKT0_t              MAC_SADA_PKT0;                 /* addr: 0x00fd */
  DR_FRAMER_RXF_SHRT_PKT_t                 RXF_SHRT_PKT;                  /* addr: 0x00fe */
  DR_HOST_TXH_SHRT_PKT_t                   TXH_SHRT_PKT;                  /* addr: 0x00ff */
  DR_MS_CR_SR_t                            CR_SR;                         /* addr: 0x0100 */
  DR_MS_SEMA4_t                            SEMA4;                         /* addr: 0x0101 */
  DR_MS_TIMER_CR_t                         TIMER_CR;                      /* addr: 0x0102 */
  DR_MS_T1_CNT1_t                          T1_CNT1;                       /* addr: 0x0103 */
  DR_MS_T1_CNT0_t                          T1_CNT0;                       /* addr: 0x0104 */
  DR_MS_T0_CNT1_t                          T0_CNT1;                       /* addr: 0x0105 */
  DR_MS_T0_CNT0_t                          T0_CNT0;                       /* addr: 0x0106 */
  DR_MS_PROV1_t                            PROV1;                         /* addr: 0x0107 */
  DR_MS_PROV0_t                            PROV0;                         /* addr: 0x0108 */
  DR_MS_COEFF_t                            COEFF;                         /* addr: 0x0109 */
  DR_MS_MY_SA2_t                           MY_SA2;                        /* addr: 0x010a */
  DR_MS_MY_SA1_t                           MY_SA1;                        /* addr: 0x010b */
  DR_MS_MY_SA0_t                           MY_SA0;                        /* addr: 0x010c */
  DR_MS_RSVD_MSG_t                         RSVD_MSG;                      /* addr: 0x010d */
  DR_MS_NEW_MULTICHOKE_t                   NEW_MULTICHOKE;                /* addr: 0x010e */
  cs_uint16                                rsrvd12;
  DR_MS_OPTIONS_t                          OPTIONS;                       /* addr: 0x0110 */
  DR_MS_CCR_t                              CCR;                           /* addr: 0x0111 */
  DR_MS_ERR_t                              ERR;                           /* addr: 0x0112 */
  DR_MS_PC_t                               PC;                            /* addr: 0x0113 */
  DR_MS_IX_t                               IX;                            /* addr: 0x0114 */
  DR_MS_IX_SEL_t                           IX_SEL;                        /* addr: 0x0115 */
  DR_MS_JIX_t                              JIX;                           /* addr: 0x0116 */
  DR_MS_BASE0_TYPE_t                       BASE0_TYPE;                    /* addr: 0x0117 */
  DR_MS_BASE1_TYPE_t                       BASE1_TYPE;                    /* addr: 0x0118 */
  DR_MS_BASE2_TYPE_t                       BASE2_TYPE;                    /* addr: 0x0119 */
  DR_MS_BASE3_TYPE_t                       BASE3_TYPE;                    /* addr: 0x011a */
  DR_MS_BASE0_INST_t                       BASE0_INST;                    /* addr: 0x011b */
  DR_MS_BASE1_INST_t                       BASE1_INST;                    /* addr: 0x011c */
  DR_MS_BASE2_INST_t                       BASE2_INST;                    /* addr: 0x011d */
  DR_MS_BASE3_INST_t                       BASE3_INST;                    /* addr: 0x011e */
  cs_uint16                                rsrvd13;
  DR_MS_LTB_MIN_DEP1_t                     LTB_MIN_DEP1;                  /* addr: 0x0120 */
  DR_MS_LTB_MIN_DEP0_t                     LTB_MIN_DEP0;                  /* addr: 0x0121 */
  DR_MS_LTB_MAX_DEP1_t                     LTB_MAX_DEP1;                  /* addr: 0x0122 */
  DR_MS_LTB_MAX_DEP0_t                     LTB_MAX_DEP0;                  /* addr: 0x0123 */
  DR_MS_LTB_ACC_DEP2_t                     LTB_ACC_DEP2;                  /* addr: 0x0124 */
  DR_MS_LTB_ACC_DEP1_t                     LTB_ACC_DEP1;                  /* addr: 0x0125 */
  DR_MS_LTB_ACC_DEP0_t                     LTB_ACC_DEP0;                  /* addr: 0x0126 */
  DR_MS_LTB_PKT_CNT1_t                     LTB_PKT_CNT1;                  /* addr: 0x0127 */
  DR_MS_LTB_PKT_CNT0_t                     LTB_PKT_CNT0;                  /* addr: 0x0128 */
  DR_MS_HTB_MIN_DEP1_t                     HTB_MIN_DEP1;                  /* addr: 0x0129 */
  DR_MS_HTB_MIN_DEP0_t                     HTB_MIN_DEP0;                  /* addr: 0x012a */
  DR_MS_HTB_MAX_DEP1_t                     HTB_MAX_DEP1;                  /* addr: 0x012b */
  DR_MS_HTB_MAX_DEP0_t                     HTB_MAX_DEP0;                  /* addr: 0x012c */
  DR_MS_HTB_ACC_DEP2_t                     HTB_ACC_DEP2;                  /* addr: 0x012d */
  DR_MS_HTB_ACC_DEP1_t                     HTB_ACC_DEP1;                  /* addr: 0x012e */
  DR_MS_HTB_ACC_DEP0_t                     HTB_ACC_DEP0;                  /* addr: 0x012f */
  DR_MS_HTB_PKT_CNT1_t                     HTB_PKT_CNT1;                  /* addr: 0x0130 */
  DR_MS_HTB_PKT_CNT0_t                     HTB_PKT_CNT0;                  /* addr: 0x0131 */
  DR_MS_IN_USG4_t                          IN_USG4;                       /* addr: 0x0132 */
  DR_MS_IN_USG3_t                          IN_USG3;                       /* addr: 0x0133 */
  DR_MS_IN_USG2_t                          IN_USG2;                       /* addr: 0x0134 */
  DR_MS_IN_USG1_t                          IN_USG1;                       /* addr: 0x0135 */
  DR_MS_IN_USG0_t                          IN_USG0;                       /* addr: 0x0136 */
  DR_MS_MCFAIR_CR_t                        MCFAIR_CR;                     /* addr: 0x0137 */
  DR_MS_ACTVWGHT_CR_t                      ACTVWGHT_CR;                   /* addr: 0x0138 */
  DR_MS_COEFF2_t                           COEFF2;                        /* addr: 0x0139 */
  DR_MS_TTL_TO_WRAP_t                      TTL_TO_WRAP;                   /* addr: 0x013a */
  DR_MS_MY_WEIGHT_t                        MY_WEIGHT;                     /* addr: 0x013b */
  DR_MS_UNRESV_RATE1_t                     UNRESV_RATE1;                  /* addr: 0x013c */
  DR_MS_UNRESV_RATE0_t                     UNRESV_RATE0;                  /* addr: 0x013d */
  DR_MS_MAX_RCV_RATE1_t                    MAX_RCV_RATE1;                 /* addr: 0x013e */
  DR_MS_MAX_RCV_RATE0_t                    MAX_RCV_RATE0;                 /* addr: 0x013f */
  DR_MS_SPARE_REG7_t                       SPARE_REG7;                    /* addr: 0x0140 */
  DR_MS_SPARE_REG6_t                       SPARE_REG6;                    /* addr: 0x0141 */
  DR_MS_SPARE_REG5_t                       SPARE_REG5;                    /* addr: 0x0142 */
  DR_MS_SPARE_REG4_t                       SPARE_REG4;                    /* addr: 0x0143 */
  DR_MS_SPARE_REG3_t                       SPARE_REG3;                    /* addr: 0x0144 */
  DR_MS_SPARE_REG2_t                       SPARE_REG2;                    /* addr: 0x0145 */
  DR_MS_SPARE_REG1_t                       SPARE_REG1;                    /* addr: 0x0146 */
  DR_MS_SPARE_REG0_t                       SPARE_REG0;                    /* addr: 0x0147 */
  DR_MS_RTT1_CR_t                          RTT1_CR;                       /* addr: 0x0148 */
  DR_MS_RTT0_CR_t                          RTT0_CR;                       /* addr: 0x0149 */
  DR_MS_RATE_LOW_TH1_t                     RATE_LOW_TH1;                  /* addr: 0x014a */
  DR_MS_RATE_LOW_TH0_t                     RATE_LOW_TH0;                  /* addr: 0x014b */
  DR_MS_RATE_HIGH_TH1_t                    RATE_HIGH_TH1;                 /* addr: 0x014c */
  DR_MS_RATE_HIGH_TH0_t                    RATE_HIGH_TH0;                 /* addr: 0x014d */
  DR_MS_TBD_TIME_CNT1_t                    TBD_TIME_CNT1;                 /* addr: 0x014e */
  DR_MS_TBD_TIME_CNT0_t                    TBD_TIME_CNT0;                 /* addr: 0x014f */
  cs_uint16                                rsrvd14[48];
  DR_MICRO_IF_GRAM_CR_t                    GRAM_CR;                       /* addr: 0x0180 */
  DR_MICRO_IF_GRAM_D5_t                    GRAM_D5;                       /* addr: 0x0181 */
  DR_MICRO_IF_GRAM_D4_t                    GRAM_D4;                       /* addr: 0x0182 */
  DR_MICRO_IF_GRAM_D3_t                    GRAM_D3;                       /* addr: 0x0183 */
  DR_MICRO_IF_GRAM_D2_t                    GRAM_D2;                       /* addr: 0x0184 */
  DR_MICRO_IF_GRAM_D1_t                    GRAM_D1;                       /* addr: 0x0185 */
  DR_MICRO_IF_GRAM_D0_t                    GRAM_D0;                       /* addr: 0x0186 */
  cs_uint16                                rsrvd15;
  DR_STAT_CAM_CR_t                         CAM_CR;                        /* addr: 0x0188 */
  DR_STAT_MASK3_t                          MASK3;                         /* addr: 0x0189 */
  DR_STAT_MASK2_t                          MASK2;                         /* addr: 0x018a */
  DR_STAT_MASK1_t                          MASK1;                         /* addr: 0x018b */
  DR_STAT_MASK0_t                          MASK0;                         /* addr: 0x018c */
  DR_STAT_CAM_SR_t                         CAM_SR;                        /* addr: 0x018d */
  DR_FRAMER_RX_CRC_STOMP1_t                RX_CRC_STOMP1;                 /* addr: 0x018e */
  DR_FRAMER_RX_CRC_STOMP0_t                RX_CRC_STOMP0;                 /* addr: 0x018f */
  DR_FRAMER_RX_CRC_ERR1_t                  RX_CRC_ERR1;                   /* addr: 0x0190 */
  DR_FRAMER_RX_CRC_ERR0_t                  RX_CRC_ERR0;                   /* addr: 0x0191 */
  DR_HOST_RXH_OVERFLOW1_t                  RXH_OVERFLOW1;                 /* addr: 0x0192 */
  DR_HOST_RXH_OVERFLOW0_t                  RXH_OVERFLOW0;                 /* addr: 0x0193 */
  DR_FRAMER_RXF_DPERR_t                    RXF_DPERR;                     /* addr: 0x0194 */
  DR_HOST_TXH_DPERR_t                      TXH_DPERR;                     /* addr: 0x0195 */
  DR_FRAMER_RXF_SRP_PERR_t                 RXF_SRP_PERR;                  /* addr: 0x0196 */
  DR_HOST_TXH_SRP_PERR_t                   TXH_SRP_PERR;                  /* addr: 0x0197 */
  DR_FRAMER_RXF_CTRL_PERR_t                RXF_CTRL_PERR;                 /* addr: 0x0198 */
  DR_HOST_TXH_CTRL_PERR_t                  TXH_CTRL_PERR;                 /* addr: 0x0199 */
  DR_FRAMER_RXF_ERR_t                      RXF_ERR;                       /* addr: 0x019a */
  DR_HOST_TXH_ERR_t                        TXH_ERR;                       /* addr: 0x019b */
  cs_uint16                                rsrvd16;
  DR_HOST_TXH_PKT_ERR_t                    TXH_PKT_ERR;                   /* addr: 0x019d */
  DR_HOST_RXH_STSIG_ERR_t                  RXH_STSIG_ERR;                 /* addr: 0x019e */
  DR_FRAMER_TXF_STSIG_ERR_t                TXF_STSIG_ERR;                 /* addr: 0x019f */
  DR_HOST_RXH_GIANT_t                      RXH_GIANT;                     /* addr: 0x01a0 */
  DR_FRAMER_RXF_RUNT_t                     RXF_RUNT;                      /* addr: 0x01a1 */
  DR_HOST_TXH_RUNT_t                       TXH_RUNT;                      /* addr: 0x01a2 */
  DR_RPR_RX_HEC_ERR1_t                     RX_HEC_ERR1;                   /* addr: 0x01a3 */
  DR_RPR_RX_HEC_ERR0_t                     RX_HEC_ERR0;                   /* addr: 0x01a4 */
  DR_FRAMER_RXF_PROTPKT_t                  RXF_PROTPKT;                   /* addr: 0x01a5 */
  DR_RPR_FRM_HEC_ERR_t                     FRM_HEC_ERR;                   /* addr: 0x01a6 */
  DR_MATE_SERDES_STAT_t                    SERDES_STAT;                   /* addr: 0x01a7 */
  DR_MATE_FRM_RUNT_t                       FRM_RUNT;                      /* addr: 0x01a8 */
  DR_MATE_FRM_GIANT_t                      FRM_GIANT;                     /* addr: 0x01a9 */
  DR_MATE_FRM_LOS_t                        FRM_LOS;                       /* addr: 0x01aa */
  DR_MATE_FRM_OVERFLOW_t                   FRM_OVERFLOW;                  /* addr: 0x01ab */
  DR_MATE_FRM_UNDERFLOW_t                  FRM_UNDERFLOW;                 /* addr: 0x01ac */
  DR_MATE_FRM_CRC_ERR_t                    FRM_CRC_ERR;                   /* addr: 0x01ad */
  DR_MATE_FRM_CTRL_SQNC_ERR_t              FRM_CTRL_SQNC_ERR;             /* addr: 0x01ae */
  cs_uint16                                rsrvd17;
  DR_MAC_HEAD_MAC_REWRITE_PKT1_t           MAC_REWRITE_PKT1;              /* addr: 0x01b0 */
  DR_MAC_HEAD_MAC_REWRITE_PKT0_t           MAC_REWRITE_PKT0;              /* addr: 0x01b1 */
  DR_TBD_RING_ID_ERR_t                     RING_ID_ERR;                   /* addr: 0x01b2 */
  DR_TB_HTB_DPERR_t                        HTB_DPERR;                     /* addr: 0x01b3 */
  DR_TB_LTB_DPERR_t                        LTB_DPERR;                     /* addr: 0x01b4 */
  DR_TB_HTB_DROP_PKT_t                     HTB_DROP_PKT;                  /* addr: 0x01b5 */
  DR_TB_LTB_DROP_PKT_t                     LTB_DROP_PKT;                  /* addr: 0x01b6 */
  DR_TBD_TBD_RUNT_USG_t                    TBD_RUNT_USG;                  /* addr: 0x01b7 */
  DR_TBD_SA_STRIP_PKT1_t                   SA_STRIP_PKT1;                 /* addr: 0x01b8 */
  DR_TBD_SA_STRIP_PKT0_t                   SA_STRIP_PKT0;                 /* addr: 0x01b9 */
  DR_TBD_TTL_DROP_PKT1_t                   TTL_DROP_PKT1;                 /* addr: 0x01ba */
  DR_TBD_TTL_DROP_PKT0_t                   TTL_DROP_PKT0;                 /* addr: 0x01bb */
  DR_SRPF_MY_USAGE1_t                      MY_USAGE1;                     /* addr: 0x01bc */
  DR_SRPF_MY_USAGE0_t                      MY_USAGE0;                     /* addr: 0x01bd */
  DR_SRPF_FWD_RATE1_t                      FWD_RATE1;                     /* addr: 0x01be */
  DR_SRPF_FWD_RATE0_t                      FWD_RATE0;                     /* addr: 0x01bf */
  DR_TB_HI_TB_DEL_ACC2_t                   HI_TB_DEL_ACC2;                /* addr: 0x01c0 */
  DR_TB_HI_TB_DEL_ACC1_t                   HI_TB_DEL_ACC1;                /* addr: 0x01c1 */
  DR_TB_HI_TB_DEL_ACC0_t                   HI_TB_DEL_ACC0;                /* addr: 0x01c2 */
  DR_TB_HI_TB_DEL_CNT1_t                   HI_TB_DEL_CNT1;                /* addr: 0x01c3 */
  DR_TB_HI_TB_DEL_CNT0_t                   HI_TB_DEL_CNT0;                /* addr: 0x01c4 */
  DR_TB_HI_TB_DEL_MIN1_t                   HI_TB_DEL_MIN1;                /* addr: 0x01c5 */
  DR_TB_HI_TB_DEL_MIN0_t                   HI_TB_DEL_MIN0;                /* addr: 0x01c6 */
  DR_TB_HI_TB_DEL_MAX1_t                   HI_TB_DEL_MAX1;                /* addr: 0x01c7 */
  DR_TB_HI_TB_DEL_MAX0_t                   HI_TB_DEL_MAX0;                /* addr: 0x01c8 */
  DR_TB_LO_TB_DEL_ACC2_t                   LO_TB_DEL_ACC2;                /* addr: 0x01c9 */
  DR_TB_LO_TB_DEL_ACC1_t                   LO_TB_DEL_ACC1;                /* addr: 0x01ca */
  DR_TB_LO_TB_DEL_ACC0_t                   LO_TB_DEL_ACC0;                /* addr: 0x01cb */
  DR_TB_LO_TB_DEL_CNT1_t                   LO_TB_DEL_CNT1;                /* addr: 0x01cc */
  DR_TB_LO_TB_DEL_CNT0_t                   LO_TB_DEL_CNT0;                /* addr: 0x01cd */
  DR_TB_LO_TB_DEL_MIN1_t                   LO_TB_DEL_MIN1;                /* addr: 0x01ce */
  DR_TB_LO_TB_DEL_MIN0_t                   LO_TB_DEL_MIN0;                /* addr: 0x01cf */
  DR_TB_LO_TB_DEL_MAX1_t                   LO_TB_DEL_MAX1;                /* addr: 0x01d0 */
  DR_TB_LO_TB_DEL_MAX0_t                   LO_TB_DEL_MAX0;                /* addr: 0x01d1 */
  DR_MICRO_IF_BIST_DONE1_t                 BIST_DONE1;                    /* addr: 0x01d2 */
  DR_MICRO_IF_BIST_DONE0_t                 BIST_DONE0;                    /* addr: 0x01d3 */
  DR_MICRO_IF_BIST_FAIL1_t                 BIST_FAIL1;                    /* addr: 0x01d4 */
  DR_MICRO_IF_BIST_FAIL0_t                 BIST_FAIL0;                    /* addr: 0x01d5 */
  DR_MICRO_IF_BIST_STARREADY_t             BIST_STARREADY;                /* addr: 0x01d6 */
  DR_MICRO_IF_BIST_STARERROR_t             BIST_STARERROR;                /* addr: 0x01d7 */
  DR_MICRO_IF_BIST_STARFAIL_t              BIST_STARFAIL;                 /* addr: 0x01d8 */
  cs_uint16                                rsrvd18;
  DR_SRPF_MY_USAGE_CNG1_t                  MY_USAGE_CNG1;                 /* addr: 0x01da */
  DR_SRPF_MY_USAGE_CNG0_t                  MY_USAGE_CNG0;                 /* addr: 0x01db */
  DR_SRPF_FWD_RATE_CNG1_t                  FWD_RATE_CNG1;                 /* addr: 0x01dc */
  DR_SRPF_FWD_RATE_CNG0_t                  FWD_RATE_CNG0;                 /* addr: 0x01dd */
  DR_SRPF_NRXMIT_RATE1_t                   NRXMIT_RATE1;                  /* addr: 0x01de */
  DR_SRPF_NRXMIT_RATE0_t                   NRXMIT_RATE0;                  /* addr: 0x01df */
  DR_MAC_HEAD_FLUSH_HOST_PKT1_t            FLUSH_HOST_PKT1;               /* addr: 0x01e0 */
  DR_MAC_HEAD_FLUSH_HOST_PKT0_t            FLUSH_HOST_PKT0;               /* addr: 0x01e1 */
  DR_MAC_HEAD_FLUSH_HOST_BYTE2_t           FLUSH_HOST_BYTE2;              /* addr: 0x01e2 */
  DR_MAC_HEAD_FLUSH_HOST_BYTE1_t           FLUSH_HOST_BYTE1;              /* addr: 0x01e3 */
  DR_MAC_HEAD_FLUSH_HOST_BYTE0_t           FLUSH_HOST_BYTE0;              /* addr: 0x01e4 */
  DR_MAC_HEAD_STRICTFLUSH_PKT1_t           STRICTFLUSH_PKT1;              /* addr: 0x01e5 */
  DR_MAC_HEAD_STRICTFLUSH_PKT0_t           STRICTFLUSH_PKT0;              /* addr: 0x01e6 */
  DR_MAC_HEAD_STRICTFLUSH_BYTE2_t          STRICTFLUSH_BYTE2;             /* addr: 0x01e7 */
  DR_MAC_HEAD_STRICTFLUSH_BYTE1_t          STRICTFLUSH_BYTE1;             /* addr: 0x01e8 */
  DR_MAC_HEAD_STRICTFLUSH_BYTE0_t          STRICTFLUSH_BYTE0;             /* addr: 0x01e9 */
  DR_MAC_HEAD_MACDROP_PKT1_t               MACDROP_PKT1;                  /* addr: 0x01ea */
  DR_MAC_HEAD_MACDROP_PKT0_t               MACDROP_PKT0;                  /* addr: 0x01eb */
  DR_MAC_HEAD_MACDROP_BYTE2_t              MACDROP_BYTE2;                 /* addr: 0x01ec */
  DR_MAC_HEAD_MACDROP_BYTE1_t              MACDROP_BYTE1;                 /* addr: 0x01ed */
  DR_MAC_HEAD_MACDROP_BYTE0_t              MACDROP_BYTE0;                 /* addr: 0x01ee */
  DR_TBD_STRICT_STRIP_PKT1_t               STRICT_STRIP_PKT1;             /* addr: 0x01ef */
  DR_TBD_STRICT_STRIP_PKT0_t               STRICT_STRIP_PKT0;             /* addr: 0x01f0 */
  DR_TBD_STRICT_STRIP_BYTE2_t              STRICT_STRIP_BYTE2;            /* addr: 0x01f1 */
  DR_TBD_STRICT_STRIP_BYTE1_t              STRICT_STRIP_BYTE1;            /* addr: 0x01f2 */
  DR_TBD_STRICT_STRIP_BYTE0_t              STRICT_STRIP_BYTE0;            /* addr: 0x01f3 */
  DR_TBD_SA_STRIP_BYTE2_t                  SA_STRIP_BYTE2;                /* addr: 0x01f4 */
  DR_TBD_SA_STRIP_BYTE1_t                  SA_STRIP_BYTE1;                /* addr: 0x01f5 */
  DR_TBD_SA_STRIP_BYTE0_t                  SA_STRIP_BYTE0;                /* addr: 0x01f6 */
  DR_TBD_TTL_DROP_BYTE2_t                  TTL_DROP_BYTE2;                /* addr: 0x01f7 */
  DR_TBD_TTL_DROP_BYTE1_t                  TTL_DROP_BYTE1;                /* addr: 0x01f8 */
  DR_TBD_TTL_DROP_BYTE0_t                  TTL_DROP_BYTE0;                /* addr: 0x01f9 */
  DR_HOST_EXTTB_DPERR_t                    EXTTB_DPERR;                   /* addr: 0x01fa */
  DR_HOST_EXTTB_DROP_PKT_t                 EXTTB_DROP_PKT;                /* addr: 0x01fb */
  DR_HOST_RXH_FE1_t                        RXH_FE1;                       /* addr: 0x01fc */
  DR_HOST_RXH_FE0_t                        RXH_FE0;                       /* addr: 0x01fd */
  DR_HOST_RXH_NONFE1_t                     RXH_NONFE1;                    /* addr: 0x01fe */
  DR_HOST_RXH_NONFE0_t                     RXH_NONFE0;                    /* addr: 0x01ff */
  DR_FRAMER_RXF_UNI_PKT1_t                 RXF_UNI_PKT1;                  /* addr: 0x0200 */
  DR_FRAMER_RXF_UNI_PKT0_t                 RXF_UNI_PKT0;                  /* addr: 0x0201 */
  DR_FRAMER_RXF_UNI_BYTE2_t                RXF_UNI_BYTE2;                 /* addr: 0x0202 */
  DR_FRAMER_RXF_UNI_BYTE1_t                RXF_UNI_BYTE1;                 /* addr: 0x0203 */
  DR_FRAMER_RXF_UNI_BYTE0_t                RXF_UNI_BYTE0;                 /* addr: 0x0204 */
  DR_FRAMER_RXF_MULTI_PKT1_t               RXF_MULTI_PKT1;                /* addr: 0x0205 */
  DR_FRAMER_RXF_MULTI_PKT0_t               RXF_MULTI_PKT0;                /* addr: 0x0206 */
  DR_FRAMER_RXF_MULTI_BYTE2_t              RXF_MULTI_BYTE2;               /* addr: 0x0207 */
  DR_FRAMER_RXF_MULTI_BYTE1_t              RXF_MULTI_BYTE1;               /* addr: 0x0208 */
  DR_FRAMER_RXF_MULTI_BYTE0_t              RXF_MULTI_BYTE0;               /* addr: 0x0209 */
  DR_FRAMER_RXF_HI_UNI_PKT1_t              RXF_HI_UNI_PKT1;               /* addr: 0x020a */
  DR_FRAMER_RXF_HI_UNI_PKT0_t              RXF_HI_UNI_PKT0;               /* addr: 0x020b */
  DR_FRAMER_RXF_HI_UNI_BYTE2_t             RXF_HI_UNI_BYTE2;              /* addr: 0x020c */
  DR_FRAMER_RXF_HI_UNI_BYTE1_t             RXF_HI_UNI_BYTE1;              /* addr: 0x020d */
  DR_FRAMER_RXF_HI_UNI_BYTE0_t             RXF_HI_UNI_BYTE0;              /* addr: 0x020e */
  DR_FRAMER_RXF_HI_MULTI_PKT1_t            RXF_HI_MULTI_PKT1;             /* addr: 0x020f */
  DR_FRAMER_RXF_HI_MULTI_PKT0_t            RXF_HI_MULTI_PKT0;             /* addr: 0x0210 */
  DR_FRAMER_RXF_HI_MULTI_BYTE2_t           RXF_HI_MULTI_BYTE2;            /* addr: 0x0211 */
  DR_FRAMER_RXF_HI_MULTI_BYTE1_t           RXF_HI_MULTI_BYTE1;            /* addr: 0x0212 */
  DR_FRAMER_RXF_HI_MULTI_BYTE0_t           RXF_HI_MULTI_BYTE0;            /* addr: 0x0213 */
  DR_FRAMER_TXF_UNI_PKT1_t                 TXF_UNI_PKT1;                  /* addr: 0x0214 */
  DR_FRAMER_TXF_UNI_PKT0_t                 TXF_UNI_PKT0;                  /* addr: 0x0215 */
  DR_FRAMER_TXF_UNI_BYTE2_t                TXF_UNI_BYTE2;                 /* addr: 0x0216 */
  DR_FRAMER_TXF_UNI_BYTE1_t                TXF_UNI_BYTE1;                 /* addr: 0x0217 */
  DR_FRAMER_TXF_UNI_BYTE0_t                TXF_UNI_BYTE0;                 /* addr: 0x0218 */
  DR_FRAMER_TXF_MULTI_PKT1_t               TXF_MULTI_PKT1;                /* addr: 0x0219 */
  DR_FRAMER_TXF_MULTI_PKT0_t               TXF_MULTI_PKT0;                /* addr: 0x021a */
  DR_FRAMER_TXF_MULTI_BYTE2_t              TXF_MULTI_BYTE2;               /* addr: 0x021b */
  DR_FRAMER_TXF_MULTI_BYTE1_t              TXF_MULTI_BYTE1;               /* addr: 0x021c */
  DR_FRAMER_TXF_MULTI_BYTE0_t              TXF_MULTI_BYTE0;               /* addr: 0x021d */
  DR_FRAMER_TXF_HI_UNI_PKT1_t              TXF_HI_UNI_PKT1;               /* addr: 0x021e */
  DR_FRAMER_TXF_HI_UNI_PKT0_t              TXF_HI_UNI_PKT0;               /* addr: 0x021f */
  DR_FRAMER_TXF_HI_UNI_BYTE2_t             TXF_HI_UNI_BYTE2;              /* addr: 0x0220 */
  DR_FRAMER_TXF_HI_UNI_BYTE1_t             TXF_HI_UNI_BYTE1;              /* addr: 0x0221 */
  DR_FRAMER_TXF_HI_UNI_BYTE0_t             TXF_HI_UNI_BYTE0;              /* addr: 0x0222 */
  DR_FRAMER_TXF_HI_MULTI_PKT1_t            TXF_HI_MULTI_PKT1;             /* addr: 0x0223 */
  DR_FRAMER_TXF_HI_MULTI_PKT0_t            TXF_HI_MULTI_PKT0;             /* addr: 0x0224 */
  DR_FRAMER_TXF_HI_MULTI_BYTE2_t           TXF_HI_MULTI_BYTE2;            /* addr: 0x0225 */
  DR_FRAMER_TXF_HI_MULTI_BYTE1_t           TXF_HI_MULTI_BYTE1;            /* addr: 0x0226 */
  DR_FRAMER_TXF_HI_MULTI_BYTE0_t           TXF_HI_MULTI_BYTE0;            /* addr: 0x0227 */
  DR_HOST_RXH_UNI_PKT1_t                   RXH_UNI_PKT1;                  /* addr: 0x0228 */
  DR_HOST_RXH_UNI_PKT0_t                   RXH_UNI_PKT0;                  /* addr: 0x0229 */
  DR_HOST_RXH_UNI_BYTE2_t                  RXH_UNI_BYTE2;                 /* addr: 0x022a */
  DR_HOST_RXH_UNI_BYTE1_t                  RXH_UNI_BYTE1;                 /* addr: 0x022b */
  DR_HOST_RXH_UNI_BYTE0_t                  RXH_UNI_BYTE0;                 /* addr: 0x022c */
  DR_HOST_RXH_MULTI_PKT1_t                 RXH_MULTI_PKT1;                /* addr: 0x022d */
  DR_HOST_RXH_MULTI_PKT0_t                 RXH_MULTI_PKT0;                /* addr: 0x022e */
  DR_HOST_RXH_MULTI_BYTE2_t                RXH_MULTI_BYTE2;               /* addr: 0x022f */
  DR_HOST_RXH_MULTI_BYTE1_t                RXH_MULTI_BYTE1;               /* addr: 0x0230 */
  DR_HOST_RXH_MULTI_BYTE0_t                RXH_MULTI_BYTE0;               /* addr: 0x0231 */
  DR_HOST_RXH_HI_UNI_PKT1_t                RXH_HI_UNI_PKT1;               /* addr: 0x0232 */
  DR_HOST_RXH_HI_UNI_PKT0_t                RXH_HI_UNI_PKT0;               /* addr: 0x0233 */
  DR_HOST_RXH_HI_UNI_BYTE2_t               RXH_HI_UNI_BYTE2;              /* addr: 0x0234 */
  DR_HOST_RXH_HI_UNI_BYTE1_t               RXH_HI_UNI_BYTE1;              /* addr: 0x0235 */
  DR_HOST_RXH_HI_UNI_BYTE0_t               RXH_HI_UNI_BYTE0;              /* addr: 0x0236 */
  DR_HOST_RXH_HI_MULTI_PKT1_t              RXH_HI_MULTI_PKT1;             /* addr: 0x0237 */
  DR_HOST_RXH_HI_MULTI_PKT0_t              RXH_HI_MULTI_PKT0;             /* addr: 0x0238 */
  DR_HOST_RXH_HI_MULTI_BYTE2_t             RXH_HI_MULTI_BYTE2;            /* addr: 0x0239 */
  DR_HOST_RXH_HI_MULTI_BYTE1_t             RXH_HI_MULTI_BYTE1;            /* addr: 0x023a */
  DR_HOST_RXH_HI_MULTI_BYTE0_t             RXH_HI_MULTI_BYTE0;            /* addr: 0x023b */
  DR_HOST_TXH_UNI_PKT1_t                   TXH_UNI_PKT1;                  /* addr: 0x023c */
  DR_HOST_TXH_UNI_PKT0_t                   TXH_UNI_PKT0;                  /* addr: 0x023d */
  DR_HOST_TXH_UNI_BYTE2_t                  TXH_UNI_BYTE2;                 /* addr: 0x023e */
  DR_HOST_TXH_UNI_BYTE1_t                  TXH_UNI_BYTE1;                 /* addr: 0x023f */
  DR_HOST_TXH_UNI_BYTE0_t                  TXH_UNI_BYTE0;                 /* addr: 0x0240 */
  DR_HOST_TXH_MULTI_PKT1_t                 TXH_MULTI_PKT1;                /* addr: 0x0241 */
  DR_HOST_TXH_MULTI_PKT0_t                 TXH_MULTI_PKT0;                /* addr: 0x0242 */
  DR_HOST_TXH_MULTI_BYTE2_t                TXH_MULTI_BYTE2;               /* addr: 0x0243 */
  DR_HOST_TXH_MULTI_BYTE1_t                TXH_MULTI_BYTE1;               /* addr: 0x0244 */
  DR_HOST_TXH_MULTI_BYTE0_t                TXH_MULTI_BYTE0;               /* addr: 0x0245 */
  DR_HOST_TXH_HI_UNI_PKT1_t                TXH_HI_UNI_PKT1;               /* addr: 0x0246 */
  DR_HOST_TXH_HI_UNI_PKT0_t                TXH_HI_UNI_PKT0;               /* addr: 0x0247 */
  DR_HOST_TXH_HI_UNI_BYTE2_t               TXH_HI_UNI_BYTE2;              /* addr: 0x0248 */
  DR_HOST_TXH_HI_UNI_BYTE1_t               TXH_HI_UNI_BYTE1;              /* addr: 0x0249 */
  DR_HOST_TXH_HI_UNI_BYTE0_t               TXH_HI_UNI_BYTE0;              /* addr: 0x024a */
  DR_HOST_TXH_HI_MULTI_PKT1_t              TXH_HI_MULTI_PKT1;             /* addr: 0x024b */
  DR_HOST_TXH_HI_MULTI_PKT0_t              TXH_HI_MULTI_PKT0;             /* addr: 0x024c */
  DR_HOST_TXH_HI_MULTI_BYTE2_t             TXH_HI_MULTI_BYTE2;            /* addr: 0x024d */
  DR_HOST_TXH_HI_MULTI_BYTE1_t             TXH_HI_MULTI_BYTE1;            /* addr: 0x024e */
  DR_HOST_TXH_HI_MULTI_BYTE0_t             TXH_HI_MULTI_BYTE0;            /* addr: 0x024f */
  DR_HOST_TXH_WUNI_PKT1_t                  TXH_WUNI_PKT1;                 /* addr: 0x0250 */
  DR_HOST_TXH_WUNI_PKT0_t                  TXH_WUNI_PKT0;                 /* addr: 0x0251 */
  DR_HOST_TXH_WUNI_BYTE2_t                 TXH_WUNI_BYTE2;                /* addr: 0x0252 */
  DR_HOST_TXH_WUNI_BYTE1_t                 TXH_WUNI_BYTE1;                /* addr: 0x0253 */
  DR_HOST_TXH_WUNI_BYTE0_t                 TXH_WUNI_BYTE0;                /* addr: 0x0254 */
  DR_HOST_TXH_WMULTI_PKT1_t                TXH_WMULTI_PKT1;               /* addr: 0x0255 */
  DR_HOST_TXH_WMULTI_PKT0_t                TXH_WMULTI_PKT0;               /* addr: 0x0256 */
  DR_HOST_TXH_WMULTI_BYTE2_t               TXH_WMULTI_BYTE2;              /* addr: 0x0257 */
  DR_HOST_TXH_WMULTI_BYTE1_t               TXH_WMULTI_BYTE1;              /* addr: 0x0258 */
  DR_HOST_TXH_WMULTI_BYTE0_t               TXH_WMULTI_BYTE0;              /* addr: 0x0259 */
  DR_HOST_TXH_HI_WUNI_PKT1_t               TXH_HI_WUNI_PKT1;              /* addr: 0x025a */
  DR_HOST_TXH_HI_WUNI_PKT0_t               TXH_HI_WUNI_PKT0;              /* addr: 0x025b */
  DR_HOST_TXH_HI_WUNI_BYTE2_t              TXH_HI_WUNI_BYTE2;             /* addr: 0x025c */
  DR_HOST_TXH_HI_WUNI_BYTE1_t              TXH_HI_WUNI_BYTE1;             /* addr: 0x025d */
  DR_HOST_TXH_HI_WUNI_BYTE0_t              TXH_HI_WUNI_BYTE0;             /* addr: 0x025e */
  DR_HOST_TXH_HI_WMULTI_PKT1_t             TXH_HI_WMULTI_PKT1;            /* addr: 0x025f */
  DR_HOST_TXH_HI_WMULTI_PKT0_t             TXH_HI_WMULTI_PKT0;            /* addr: 0x0260 */
  DR_HOST_TXH_HI_WMULTI_BYTE2_t            TXH_HI_WMULTI_BYTE2;           /* addr: 0x0261 */
  DR_HOST_TXH_HI_WMULTI_BYTE1_t            TXH_HI_WMULTI_BYTE1;           /* addr: 0x0262 */
  DR_HOST_TXH_HI_WMULTI_BYTE0_t            TXH_HI_WMULTI_BYTE0;           /* addr: 0x0263 */
  DR_SRPF_TB_HI_PKT1_t                     TB_HI_PKT1;                    /* addr: 0x0264 */
  DR_SRPF_TB_HI_PKT0_t                     TB_HI_PKT0;                    /* addr: 0x0265 */
  DR_SRPF_TB_HI_BYTE2_t                    TB_HI_BYTE2;                   /* addr: 0x0266 */
  DR_SRPF_TB_HI_BYTE1_t                    TB_HI_BYTE1;                   /* addr: 0x0267 */
  DR_SRPF_TB_HI_BYTE0_t                    TB_HI_BYTE0;                   /* addr: 0x0268 */
  DR_SRPF_TB_LO_PKT1_t                     TB_LO_PKT1;                    /* addr: 0x0269 */
  DR_SRPF_TB_LO_PKT0_t                     TB_LO_PKT0;                    /* addr: 0x026a */
  DR_SRPF_TB_LO_BYTE2_t                    TB_LO_BYTE2;                   /* addr: 0x026b */
  DR_SRPF_TB_LO_BYTE1_t                    TB_LO_BYTE1;                   /* addr: 0x026c */
  DR_SRPF_TB_LO_BYTE0_t                    TB_LO_BYTE0;                   /* addr: 0x026d */
  DR_SRPF_TB_UNI_PKT1_t                    TB_UNI_PKT1;                   /* addr: 0x026e */
  DR_SRPF_TB_UNI_PKT0_t                    TB_UNI_PKT0;                   /* addr: 0x026f */
  DR_SRPF_TB_UNI_BYTE2_t                   TB_UNI_BYTE2;                  /* addr: 0x0270 */
  DR_SRPF_TB_UNI_BYTE1_t                   TB_UNI_BYTE1;                  /* addr: 0x0271 */
  DR_SRPF_TB_UNI_BYTE0_t                   TB_UNI_BYTE0;                  /* addr: 0x0272 */
  DR_SRPF_TB_MULTI_PKT1_t                  TB_MULTI_PKT1;                 /* addr: 0x0273 */
  DR_SRPF_TB_MULTI_PKT0_t                  TB_MULTI_PKT0;                 /* addr: 0x0274 */
  DR_SRPF_TB_MULTI_BYTE2_t                 TB_MULTI_BYTE2;                /* addr: 0x0275 */
  DR_SRPF_TB_MULTI_BYTE1_t                 TB_MULTI_BYTE1;                /* addr: 0x0276 */
  DR_SRPF_TB_MULTI_BYTE0_t                 TB_MULTI_BYTE0;                /* addr: 0x0277 */
  DR_MATE_TOM_WE_PKT1_t                    TOM_WE_PKT1;                   /* addr: 0x0278 */
  DR_MATE_TOM_WE_PKT0_t                    TOM_WE_PKT0;                   /* addr: 0x0279 */
  DR_MATE_TOM_WE_BYTE2_t                   TOM_WE_BYTE2;                  /* addr: 0x027a */
  DR_MATE_TOM_WE_BYTE1_t                   TOM_WE_BYTE1;                  /* addr: 0x027b */
  DR_MATE_TOM_WE_BYTE0_t                   TOM_WE_BYTE0;                  /* addr: 0x027c */
  DR_MATE_TOM_SETWS_PKT1_t                 TOM_SETWS_PKT1;                /* addr: 0x027d */
  DR_MATE_TOM_SETWS_PKT0_t                 TOM_SETWS_PKT0;                /* addr: 0x027e */
  cs_uint16                                rsrvd19;
  DR_HOST_RXH_HI_RES_UNI_PKT1_t            RXH_HI_RES_UNI_PKT1;           /* addr: 0x0280 */
  DR_HOST_RXH_HI_RES_UNI_PKT0_t            RXH_HI_RES_UNI_PKT0;           /* addr: 0x0281 */
  DR_HOST_RXH_HI_RES_UNI_BYTE2_t           RXH_HI_RES_UNI_BYTE2;          /* addr: 0x0282 */
  DR_HOST_RXH_HI_RES_UNI_BYTE1_t           RXH_HI_RES_UNI_BYTE1;          /* addr: 0x0283 */
  DR_HOST_RXH_HI_RES_UNI_BYTE0_t           RXH_HI_RES_UNI_BYTE0;          /* addr: 0x0284 */
  DR_HOST_RXH_MED_CIR_UNI_PKT1_t           RXH_MED_CIR_UNI_PKT1;          /* addr: 0x0285 */
  DR_HOST_RXH_MED_CIR_UNI_PKT0_t           RXH_MED_CIR_UNI_PKT0;          /* addr: 0x0286 */
  DR_HOST_RXH_MED_CIR_UNI_BYTE2_t          RXH_MED_CIR_UNI_BYTE2;         /* addr: 0x0287 */
  DR_HOST_RXH_MED_CIR_UNI_BYTE1_t          RXH_MED_CIR_UNI_BYTE1;         /* addr: 0x0288 */
  DR_HOST_RXH_MED_CIR_UNI_BYTE0_t          RXH_MED_CIR_UNI_BYTE0;         /* addr: 0x0289 */
  DR_HOST_RXH_MED_EIR_UNI_PKT1_t           RXH_MED_EIR_UNI_PKT1;          /* addr: 0x028a */
  DR_HOST_RXH_MED_EIR_UNI_PKT0_t           RXH_MED_EIR_UNI_PKT0;          /* addr: 0x028b */
  DR_HOST_RXH_MED_EIR_UNI_BYTE2_t          RXH_MED_EIR_UNI_BYTE2;         /* addr: 0x028c */
  DR_HOST_RXH_MED_EIR_UNI_BYTE1_t          RXH_MED_EIR_UNI_BYTE1;         /* addr: 0x028d */
  DR_HOST_RXH_MED_EIR_UNI_BYTE0_t          RXH_MED_EIR_UNI_BYTE0;         /* addr: 0x028e */
  DR_HOST_RXH_CTRL_UNI_PKT1_t              RXH_CTRL_UNI_PKT1;             /* addr: 0x028f */
  DR_HOST_RXH_CTRL_UNI_PKT0_t              RXH_CTRL_UNI_PKT0;             /* addr: 0x0290 */
  DR_HOST_RXH_CTRL_UNI_BYTE2_t             RXH_CTRL_UNI_BYTE2;            /* addr: 0x0291 */
  DR_HOST_RXH_CTRL_UNI_BYTE1_t             RXH_CTRL_UNI_BYTE1;            /* addr: 0x0292 */
  DR_HOST_RXH_CTRL_UNI_BYTE0_t             RXH_CTRL_UNI_BYTE0;            /* addr: 0x0293 */
  DR_HOST_RXH_FAIR_UNI_PKT1_t              RXH_FAIR_UNI_PKT1;             /* addr: 0x0294 */
  DR_HOST_RXH_FAIR_UNI_PKT0_t              RXH_FAIR_UNI_PKT0;             /* addr: 0x0295 */
  DR_HOST_RXH_FAIR_UNI_BYTE2_t             RXH_FAIR_UNI_BYTE2;            /* addr: 0x0296 */
  DR_HOST_RXH_FAIR_UNI_BYTE1_t             RXH_FAIR_UNI_BYTE1;            /* addr: 0x0297 */
  DR_HOST_RXH_FAIR_UNI_BYTE0_t             RXH_FAIR_UNI_BYTE0;            /* addr: 0x0298 */
  DR_HOST_TXH_HI_RES_UNI_PKT1_t            TXH_HI_RES_UNI_PKT1;           /* addr: 0x0299 */
  DR_HOST_TXH_HI_RES_UNI_PKT0_t            TXH_HI_RES_UNI_PKT0;           /* addr: 0x029a */
  DR_HOST_TXH_HI_RES_UNI_BYTE2_t           TXH_HI_RES_UNI_BYTE2;          /* addr: 0x029b */
  DR_HOST_TXH_HI_RES_UNI_BYTE1_t           TXH_HI_RES_UNI_BYTE1;          /* addr: 0x029c */
  DR_HOST_TXH_HI_RES_UNI_BYTE0_t           TXH_HI_RES_UNI_BYTE0;          /* addr: 0x029d */
  DR_HOST_TXH_MED_CIR_UNI_PKT1_t           TXH_MED_CIR_UNI_PKT1;          /* addr: 0x029e */
  DR_HOST_TXH_MED_CIR_UNI_PKT0_t           TXH_MED_CIR_UNI_PKT0;          /* addr: 0x029f */
  DR_HOST_TXH_MED_CIR_UNI_BYTE2_t          TXH_MED_CIR_UNI_BYTE2;         /* addr: 0x02a0 */
  DR_HOST_TXH_MED_CIR_UNI_BYTE1_t          TXH_MED_CIR_UNI_BYTE1;         /* addr: 0x02a1 */
  DR_HOST_TXH_MED_CIR_UNI_BYTE0_t          TXH_MED_CIR_UNI_BYTE0;         /* addr: 0x02a2 */
  DR_HOST_TXH_MED_EIR_UNI_PKT1_t           TXH_MED_EIR_UNI_PKT1;          /* addr: 0x02a3 */
  DR_HOST_TXH_MED_EIR_UNI_PKT0_t           TXH_MED_EIR_UNI_PKT0;          /* addr: 0x02a4 */
  DR_HOST_TXH_MED_EIR_UNI_BYTE2_t          TXH_MED_EIR_UNI_BYTE2;         /* addr: 0x02a5 */
  DR_HOST_TXH_MED_EIR_UNI_BYTE1_t          TXH_MED_EIR_UNI_BYTE1;         /* addr: 0x02a6 */
  DR_HOST_TXH_MED_EIR_UNI_BYTE0_t          TXH_MED_EIR_UNI_BYTE0;         /* addr: 0x02a7 */
  DR_HOST_TXH_CTRL_UNI_PKT1_t              TXH_CTRL_UNI_PKT1;             /* addr: 0x02a8 */
  DR_HOST_TXH_CTRL_UNI_PKT0_t              TXH_CTRL_UNI_PKT0;             /* addr: 0x02a9 */
  DR_HOST_TXH_CTRL_UNI_BYTE2_t             TXH_CTRL_UNI_BYTE2;            /* addr: 0x02aa */
  DR_HOST_TXH_CTRL_UNI_BYTE1_t             TXH_CTRL_UNI_BYTE1;            /* addr: 0x02ab */
  DR_HOST_TXH_CTRL_UNI_BYTE0_t             TXH_CTRL_UNI_BYTE0;            /* addr: 0x02ac */
  DR_HOST_TXH_FAIR_UNI_PKT1_t              TXH_FAIR_UNI_PKT1;             /* addr: 0x02ad */
  DR_HOST_TXH_FAIR_UNI_PKT0_t              TXH_FAIR_UNI_PKT0;             /* addr: 0x02ae */
  DR_HOST_TXH_FAIR_UNI_BYTE2_t             TXH_FAIR_UNI_BYTE2;            /* addr: 0x02af */
  DR_HOST_TXH_FAIR_UNI_BYTE1_t             TXH_FAIR_UNI_BYTE1;            /* addr: 0x02b0 */
  DR_HOST_TXH_FAIR_UNI_BYTE0_t             TXH_FAIR_UNI_BYTE0;            /* addr: 0x02b1 */
  DR_HOST_TXH_HI_RES_WUNI_PKT1_t           TXH_HI_RES_WUNI_PKT1;          /* addr: 0x02b2 */
  DR_HOST_TXH_HI_RES_WUNI_PKT0_t           TXH_HI_RES_WUNI_PKT0;          /* addr: 0x02b3 */
  DR_HOST_TXH_HI_RES_WUNI_BYTE2_t          TXH_HI_RES_WUNI_BYTE2;         /* addr: 0x02b4 */
  DR_HOST_TXH_HI_RES_WUNI_BYTE1_t          TXH_HI_RES_WUNI_BYTE1;         /* addr: 0x02b5 */
  DR_HOST_TXH_HI_RES_WUNI_BYTE0_t          TXH_HI_RES_WUNI_BYTE0;         /* addr: 0x02b6 */
  DR_HOST_TXH_MED_CIR_WUNI_PKT1_t          TXH_MED_CIR_WUNI_PKT1;         /* addr: 0x02b7 */
  DR_HOST_TXH_MED_CIR_WUNI_PKT0_t          TXH_MED_CIR_WUNI_PKT0;         /* addr: 0x02b8 */
  DR_HOST_TXH_MED_CIR_WUNI_BYTE2_t         TXH_MED_CIR_WUNI_BYTE2;        /* addr: 0x02b9 */
  DR_HOST_TXH_MED_CIR_WUNI_BYTE1_t         TXH_MED_CIR_WUNI_BYTE1;        /* addr: 0x02ba */
  DR_HOST_TXH_MED_CIR_WUNI_BYTE0_t         TXH_MED_CIR_WUNI_BYTE0;        /* addr: 0x02bb */
  DR_HOST_TXH_MED_EIR_WUNI_PKT1_t          TXH_MED_EIR_WUNI_PKT1;         /* addr: 0x02bc */
  DR_HOST_TXH_MED_EIR_WUNI_PKT0_t          TXH_MED_EIR_WUNI_PKT0;         /* addr: 0x02bd */
  DR_HOST_TXH_MED_EIR_WUNI_BYTE2_t         TXH_MED_EIR_WUNI_BYTE2;        /* addr: 0x02be */
  DR_HOST_TXH_MED_EIR_WUNI_BYTE1_t         TXH_MED_EIR_WUNI_BYTE1;        /* addr: 0x02bf */
  DR_HOST_TXH_MED_EIR_WUNI_BYTE0_t         TXH_MED_EIR_WUNI_BYTE0;        /* addr: 0x02c0 */
  DR_HOST_TXH_CTRL_WUNI_PKT1_t             TXH_CTRL_WUNI_PKT1;            /* addr: 0x02c1 */
  DR_HOST_TXH_CTRL_WUNI_PKT0_t             TXH_CTRL_WUNI_PKT0;            /* addr: 0x02c2 */
  DR_HOST_TXH_CTRL_WUNI_BYTE2_t            TXH_CTRL_WUNI_BYTE2;           /* addr: 0x02c3 */
  DR_HOST_TXH_CTRL_WUNI_BYTE1_t            TXH_CTRL_WUNI_BYTE1;           /* addr: 0x02c4 */
  DR_HOST_TXH_CTRL_WUNI_BYTE0_t            TXH_CTRL_WUNI_BYTE0;           /* addr: 0x02c5 */
  DR_HOST_TXH_FAIR_WUNI_PKT1_t             TXH_FAIR_WUNI_PKT1;            /* addr: 0x02c6 */
  DR_HOST_TXH_FAIR_WUNI_PKT0_t             TXH_FAIR_WUNI_PKT0;            /* addr: 0x02c7 */
  DR_HOST_TXH_FAIR_WUNI_BYTE2_t            TXH_FAIR_WUNI_BYTE2;           /* addr: 0x02c8 */
  DR_HOST_TXH_FAIR_WUNI_BYTE1_t            TXH_FAIR_WUNI_BYTE1;           /* addr: 0x02c9 */
  DR_HOST_TXH_FAIR_WUNI_BYTE0_t            TXH_FAIR_WUNI_BYTE0;           /* addr: 0x02ca */
  DR_HOST_RXH_HI_RES_MULTI_PKT1_t          RXH_HI_RES_MULTI_PKT1;         /* addr: 0x02cb */
  DR_HOST_RXH_HI_RES_MULTI_PKT0_t          RXH_HI_RES_MULTI_PKT0;         /* addr: 0x02cc */
  DR_HOST_RXH_HI_RES_MULTI_BYTE2_t         RXH_HI_RES_MULTI_BYTE2;        /* addr: 0x02cd */
  DR_HOST_RXH_HI_RES_MULTI_BYTE1_t         RXH_HI_RES_MULTI_BYTE1;        /* addr: 0x02ce */
  DR_HOST_RXH_HI_RES_MULTI_BYTE0_t         RXH_HI_RES_MULTI_BYTE0;        /* addr: 0x02cf */
  DR_HOST_RXH_MED_CIR_MULTI_PKT1_t         RXH_MED_CIR_MULTI_PKT1;        /* addr: 0x02d0 */
  DR_HOST_RXH_MED_CIR_MULTI_PKT0_t         RXH_MED_CIR_MULTI_PKT0;        /* addr: 0x02d1 */
  DR_HOST_RXH_MED_CIR_MULTI_BYTE2_t        RXH_MED_CIR_MULTI_BYTE2;       /* addr: 0x02d2 */
  DR_HOST_RXH_MED_CIR_MULTI_BYTE1_t        RXH_MED_CIR_MULTI_BYTE1;       /* addr: 0x02d3 */
  DR_HOST_RXH_MED_CIR_MULTI_BYTE0_t        RXH_MED_CIR_MULTI_BYTE0;       /* addr: 0x02d4 */
  DR_HOST_RXH_MED_EIR_MULTI_PKT1_t         RXH_MED_EIR_MULTI_PKT1;        /* addr: 0x02d5 */
  DR_HOST_RXH_MED_EIR_MULTI_PKT0_t         RXH_MED_EIR_MULTI_PKT0;        /* addr: 0x02d6 */
  DR_HOST_RXH_MED_EIR_MULTI_BYTE2_t        RXH_MED_EIR_MULTI_BYTE2;       /* addr: 0x02d7 */
  DR_HOST_RXH_MED_EIR_MULTI_BYTE1_t        RXH_MED_EIR_MULTI_BYTE1;       /* addr: 0x02d8 */
  DR_HOST_RXH_MED_EIR_MULTI_BYTE0_t        RXH_MED_EIR_MULTI_BYTE0;       /* addr: 0x02d9 */
  DR_HOST_RXH_CTRL_MULTI_PKT1_t            RXH_CTRL_MULTI_PKT1;           /* addr: 0x02da */
  DR_HOST_RXH_CTRL_MULTI_PKT0_t            RXH_CTRL_MULTI_PKT0;           /* addr: 0x02db */
  DR_HOST_RXH_CTRL_MULTI_BYTE2_t           RXH_CTRL_MULTI_BYTE2;          /* addr: 0x02dc */
  DR_HOST_RXH_CTRL_MULTI_BYTE1_t           RXH_CTRL_MULTI_BYTE1;          /* addr: 0x02dd */
  DR_HOST_RXH_CTRL_MULTI_BYTE0_t           RXH_CTRL_MULTI_BYTE0;          /* addr: 0x02de */
  DR_HOST_RXH_FAIR_MULTI_PKT1_t            RXH_FAIR_MULTI_PKT1;           /* addr: 0x02df */
  DR_HOST_RXH_FAIR_MULTI_PKT0_t            RXH_FAIR_MULTI_PKT0;           /* addr: 0x02e0 */
  DR_HOST_RXH_FAIR_MULTI_BYTE2_t           RXH_FAIR_MULTI_BYTE2;          /* addr: 0x02e1 */
  DR_HOST_RXH_FAIR_MULTI_BYTE1_t           RXH_FAIR_MULTI_BYTE1;          /* addr: 0x02e2 */
  DR_HOST_RXH_FAIR_MULTI_BYTE0_t           RXH_FAIR_MULTI_BYTE0;          /* addr: 0x02e3 */
  DR_HOST_TXH_HI_RES_MULTI_PKT1_t          TXH_HI_RES_MULTI_PKT1;         /* addr: 0x02e4 */
  DR_HOST_TXH_HI_RES_MULTI_PKT0_t          TXH_HI_RES_MULTI_PKT0;         /* addr: 0x02e5 */
  DR_HOST_TXH_HI_RES_MULTI_BYTE2_t         TXH_HI_RES_MULTI_BYTE2;        /* addr: 0x02e6 */
  DR_HOST_TXH_HI_RES_MULTI_BYTE1_t         TXH_HI_RES_MULTI_BYTE1;        /* addr: 0x02e7 */
  DR_HOST_TXH_HI_RES_MULTI_BYTE0_t         TXH_HI_RES_MULTI_BYTE0;        /* addr: 0x02e8 */
  DR_HOST_TXH_MED_CIR_MULTI_PKT1_t         TXH_MED_CIR_MULTI_PKT1;        /* addr: 0x02e9 */
  DR_HOST_TXH_MED_CIR_MULTI_PKT0_t         TXH_MED_CIR_MULTI_PKT0;        /* addr: 0x02ea */
  DR_HOST_TXH_MED_CIR_MULTI_BYTE2_t        TXH_MED_CIR_MULTI_BYTE2;       /* addr: 0x02eb */
  DR_HOST_TXH_MED_CIR_MULTI_BYTE1_t        TXH_MED_CIR_MULTI_BYTE1;       /* addr: 0x02ec */
  DR_HOST_TXH_MED_CIR_MULTI_BYTE0_t        TXH_MED_CIR_MULTI_BYTE0;       /* addr: 0x02ed */
  DR_HOST_TXH_MED_EIR_MULTI_PKT1_t         TXH_MED_EIR_MULTI_PKT1;        /* addr: 0x02ee */
  DR_HOST_TXH_MED_EIR_MULTI_PKT0_t         TXH_MED_EIR_MULTI_PKT0;        /* addr: 0x02ef */
  DR_HOST_TXH_MED_EIR_MULTI_BYTE2_t        TXH_MED_EIR_MULTI_BYTE2;       /* addr: 0x02f0 */
  DR_HOST_TXH_MED_EIR_MULTI_BYTE1_t        TXH_MED_EIR_MULTI_BYTE1;       /* addr: 0x02f1 */
  DR_HOST_TXH_MED_EIR_MULTI_BYTE0_t        TXH_MED_EIR_MULTI_BYTE0;       /* addr: 0x02f2 */
  DR_HOST_TXH_CTRL_MULTI_PKT1_t            TXH_CTRL_MULTI_PKT1;           /* addr: 0x02f3 */
  DR_HOST_TXH_CTRL_MULTI_PKT0_t            TXH_CTRL_MULTI_PKT0;           /* addr: 0x02f4 */
  DR_HOST_TXH_CTRL_MULTI_BYTE2_t           TXH_CTRL_MULTI_BYTE2;          /* addr: 0x02f5 */
  DR_HOST_TXH_CTRL_MULTI_BYTE1_t           TXH_CTRL_MULTI_BYTE1;          /* addr: 0x02f6 */
  DR_HOST_TXH_CTRL_MULTI_BYTE0_t           TXH_CTRL_MULTI_BYTE0;          /* addr: 0x02f7 */
  DR_HOST_TXH_FAIR_MULTI_PKT1_t            TXH_FAIR_MULTI_PKT1;           /* addr: 0x02f8 */
  DR_HOST_TXH_FAIR_MULTI_PKT0_t            TXH_FAIR_MULTI_PKT0;           /* addr: 0x02f9 */
  DR_HOST_TXH_FAIR_MULTI_BYTE2_t           TXH_FAIR_MULTI_BYTE2;          /* addr: 0x02fa */
  DR_HOST_TXH_FAIR_MULTI_BYTE1_t           TXH_FAIR_MULTI_BYTE1;          /* addr: 0x02fb */
  DR_HOST_TXH_FAIR_MULTI_BYTE0_t           TXH_FAIR_MULTI_BYTE0;          /* addr: 0x02fc */
  DR_HOST_TXH_HI_RES_WMULTI_PKT1_t         TXH_HI_RES_WMULTI_PKT1;        /* addr: 0x02fd */
  DR_HOST_TXH_HI_RES_WMULTI_PKT0_t         TXH_HI_RES_WMULTI_PKT0;        /* addr: 0x02fe */
  DR_HOST_TXH_HI_RES_WMULTI_BYTE2_t        TXH_HI_RES_WMULTI_BYTE2;       /* addr: 0x02ff */
  DR_HOST_TXH_HI_RES_WMULTI_BYTE1_t        TXH_HI_RES_WMULTI_BYTE1;       /* addr: 0x0300 */
  DR_HOST_TXH_HI_RES_WMULTI_BYTE0_t        TXH_HI_RES_WMULTI_BYTE0;       /* addr: 0x0301 */
  DR_HOST_TXH_MED_CIR_WMULTI_PKT1_t        TXH_MED_CIR_WMULTI_PKT1;       /* addr: 0x0302 */
  DR_HOST_TXH_MED_CIR_WMULTI_PKT0_t        TXH_MED_CIR_WMULTI_PKT0;       /* addr: 0x0303 */
  DR_HOST_TXH_MED_CIR_WMULTI_BYTE2_t       TXH_MED_CIR_WMULTI_BYTE2;      /* addr: 0x0304 */
  DR_HOST_TXH_MED_CIR_WMULTI_BYTE1_t       TXH_MED_CIR_WMULTI_BYTE1;      /* addr: 0x0305 */
  DR_HOST_TXH_MED_CIR_WMULTI_BYTE0_t       TXH_MED_CIR_WMULTI_BYTE0;      /* addr: 0x0306 */
  DR_HOST_TXH_MED_EIR_WMULTI_PKT1_t        TXH_MED_EIR_WMULTI_PKT1;       /* addr: 0x0307 */
  DR_HOST_TXH_MED_EIR_WMULTI_PKT0_t        TXH_MED_EIR_WMULTI_PKT0;       /* addr: 0x0308 */
  DR_HOST_TXH_MED_EIR_WMULTI_BYTE2_t       TXH_MED_EIR_WMULTI_BYTE2;      /* addr: 0x0309 */
  DR_HOST_TXH_MED_EIR_WMULTI_BYTE1_t       TXH_MED_EIR_WMULTI_BYTE1;      /* addr: 0x030a */
  DR_HOST_TXH_MED_EIR_WMULTI_BYTE0_t       TXH_MED_EIR_WMULTI_BYTE0;      /* addr: 0x030b */
  DR_HOST_TXH_CTRL_WMULTI_PKT1_t           TXH_CTRL_WMULTI_PKT1;          /* addr: 0x030c */
  DR_HOST_TXH_CTRL_WMULTI_PKT0_t           TXH_CTRL_WMULTI_PKT0;          /* addr: 0x030d */
  DR_HOST_TXH_CTRL_WMULTI_BYTE2_t          TXH_CTRL_WMULTI_BYTE2;         /* addr: 0x030e */
  DR_HOST_TXH_CTRL_WMULTI_BYTE1_t          TXH_CTRL_WMULTI_BYTE1;         /* addr: 0x030f */
  DR_HOST_TXH_CTRL_WMULTI_BYTE0_t          TXH_CTRL_WMULTI_BYTE0;         /* addr: 0x0310 */
  DR_HOST_TXH_FAIR_WMULTI_PKT1_t           TXH_FAIR_WMULTI_PKT1;          /* addr: 0x0311 */
  DR_HOST_TXH_FAIR_WMULTI_PKT0_t           TXH_FAIR_WMULTI_PKT0;          /* addr: 0x0312 */
  DR_HOST_TXH_FAIR_WMULTI_BYTE2_t          TXH_FAIR_WMULTI_BYTE2;         /* addr: 0x0313 */
  DR_HOST_TXH_FAIR_WMULTI_BYTE1_t          TXH_FAIR_WMULTI_BYTE1;         /* addr: 0x0314 */
  DR_HOST_TXH_FAIR_WMULTI_BYTE0_t          TXH_FAIR_WMULTI_BYTE0;         /* addr: 0x0315 */
  DR_HOST_TXH_PROT_CNT_t                   TXH_PROT_CNT;                  /* addr: 0x0316 */
  DR_FRAMER_RXF_GPKT_ERR_t                 RXF_GPKT_ERR;                  /* addr: 0x0317 */
  DR_FRAMER_RXF_HI_RES_UNI_PKT1_t          RXF_HI_RES_UNI_PKT1;           /* addr: 0x0318 */
  DR_FRAMER_RXF_HI_RES_UNI_PKT0_t          RXF_HI_RES_UNI_PKT0;           /* addr: 0x0319 */
  DR_FRAMER_RXF_HI_RES_UNI_BYTE2_t         RXF_HI_RES_UNI_BYTE2;          /* addr: 0x031a */
  DR_FRAMER_RXF_HI_RES_UNI_BYTE1_t         RXF_HI_RES_UNI_BYTE1;          /* addr: 0x031b */
  DR_FRAMER_RXF_HI_RES_UNI_BYTE0_t         RXF_HI_RES_UNI_BYTE0;          /* addr: 0x031c */
  DR_FRAMER_RXF_MED_CIR_UNI_PKT1_t         RXF_MED_CIR_UNI_PKT1;          /* addr: 0x031d */
  DR_FRAMER_RXF_MED_CIR_UNI_PKT0_t         RXF_MED_CIR_UNI_PKT0;          /* addr: 0x031e */
  DR_FRAMER_RXF_MED_CIR_UNI_BYTE2_t        RXF_MED_CIR_UNI_BYTE2;         /* addr: 0x031f */
  DR_FRAMER_RXF_MED_CIR_UNI_BYTE1_t        RXF_MED_CIR_UNI_BYTE1;         /* addr: 0x0320 */
  DR_FRAMER_RXF_MED_CIR_UNI_BYTE0_t        RXF_MED_CIR_UNI_BYTE0;         /* addr: 0x0321 */
  DR_FRAMER_RXF_MED_EIR_UNI_PKT1_t         RXF_MED_EIR_UNI_PKT1;          /* addr: 0x0322 */
  DR_FRAMER_RXF_MED_EIR_UNI_PKT0_t         RXF_MED_EIR_UNI_PKT0;          /* addr: 0x0323 */
  DR_FRAMER_RXF_MED_EIR_UNI_BYTE2_t        RXF_MED_EIR_UNI_BYTE2;         /* addr: 0x0324 */
  DR_FRAMER_RXF_MED_EIR_UNI_BYTE1_t        RXF_MED_EIR_UNI_BYTE1;         /* addr: 0x0325 */
  DR_FRAMER_RXF_MED_EIR_UNI_BYTE0_t        RXF_MED_EIR_UNI_BYTE0;         /* addr: 0x0326 */
  DR_FRAMER_RXF_CTRL_UNI_PKT1_t            RXF_CTRL_UNI_PKT1;             /* addr: 0x0327 */
  DR_FRAMER_RXF_CTRL_UNI_PKT0_t            RXF_CTRL_UNI_PKT0;             /* addr: 0x0328 */
  DR_FRAMER_RXF_CTRL_UNI_BYTE2_t           RXF_CTRL_UNI_BYTE2;            /* addr: 0x0329 */
  DR_FRAMER_RXF_CTRL_UNI_BYTE1_t           RXF_CTRL_UNI_BYTE1;            /* addr: 0x032a */
  DR_FRAMER_RXF_CTRL_UNI_BYTE0_t           RXF_CTRL_UNI_BYTE0;            /* addr: 0x032b */
  DR_FRAMER_RXF_FAIR_UNI_PKT1_t            RXF_FAIR_UNI_PKT1;             /* addr: 0x032c */
  DR_FRAMER_RXF_FAIR_UNI_PKT0_t            RXF_FAIR_UNI_PKT0;             /* addr: 0x032d */
  DR_FRAMER_RXF_FAIR_UNI_BYTE2_t           RXF_FAIR_UNI_BYTE2;            /* addr: 0x032e */
  DR_FRAMER_RXF_FAIR_UNI_BYTE1_t           RXF_FAIR_UNI_BYTE1;            /* addr: 0x032f */
  DR_FRAMER_RXF_FAIR_UNI_BYTE0_t           RXF_FAIR_UNI_BYTE0;            /* addr: 0x0330 */
  DR_FRAMER_TXF_HI_RES_UNI_PKT1_t          TXF_HI_RES_UNI_PKT1;           /* addr: 0x0331 */
  DR_FRAMER_TXF_HI_RES_UNI_PKT0_t          TXF_HI_RES_UNI_PKT0;           /* addr: 0x0332 */
  DR_FRAMER_TXF_HI_RES_UNI_BYTE2_t         TXF_HI_RES_UNI_BYTE2;          /* addr: 0x0333 */
  DR_FRAMER_TXF_HI_RES_UNI_BYTE1_t         TXF_HI_RES_UNI_BYTE1;          /* addr: 0x0334 */
  DR_FRAMER_TXF_HI_RES_UNI_BYTE0_t         TXF_HI_RES_UNI_BYTE0;          /* addr: 0x0335 */
  DR_FRAMER_TXF_MED_CIR_UNI_PKT1_t         TXF_MED_CIR_UNI_PKT1;          /* addr: 0x0336 */
  DR_FRAMER_TXF_MED_CIR_UNI_PKT0_t         TXF_MED_CIR_UNI_PKT0;          /* addr: 0x0337 */
  DR_FRAMER_TXF_MED_CIR_UNI_BYTE2_t        TXF_MED_CIR_UNI_BYTE2;         /* addr: 0x0338 */
  DR_FRAMER_TXF_MED_CIR_UNI_BYTE1_t        TXF_MED_CIR_UNI_BYTE1;         /* addr: 0x0339 */
  DR_FRAMER_TXF_MED_CIR_UNI_BYTE0_t        TXF_MED_CIR_UNI_BYTE0;         /* addr: 0x033a */
  DR_FRAMER_TXF_MED_EIR_UNI_PKT1_t         TXF_MED_EIR_UNI_PKT1;          /* addr: 0x033b */
  DR_FRAMER_TXF_MED_EIR_UNI_PKT0_t         TXF_MED_EIR_UNI_PKT0;          /* addr: 0x033c */
  DR_FRAMER_TXF_MED_EIR_UNI_BYTE2_t        TXF_MED_EIR_UNI_BYTE2;         /* addr: 0x033d */
  DR_FRAMER_TXF_MED_EIR_UNI_BYTE1_t        TXF_MED_EIR_UNI_BYTE1;         /* addr: 0x033e */
  DR_FRAMER_TXF_MED_EIR_UNI_BYTE0_t        TXF_MED_EIR_UNI_BYTE0;         /* addr: 0x033f */
  DR_FRAMER_TXF_CTRL_UNI_PKT1_t            TXF_CTRL_UNI_PKT1;             /* addr: 0x0340 */
  DR_FRAMER_TXF_CTRL_UNI_PKT0_t            TXF_CTRL_UNI_PKT0;             /* addr: 0x0341 */
  DR_FRAMER_TXF_CTRL_UNI_BYTE2_t           TXF_CTRL_UNI_BYTE2;            /* addr: 0x0342 */
  DR_FRAMER_TXF_CTRL_UNI_BYTE1_t           TXF_CTRL_UNI_BYTE1;            /* addr: 0x0343 */
  DR_FRAMER_TXF_CTRL_UNI_BYTE0_t           TXF_CTRL_UNI_BYTE0;            /* addr: 0x0344 */
  DR_FRAMER_TXF_FAIR_UNI_PKT1_t            TXF_FAIR_UNI_PKT1;             /* addr: 0x0345 */
  DR_FRAMER_TXF_FAIR_UNI_PKT0_t            TXF_FAIR_UNI_PKT0;             /* addr: 0x0346 */
  DR_FRAMER_TXF_FAIR_UNI_BYTE2_t           TXF_FAIR_UNI_BYTE2;            /* addr: 0x0347 */
  DR_FRAMER_TXF_FAIR_UNI_BYTE1_t           TXF_FAIR_UNI_BYTE1;            /* addr: 0x0348 */
  DR_FRAMER_TXF_FAIR_UNI_BYTE0_t           TXF_FAIR_UNI_BYTE0;            /* addr: 0x0349 */
  DR_FRAMER_RXF_HI_RES_MULTI_PKT1_t        RXF_HI_RES_MULTI_PKT1;         /* addr: 0x034a */
  DR_FRAMER_RXF_HI_RES_MULTI_PKT0_t        RXF_HI_RES_MULTI_PKT0;         /* addr: 0x034b */
  DR_FRAMER_RXF_HI_RES_MULTI_BYTE2_t       RXF_HI_RES_MULTI_BYTE2;        /* addr: 0x034c */
  DR_FRAMER_RXF_HI_RES_MULTI_BYTE1_t       RXF_HI_RES_MULTI_BYTE1;        /* addr: 0x034d */
  DR_FRAMER_RXF_HI_RES_MULTI_BYTE0_t       RXF_HI_RES_MULTI_BYTE0;        /* addr: 0x034e */
  DR_FRAMER_RXF_MED_CIR_MULTI_PKT1_t       RXF_MED_CIR_MULTI_PKT1;        /* addr: 0x034f */
  DR_FRAMER_RXF_MED_CIR_MULTI_PKT0_t       RXF_MED_CIR_MULTI_PKT0;        /* addr: 0x0350 */
  DR_FRAMER_RXF_MED_CIR_MULTI_BYTE2_t      RXF_MED_CIR_MULTI_BYTE2;       /* addr: 0x0351 */
  DR_FRAMER_RXF_MED_CIR_MULTI_BYTE1_t      RXF_MED_CIR_MULTI_BYTE1;       /* addr: 0x0352 */
  DR_FRAMER_RXF_MED_CIR_MULTI_BYTE0_t      RXF_MED_CIR_MULTI_BYTE0;       /* addr: 0x0353 */
  DR_FRAMER_RXF_MED_EIR_MULTI_PKT1_t       RXF_MED_EIR_MULTI_PKT1;        /* addr: 0x0354 */
  DR_FRAMER_RXF_MED_EIR_MULTI_PKT0_t       RXF_MED_EIR_MULTI_PKT0;        /* addr: 0x0355 */
  DR_FRAMER_RXF_MED_EIR_MULTI_BYTE2_t      RXF_MED_EIR_MULTI_BYTE2;       /* addr: 0x0356 */
  DR_FRAMER_RXF_MED_EIR_MULTI_BYTE1_t      RXF_MED_EIR_MULTI_BYTE1;       /* addr: 0x0357 */
  DR_FRAMER_RXF_MED_EIR_MULTI_BYTE0_t      RXF_MED_EIR_MULTI_BYTE0;       /* addr: 0x0358 */
  DR_FRAMER_RXF_CTRL_MULTI_PKT1_t          RXF_CTRL_MULTI_PKT1;           /* addr: 0x0359 */
  DR_FRAMER_RXF_CTRL_MULTI_PKT0_t          RXF_CTRL_MULTI_PKT0;           /* addr: 0x035a */
  DR_FRAMER_RXF_CTRL_MULTI_BYTE2_t         RXF_CTRL_MULTI_BYTE2;          /* addr: 0x035b */
  DR_FRAMER_RXF_CTRL_MULTI_BYTE1_t         RXF_CTRL_MULTI_BYTE1;          /* addr: 0x035c */
  DR_FRAMER_RXF_CTRL_MULTI_BYTE0_t         RXF_CTRL_MULTI_BYTE0;          /* addr: 0x035d */
  DR_FRAMER_RXF_FAIR_MULTI_PKT1_t          RXF_FAIR_MULTI_PKT1;           /* addr: 0x035e */
  DR_FRAMER_RXF_FAIR_MULTI_PKT0_t          RXF_FAIR_MULTI_PKT0;           /* addr: 0x035f */
  DR_FRAMER_RXF_FAIR_MULTI_BYTE2_t         RXF_FAIR_MULTI_BYTE2;          /* addr: 0x0360 */
  DR_FRAMER_RXF_FAIR_MULTI_BYTE1_t         RXF_FAIR_MULTI_BYTE1;          /* addr: 0x0361 */
  DR_FRAMER_RXF_FAIR_MULTI_BYTE0_t         RXF_FAIR_MULTI_BYTE0;          /* addr: 0x0362 */
  DR_FRAMER_TXF_HI_RES_MULTI_PKT1_t        TXF_HI_RES_MULTI_PKT1;         /* addr: 0x0363 */
  DR_FRAMER_TXF_HI_RES_MULTI_PKT0_t        TXF_HI_RES_MULTI_PKT0;         /* addr: 0x0364 */
  DR_FRAMER_TXF_HI_RES_MULTI_BYTE2_t       TXF_HI_RES_MULTI_BYTE2;        /* addr: 0x0365 */
  DR_FRAMER_TXF_HI_RES_MULTI_BYTE1_t       TXF_HI_RES_MULTI_BYTE1;        /* addr: 0x0366 */
  DR_FRAMER_TXF_HI_RES_MULTI_BYTE0_t       TXF_HI_RES_MULTI_BYTE0;        /* addr: 0x0367 */
  DR_FRAMER_TXF_MED_CIR_MULTI_PKT1_t       TXF_MED_CIR_MULTI_PKT1;        /* addr: 0x0368 */
  DR_FRAMER_TXF_MED_CIR_MULTI_PKT0_t       TXF_MED_CIR_MULTI_PKT0;        /* addr: 0x0369 */
  DR_FRAMER_TXF_MED_CIR_MULTI_BYTE2_t      TXF_MED_CIR_MULTI_BYTE2;       /* addr: 0x036a */
  DR_FRAMER_TXF_MED_CIR_MULTI_BYTE1_t      TXF_MED_CIR_MULTI_BYTE1;       /* addr: 0x036b */
  DR_FRAMER_TXF_MED_CIR_MULTI_BYTE0_t      TXF_MED_CIR_MULTI_BYTE0;       /* addr: 0x036c */
  DR_FRAMER_TXF_MED_EIR_MULTI_PKT1_t       TXF_MED_EIR_MULTI_PKT1;        /* addr: 0x036d */
  DR_FRAMER_TXF_MED_EIR_MULTI_PKT0_t       TXF_MED_EIR_MULTI_PKT0;        /* addr: 0x036e */
  DR_FRAMER_TXF_MED_EIR_MULTI_BYTE2_t      TXF_MED_EIR_MULTI_BYTE2;       /* addr: 0x036f */
  DR_FRAMER_TXF_MED_EIR_MULTI_BYTE1_t      TXF_MED_EIR_MULTI_BYTE1;       /* addr: 0x0370 */
  DR_FRAMER_TXF_MED_EIR_MULTI_BYTE0_t      TXF_MED_EIR_MULTI_BYTE0;       /* addr: 0x0371 */
  DR_FRAMER_TXF_CTRL_MULTI_PKT1_t          TXF_CTRL_MULTI_PKT1;           /* addr: 0x0372 */
  DR_FRAMER_TXF_CTRL_MULTI_PKT0_t          TXF_CTRL_MULTI_PKT0;           /* addr: 0x0373 */
  DR_FRAMER_TXF_CTRL_MULTI_BYTE2_t         TXF_CTRL_MULTI_BYTE2;          /* addr: 0x0374 */
  DR_FRAMER_TXF_CTRL_MULTI_BYTE1_t         TXF_CTRL_MULTI_BYTE1;          /* addr: 0x0375 */
  DR_FRAMER_TXF_CTRL_MULTI_BYTE0_t         TXF_CTRL_MULTI_BYTE0;          /* addr: 0x0376 */
  DR_FRAMER_TXF_FAIR_MULTI_PKT1_t          TXF_FAIR_MULTI_PKT1;           /* addr: 0x0377 */
  DR_FRAMER_TXF_FAIR_MULTI_PKT0_t          TXF_FAIR_MULTI_PKT0;           /* addr: 0x0378 */
  DR_FRAMER_TXF_FAIR_MULTI_BYTE2_t         TXF_FAIR_MULTI_BYTE2;          /* addr: 0x0379 */
  DR_FRAMER_TXF_FAIR_MULTI_BYTE1_t         TXF_FAIR_MULTI_BYTE1;          /* addr: 0x037a */
  DR_FRAMER_TXF_FAIR_MULTI_BYTE0_t         TXF_FAIR_MULTI_BYTE0;          /* addr: 0x037b */
  DR_MATE_TOM_FT_PKT1_t                    TOM_FT_PKT1;                   /* addr: 0x037c */
  DR_MATE_TOM_FT_PKT0_t                    TOM_FT_PKT0;                   /* addr: 0x037d */
  DR_FRAMER_RXF_MCASTSA_PKT1_t             RXF_MCASTSA_PKT1;              /* addr: 0x037e */
  DR_FRAMER_RXF_MCASTSA_PKT0_t             RXF_MCASTSA_PKT0;              /* addr: 0x037f */
  DR_TB_TBL_KILL_PC1_t                     TBL_KILL_PC1;                  /* addr: 0x0380 */
  DR_TB_TBL_KILL_PC0_t                     TBL_KILL_PC0;                  /* addr: 0x0381 */
  DR_TB_TBL_KILL_BC2_t                     TBL_KILL_BC2;                  /* addr: 0x0382 */
  DR_TB_TBL_KILL_BC1_t                     TBL_KILL_BC1;                  /* addr: 0x0383 */
  DR_TB_TBL_KILL_BC0_t                     TBL_KILL_BC0;                  /* addr: 0x0384 */
  DR_TB_TBH_KILL_PC1_t                     TBH_KILL_PC1;                  /* addr: 0x0385 */
  DR_TB_TBH_KILL_PC0_t                     TBH_KILL_PC0;                  /* addr: 0x0386 */
  DR_TB_TBH_KILL_BC2_t                     TBH_KILL_BC2;                  /* addr: 0x0387 */
  DR_TB_TBH_KILL_BC1_t                     TBH_KILL_BC1;                  /* addr: 0x0388 */
  DR_TB_TBH_KILL_BC0_t                     TBH_KILL_BC0;                  /* addr: 0x0389 */
  DR_TB_TINL_KILL_PC1_t                    TINL_KILL_PC1;                 /* addr: 0x038a */
  DR_TB_TINL_KILL_PC0_t                    TINL_KILL_PC0;                 /* addr: 0x038b */
  DR_TB_TINL_KILL_BC2_t                    TINL_KILL_BC2;                 /* addr: 0x038c */
  DR_TB_TINL_KILL_BC1_t                    TINL_KILL_BC1;                 /* addr: 0x038d */
  DR_TB_TINL_KILL_BC0_t                    TINL_KILL_BC0;                 /* addr: 0x038e */
  DR_TB_TINH_KILL_PC1_t                    TINH_KILL_PC1;                 /* addr: 0x038f */
  DR_TB_TINH_KILL_PC0_t                    TINH_KILL_PC0;                 /* addr: 0x0390 */
  DR_TB_TINH_KILL_BC2_t                    TINH_KILL_BC2;                 /* addr: 0x0391 */
  DR_TB_TINH_KILL_BC1_t                    TINH_KILL_BC1;                 /* addr: 0x0392 */
  DR_TB_TINH_KILL_BC0_t                    TINH_KILL_BC0;                 /* addr: 0x0393 */
  DR_MATE_TOM_WS_PKT1_t                    TOM_WS_PKT1;                   /* addr: 0x0394 */
  DR_MATE_TOM_WS_PKT0_t                    TOM_WS_PKT0;                   /* addr: 0x0395 */
  DR_MATE_TOM_WS_BYTE2_t                   TOM_WS_BYTE2;                  /* addr: 0x0396 */
  DR_MATE_TOM_WS_BYTE1_t                   TOM_WS_BYTE1;                  /* addr: 0x0397 */
  DR_MATE_TOM_WS_BYTE0_t                   TOM_WS_BYTE0;                  /* addr: 0x0398 */
  DR_FRAMER_RXF_DELETED_PKT1_t             RXF_DELETED_PKT1;              /* addr: 0x0399 */
  DR_FRAMER_RXF_DELETED_PKT0_t             RXF_DELETED_PKT0;              /* addr: 0x039a */
  DR_FRAMER_RXF_DELETED_BYTE2_t            RXF_DELETED_BYTE2;             /* addr: 0x039b */
  DR_FRAMER_RXF_DELETED_BYTE1_t            RXF_DELETED_BYTE1;             /* addr: 0x039c */
  DR_FRAMER_RXF_DELETED_BYTE0_t            RXF_DELETED_BYTE0;             /* addr: 0x039d */
  DR_FRAMER_RXF_BAD_PKT1_t                 RXF_BAD_PKT1;                  /* addr: 0x039e */
  DR_FRAMER_RXF_BAD_PKT0_t                 RXF_BAD_PKT0;                  /* addr: 0x039f */
  DR_FRAMER_RXF_BAD_BYTE2_t                RXF_BAD_BYTE2;                 /* addr: 0x03a0 */
  DR_FRAMER_RXF_BAD_BYTE1_t                RXF_BAD_BYTE1;                 /* addr: 0x03a1 */
  DR_FRAMER_RXF_BAD_BYTE0_t                RXF_BAD_BYTE0;                 /* addr: 0x03a2 */
  DR_FRAMER_RXF_FLOOD_PKT1_t               RXF_FLOOD_PKT1;                /* addr: 0x03a3 */
  DR_FRAMER_RXF_FLOOD_PKT0_t               RXF_FLOOD_PKT0;                /* addr: 0x03a4 */
  DR_FRAMER_RXF_FLOOD_BYTE2_t              RXF_FLOOD_BYTE2;               /* addr: 0x03a5 */
  DR_FRAMER_RXF_FLOOD_BYTE1_t              RXF_FLOOD_BYTE1;               /* addr: 0x03a6 */
  DR_FRAMER_RXF_FLOOD_BYTE0_t              RXF_FLOOD_BYTE0;               /* addr: 0x03a7 */
  DR_FRAMER_RXF_NOFLOOD_PKT1_t             RXF_NOFLOOD_PKT1;              /* addr: 0x03a8 */
  DR_FRAMER_RXF_NOFLOOD_PKT0_t             RXF_NOFLOOD_PKT0;              /* addr: 0x03a9 */
  DR_FRAMER_RXF_NOFLOOD_BYTE2_t            RXF_NOFLOOD_BYTE2;             /* addr: 0x03aa */
  DR_FRAMER_RXF_NOFLOOD_BYTE1_t            RXF_NOFLOOD_BYTE1;             /* addr: 0x03ab */
  DR_FRAMER_RXF_NOFLOOD_BYTE0_t            RXF_NOFLOOD_BYTE0;             /* addr: 0x03ac */
  DR_FRAMER_RXF_IDLE_PKT1_t                RXF_IDLE_PKT1;                 /* addr: 0x03ad */
  DR_FRAMER_RXF_IDLE_PKT0_t                RXF_IDLE_PKT0;                 /* addr: 0x03ae */
  DR_FRAMER_RXF_IDLE_BYTE2_t               RXF_IDLE_BYTE2;                /* addr: 0x03af */
  DR_FRAMER_RXF_IDLE_BYTE1_t               RXF_IDLE_BYTE1;                /* addr: 0x03b0 */
  DR_FRAMER_RXF_IDLE_BYTE0_t               RXF_IDLE_BYTE0;                /* addr: 0x03b1 */
  DR_FRAMER_TXF_BAD_PKT1_t                 TXF_BAD_PKT1;                  /* addr: 0x03b2 */
  DR_FRAMER_TXF_BAD_PKT0_t                 TXF_BAD_PKT0;                  /* addr: 0x03b3 */
  DR_FRAMER_TXF_BAD_BYTE2_t                TXF_BAD_BYTE2;                 /* addr: 0x03b4 */
  DR_FRAMER_TXF_BAD_BYTE1_t                TXF_BAD_BYTE1;                 /* addr: 0x03b5 */
  DR_FRAMER_TXF_BAD_BYTE0_t                TXF_BAD_BYTE0;                 /* addr: 0x03b6 */
  DR_FRAMER_TXF_FLOOD_PKT1_t               TXF_FLOOD_PKT1;                /* addr: 0x03b7 */
  DR_FRAMER_TXF_FLOOD_PKT0_t               TXF_FLOOD_PKT0;                /* addr: 0x03b8 */
  DR_FRAMER_TXF_FLOOD_BYTE2_t              TXF_FLOOD_BYTE2;               /* addr: 0x03b9 */
  DR_FRAMER_TXF_FLOOD_BYTE1_t              TXF_FLOOD_BYTE1;               /* addr: 0x03ba */
  DR_FRAMER_TXF_FLOOD_BYTE0_t              TXF_FLOOD_BYTE0;               /* addr: 0x03bb */
  DR_FRAMER_TXF_NOFLOOD_PKT1_t             TXF_NOFLOOD_PKT1;              /* addr: 0x03bc */
  DR_FRAMER_TXF_NOFLOOD_PKT0_t             TXF_NOFLOOD_PKT0;              /* addr: 0x03bd */
  DR_FRAMER_TXF_NOFLOOD_BYTE2_t            TXF_NOFLOOD_BYTE2;             /* addr: 0x03be */
  DR_FRAMER_TXF_NOFLOOD_BYTE1_t            TXF_NOFLOOD_BYTE1;             /* addr: 0x03bf */
  DR_FRAMER_TXF_NOFLOOD_BYTE0_t            TXF_NOFLOOD_BYTE0;             /* addr: 0x03c0 */
  DR_FRAMER_TXF_IDLE_PKT1_t                TXF_IDLE_PKT1;                 /* addr: 0x03c1 */
  DR_FRAMER_TXF_IDLE_PKT0_t                TXF_IDLE_PKT0;                 /* addr: 0x03c2 */
  DR_FRAMER_TXF_IDLE_BYTE2_t               TXF_IDLE_BYTE2;                /* addr: 0x03c3 */
  DR_FRAMER_TXF_IDLE_BYTE1_t               TXF_IDLE_BYTE1;                /* addr: 0x03c4 */
  DR_FRAMER_TXF_IDLE_BYTE0_t               TXF_IDLE_BYTE0;                /* addr: 0x03c5 */
  cs_uint16                                rsrvd20[42];
  DR_SRPF_IDLE0_t                          IDLE0;                         /* addr: 0x03f0 */
  DR_SRPF_IDLE1_t                          IDLE1;                         /* addr: 0x03f1 */
  DR_SRPF_IDLE2_t                          IDLE2;                         /* addr: 0x03f2 */
  DR_SRPF_IDLE3_t                          IDLE3;                         /* addr: 0x03f3 */
  DR_SRPF_IDLE4_t                          IDLE4;                         /* addr: 0x03f4 */
  DR_SRPF_IDLE5_t                          IDLE5;                         /* addr: 0x03f5 */
  DR_SRPF_IDLE6_t                          IDLE6;                         /* addr: 0x03f6 */
  DR_SRPF_IDLE7_t                          IDLE7;                         /* addr: 0x03f7 */
  DR_SRPF_IDLE8_t                          IDLE8;                         /* addr: 0x03f8 */
  DR_SRPF_IDLE9_t                          IDLE9;                         /* addr: 0x03f9 */
  DR_SRPF_IDLE10_t                         IDLE10;                        /* addr: 0x03fa */
  DR_SRPF_IDLE11_t                         IDLE11;                        /* addr: 0x03fb */
  DR_SRPF_IDLE12_t                         IDLE12;                        /* addr: 0x03fc */
  DR_SRPF_IDLE13_t                         IDLE13;                        /* addr: 0x03fd */
  DR_SRPF_IDLE14_t                         IDLE14;                        /* addr: 0x03fe */
  DR_SRPF_IDLE15_t                         IDLE15;                        /* addr: 0x03ff */
} RingMAC_t;

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * SPI4P2::spi4p2
 */

#define SPI4P2_STATUS                            0x18000
#define SPI4P2_STATUS_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  2 ;
    cs_uint16 SPI4P2RXSTATE        :  2 ; /* bits 13:12 */
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 SPI4P2TXSTATE        :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 INTRPT               :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 INTRPT               :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 SPI4P2TXSTATE        :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 SPI4P2RXSTATE        :  2 ; /* bits 13:12 */
    cs_uint16 rsrvd4               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_STATUS_t;
#define     SPI4P2RXSTATE_INIT                            0x00
#define     SPI4P2RXSTATE_OUT_OF_SYNC                     0x01
#define     SPI4P2RXSTATE_SYNC                            0x02
#define     SPI4P2RXSTATE_reserved                        0x03
#define     SPI4P2TXSTATE_INIT                            0x00
#define     SPI4P2TXSTATE_OUT_OF_SYNC                     0x01
#define     SPI4P2TXSTATE_SYNC                            0x02
#define     SPI4P2TXSTATE_reserved                        0x03

#define SPI4P2_CONTROL                           0x18001
#define SPI4P2_CONTROL_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RPR_BACKPRESSURE_EN  :  1 ; /* bits 14:14 */
    cs_uint16 TXATMCELLENABLE      :  4 ; /* bits 13:10 */
    cs_uint16 RXATMCELLENABLE      :  4 ; /* bits 9:6 */
    cs_uint16 RXDISABLEFILTER      :  1 ; /* bits 5:5 */
    cs_uint16 TXDISABLEFILTER      :  1 ; /* bits 4:4 */
    cs_uint16 RXSYNRESET           :  1 ; /* bits 3:3 */
    cs_uint16 TXSYNRESET           :  1 ; /* bits 2:2 */
    cs_uint16 INTRPTEN             :  1 ; /* bits 1:1 */
    cs_uint16 RESET                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RESET                :  1 ; /* bits 0:0 */
    cs_uint16 INTRPTEN             :  1 ; /* bits 1:1 */
    cs_uint16 TXSYNRESET           :  1 ; /* bits 2:2 */
    cs_uint16 RXSYNRESET           :  1 ; /* bits 3:3 */
    cs_uint16 TXDISABLEFILTER      :  1 ; /* bits 4:4 */
    cs_uint16 RXDISABLEFILTER      :  1 ; /* bits 5:5 */
    cs_uint16 RXATMCELLENABLE      :  4 ; /* bits 9:6 */
    cs_uint16 TXATMCELLENABLE      :  4 ; /* bits 13:10 */
    cs_uint16 RPR_BACKPRESSURE_EN  :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_CONTROL_t;

#define SPI4P2_SCRATCH                           0x18002
#define SPI4P2_SCRATCH_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SCRATCH              : 14 ; /* bits 15:2 */
    cs_uint16 DIP4ERR_ABORT_ALL_PKT_DISABLE :  1 ; /* bits 1:1 */
    cs_uint16 GIANT_PKT_FLTR_DISABLE :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 GIANT_PKT_FLTR_DISABLE :  1 ; /* bits 0:0 */
    cs_uint16 DIP4ERR_ABORT_ALL_PKT_DISABLE :  1 ; /* bits 1:1 */
    cs_uint16 SCRATCH              : 14 ; /* bits 15:2 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_SCRATCH_t;

#define SPI4P2_NUMDIP2ERR                        0x18010
#define SPI4P2_NUMDIP2ERR_dft                    0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 VALUE                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_NUMDIP2ERR_t;

#define SPI4P2_NUMDIP2MATCH                      0x18011
#define SPI4P2_NUMDIP2MATCH_dft                  0x0004
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 VALUE                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_NUMDIP2MATCH_t;

#define SPI4P2_STATLVDS                          0x18012
#define SPI4P2_STATLVDS_dft                      0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 SEL                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SEL                  :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_STATLVDS_t;

#define SPI4P2_ALPHA                             0x18013
#define SPI4P2_ALPHA_dft                         0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 NUM                  :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NUM                  :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_ALPHA_t;

#define SPI4P2_DATAMAXT                          0x18014
#define SPI4P2_DATAMAXT_dft                      0x03ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_DATAMAXT_t;

#define SPI4P2_RXCAL                             0x18015
#define SPI4P2_RXCAL_dft                         0x3210
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  2 ;
    cs_uint16 ENT3                 :  2 ; /* bits 13:12 */
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 ENT2                 :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 ENT1                 :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 ENT0                 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ENT0                 :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 ENT1                 :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 ENT2                 :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 ENT3                 :  2 ; /* bits 13:12 */
    cs_uint16 rsrvd4               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCAL_t;

#define SPI4P2_RXCAL_M                           0x18016
#define SPI4P2_RXCAL_M_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCAL_M_t;

#define SPI4P2_RXCAL_LEN                         0x18017
#define SPI4P2_RXCAL_LEN_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 VALUE                :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCAL_LEN_t;

#define SPI4P2_BURSTSIZE                         0x18018
#define SPI4P2_BURSTSIZE_dft                     0x0003
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 VALUE                :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BURSTSIZE_t;

#define SPI4P2_MAXBURST1                         0x18019
#define SPI4P2_MAXBURST1_dft                     0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 VALUE                :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_MAXBURST1_t;

#define SPI4P2_MAXBURST2                         0x1801a
#define SPI4P2_MAXBURST2_dft                     0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 VALUE                :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_MAXBURST2_t;

#define SPI4P2_RXFIFOALMOSTFULL                  0x1801b
#define SPI4P2_RXFIFOALMOSTFULL_dft              0x0030
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 VALUE                :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  7 ; /* bits 6:0 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOALMOSTFULL_t;

#define SPI4P2_RXFIFOALMOSTEMPTY                 0x1801c
#define SPI4P2_RXFIFOALMOSTEMPTY_dft             0x0004
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 VALUE                :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  7 ; /* bits 6:0 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOALMOSTEMPTY_t;

#define SPI4P2_DIP4ERRCTRL                       0x1801d
#define SPI4P2_DIP4ERRCTRL_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 CONTERR              :  1 ; /* bits 1:1 */
    cs_uint16 SNGLERR              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SNGLERR              :  1 ; /* bits 0:0 */
    cs_uint16 CONTERR              :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_DIP4ERRCTRL_t;

#define SPI4P2_RXINTRPTS                         0x18020
#define SPI4P2_RXINTRPTS_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  4 ;
    cs_uint16 RXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 RXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 RXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 RXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 RXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 RXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 RXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DIP2ERR              :  1 ; /* bits 1:1 */
    cs_uint16 RXLOSYN              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXLOSYN              :  1 ; /* bits 0:0 */
    cs_uint16 DIP2ERR              :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 RXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 RXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 RXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 RXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 RXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 RXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd3               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXINTRPTS_t;

#define SPI4P2_RXINTRPTEN                        0x18021
#define SPI4P2_RXINTRPTEN_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  4 ;
    cs_uint16 RXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 RXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 RXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 RXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 RXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 RXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 RXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DIP2ERR              :  1 ; /* bits 1:1 */
    cs_uint16 RXLOSYN              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXLOSYN              :  1 ; /* bits 0:0 */
    cs_uint16 DIP2ERR              :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 RXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 RXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 RXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 RXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 RXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 RXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd3               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXINTRPTEN_t;

#define SPI4P2_RXLOSCNT                          0x18022
#define SPI4P2_RXLOSCNT_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXLOSCNT_t;

#define SPI4P2_DIP2ERRCNT                        0x18023
#define SPI4P2_DIP2ERRCNT_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_DIP2ERRCNT_t;

#define SPI4P2_RXFIFOOVFLWCNT0                   0x18024
#define SPI4P2_RXFIFOOVFLWCNT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOOVFLWCNT0_t;

#define SPI4P2_RXFIFOOVFLWCNT1                   0x18025
#define SPI4P2_RXFIFOOVFLWCNT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOOVFLWCNT1_t;

#define SPI4P2_RXFIFOOVFLWCNT2                   0x18026
#define SPI4P2_RXFIFOOVFLWCNT2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOOVFLWCNT2_t;

#define SPI4P2_RXFIFOOVFLWCNT3                   0x18027
#define SPI4P2_RXFIFOOVFLWCNT3_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOOVFLWCNT3_t;

#define SPI4P2_RXADDRERRCNT                      0x18028
#define SPI4P2_RXADDRERRCNT_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXADDRERRCNT_t;

#define SPI4P2_NUMDIP4ERR                        0x18030
#define SPI4P2_NUMDIP4ERR_dft                    0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 VALUE                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_NUMDIP4ERR_t;

#define SPI4P2_NUMDIP4MATCH                      0x18031
#define SPI4P2_NUMDIP4MATCH_dft                  0x0c80
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_NUMDIP4MATCH_t;

#define SPI4P2_DYNALIGN                          0x18032
#define SPI4P2_DYNALIGN_dft                      0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 ENABLE               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ENABLE               :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_DYNALIGN_t;

#define SPI4P2_TXCAL                             0x18033
#define SPI4P2_TXCAL_dft                         0x3210
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  2 ;
    cs_uint16 ENT3                 :  2 ; /* bits 13:12 */
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 ENT2                 :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 ENT1                 :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 ENT0                 :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ENT0                 :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 ENT1                 :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 ENT2                 :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 ENT3                 :  2 ; /* bits 13:12 */
    cs_uint16 rsrvd4               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCAL_t;

#define SPI4P2_TXCAL_M                           0x18034
#define SPI4P2_TXCAL_M_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 NUM                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NUM                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCAL_M_t;

#define SPI4P2_TXCAL_LEN                         0x18035
#define SPI4P2_TXCAL_LEN_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 VALUE                :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCAL_LEN_t;

#define SPI4P2_TXCAL_BURST                       0x18036
#define SPI4P2_TXCAL_BURST_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCAL_BURST_t;

#define SPI4P2_TXCH_MODE                         0x18037
#define SPI4P2_TXCH_MODE_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 VALUE                :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH_MODE_t;
#define     VALUE_mode_onech                              0x00
#define     VALUE_mode_stfwd                              0x01
#define     VALUE_mode_oc48                               0x02
#define     VALUE_mode_stops                              0x03

#define SPI4P2_TXCH_THRESHLO                     0x18038
#define SPI4P2_TXCH_THRESHLO_dft                 0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH_THRESHLO_t;

#define SPI4P2_TXFIFOALMOSTFULL                  0x18039
#define SPI4P2_TXFIFOALMOSTFULL_dft              0x0400
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOALMOSTFULL_t;

#define SPI4P2_TXFIFOALMOSTEMPTY                 0x1803a
#define SPI4P2_TXFIFOALMOSTEMPTY_dft             0x0200
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 12 ; /* bits 11:0 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOALMOSTEMPTY_t;

#define SPI4P2_TXSTOPDISABLE                     0x1803b
#define SPI4P2_TXSTOPDISABLE_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 TXRCTL_DISABLE       :  1 ; /* bits 3:3 */
    cs_uint16 TXRHI_DISABLE        :  1 ; /* bits 2:2 */
    cs_uint16 TXRMED_DISABLE       :  1 ; /* bits 1:1 */
    cs_uint16 TXRLO_DISABLE        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXRLO_DISABLE        :  1 ; /* bits 0:0 */
    cs_uint16 TXRMED_DISABLE       :  1 ; /* bits 1:1 */
    cs_uint16 TXRHI_DISABLE        :  1 ; /* bits 2:2 */
    cs_uint16 TXRCTL_DISABLE       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXSTOPDISABLE_t;

#define SPI4P2_DIP2ERRCTRL                       0x1803c
#define SPI4P2_DIP2ERRCTRL_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 CONTERR              :  1 ; /* bits 1:1 */
    cs_uint16 SNGLERR              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SNGLERR              :  1 ; /* bits 0:0 */
    cs_uint16 CONTERR              :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_DIP2ERRCTRL_t;

#define SPI4P2_TXDSKWOVERRIDEEN0                 0x18040
#define SPI4P2_TXDSKWOVERRIDEEN0_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 EN                   : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EN                   : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKWOVERRIDEEN0_t;

#define SPI4P2_TXDSKWOVERRIDEEN1                 0x18041
#define SPI4P2_TXDSKWOVERRIDEEN1_dft             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 EN                   :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 EN                   :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKWOVERRIDEEN1_t;

#define SPI4P2_TXDSKWOVERRIDE0                   0x18042
#define SPI4P2_TXDSKWOVERRIDE0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DDSK3                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK2                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK1                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK0                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DDSK0                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK1                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK2                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK3                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKWOVERRIDE0_t;

#define SPI4P2_TXDSKWOVERRIDE1                   0x18043
#define SPI4P2_TXDSKWOVERRIDE1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DDSK7                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK6                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK5                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK4                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DDSK4                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK5                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK6                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK7                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKWOVERRIDE1_t;

#define SPI4P2_TXDSKWOVERRIDE2                   0x18044
#define SPI4P2_TXDSKWOVERRIDE2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DDSK11               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK10               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK9                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK8                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DDSK8                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK9                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK10               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK11               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKWOVERRIDE2_t;

#define SPI4P2_TXDSKWOVERRIDE3                   0x18045
#define SPI4P2_TXDSKWOVERRIDE3_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DDSK15               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK14               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK13               :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK12               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DDSK12               :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DDSK13               :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DDSK14               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DDSK15               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKWOVERRIDE3_t;

#define SPI4P2_TXDSKWOVERRIDE4                   0x18046
#define SPI4P2_TXDSKWOVERRIDE4_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 CDSK0                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CDSK0                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKWOVERRIDE4_t;

#define SPI4P2_TXDSKW0                           0x18047
#define SPI4P2_TXDSKW0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DSK3                 :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK2                 :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK1                 :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK0                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DSK0                 :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK1                 :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK2                 :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK3                 :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKW0_t;

#define SPI4P2_TXDSKW1                           0x18048
#define SPI4P2_TXDSKW1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DSK7                 :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK6                 :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK5                 :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK4                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DSK4                 :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK5                 :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK6                 :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK7                 :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKW1_t;

#define SPI4P2_TXDSKW2                           0x18049
#define SPI4P2_TXDSKW2_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DSK11                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK10                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK9                 :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK8                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DSK8                 :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK9                 :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK10                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK11                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKW2_t;

#define SPI4P2_TXDSKW3                           0x1804a
#define SPI4P2_TXDSKW3_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 DSK15                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK14                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK13                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK12                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DSK12                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 DSK13                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 DSK14                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 DSK15                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKW3_t;

#define SPI4P2_TXDSKW4                           0x1804b
#define SPI4P2_TXDSKW4_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 CSK0                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CSK0                 :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDSKW4_t;

#define SPI4P2_TXINTRPTS                         0x18050
#define SPI4P2_TXINTRPTS_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 TXRSVCTRLWD          :  1 ; /* bits 8:8 */
    cs_uint16 TXSOPDISTERR         :  1 ; /* bits 7:7 */
    cs_uint16 TXMISSVLD            :  1 ; /* bits 6:6 */
    cs_uint16 TXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 TXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 TXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 TXBURSTSIZEERR       :  1 ; /* bits 2:2 */
    cs_uint16 DIP4ERR              :  1 ; /* bits 1:1 */
    cs_uint16 TXLOSYN              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXLOSYN              :  1 ; /* bits 0:0 */
    cs_uint16 DIP4ERR              :  1 ; /* bits 1:1 */
    cs_uint16 TXBURSTSIZEERR       :  1 ; /* bits 2:2 */
    cs_uint16 TXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 TXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 TXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 TXMISSVLD            :  1 ; /* bits 6:6 */
    cs_uint16 TXSOPDISTERR         :  1 ; /* bits 7:7 */
    cs_uint16 TXRSVCTRLWD          :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXINTRPTS_t;

#define SPI4P2_TXINTRPTEN                        0x18051
#define SPI4P2_TXINTRPTEN_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 TXRSVCTRLWD          :  1 ; /* bits 8:8 */
    cs_uint16 TXSOPDISTERR         :  1 ; /* bits 7:7 */
    cs_uint16 TXMISSVLD            :  1 ; /* bits 6:6 */
    cs_uint16 TXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 TXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 TXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 TXBURSTSIZEERR       :  1 ; /* bits 2:2 */
    cs_uint16 DIP4ERR              :  1 ; /* bits 1:1 */
    cs_uint16 TXLOSYN              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXLOSYN              :  1 ; /* bits 0:0 */
    cs_uint16 DIP4ERR              :  1 ; /* bits 1:1 */
    cs_uint16 TXBURSTSIZEERR       :  1 ; /* bits 2:2 */
    cs_uint16 TXADDRERR            :  1 ; /* bits 3:3 */
    cs_uint16 TXMISSEOP            :  1 ; /* bits 4:4 */
    cs_uint16 TXMISSSOP            :  1 ; /* bits 5:5 */
    cs_uint16 TXMISSVLD            :  1 ; /* bits 6:6 */
    cs_uint16 TXSOPDISTERR         :  1 ; /* bits 7:7 */
    cs_uint16 TXRSVCTRLWD          :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXINTRPTEN_t;

#define SPI4P2_TXLOSCNT                          0x18052
#define SPI4P2_TXLOSCNT_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXLOSCNT_t;

#define SPI4P2_DIP4ERRCNT                        0x18053
#define SPI4P2_DIP4ERRCNT_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_DIP4ERRCNT_t;

#define SPI4P2_TXBURSTSIZEERR                    0x18058
#define SPI4P2_TXBURSTSIZEERR_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXBURSTSIZEERR_t;

#define SPI4P2_TXMISSEOP                         0x18059
#define SPI4P2_TXMISSEOP_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXMISSEOP_t;

#define SPI4P2_TXMISSSOP                         0x1805a
#define SPI4P2_TXMISSSOP_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXMISSSOP_t;

#define SPI4P2_TXMISSVLD                         0x1805b
#define SPI4P2_TXMISSVLD_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXMISSVLD_t;

#define SPI4P2_TXSOPDISTERR                      0x1805c
#define SPI4P2_TXSOPDISTERR_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXSOPDISTERR_t;

#define SPI4P2_TXRSVCTRLWD                       0x1805d
#define SPI4P2_TXRSVCTRLWD_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXRSVCTRLWD_t;

#define SPI4P2_TXADDRERRCNT                      0x1805f
#define SPI4P2_TXADDRERRCNT_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXADDRERRCNT_t;

#define SPI4P2_TXFIFOINTRPTS                     0x18060
#define SPI4P2_TXFIFOINTRPTS_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 TXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 TXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 TXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 TXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 TXFIFOECCERR3        :  1 ; /* bits 7:7 */
    cs_uint16 TXFIFOECCERR2        :  1 ; /* bits 6:6 */
    cs_uint16 TXFIFOECCERR1        :  1 ; /* bits 5:5 */
    cs_uint16 TXFIFOECCERR0        :  1 ; /* bits 4:4 */
    cs_uint16 TXFIFOECCFIX3        :  1 ; /* bits 3:3 */
    cs_uint16 TXFIFOECCFIX2        :  1 ; /* bits 2:2 */
    cs_uint16 TXFIFOECCFIX1        :  1 ; /* bits 1:1 */
    cs_uint16 TXFIFOECCFIX0        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXFIFOECCFIX0        :  1 ; /* bits 0:0 */
    cs_uint16 TXFIFOECCFIX1        :  1 ; /* bits 1:1 */
    cs_uint16 TXFIFOECCFIX2        :  1 ; /* bits 2:2 */
    cs_uint16 TXFIFOECCFIX3        :  1 ; /* bits 3:3 */
    cs_uint16 TXFIFOECCERR0        :  1 ; /* bits 4:4 */
    cs_uint16 TXFIFOECCERR1        :  1 ; /* bits 5:5 */
    cs_uint16 TXFIFOECCERR2        :  1 ; /* bits 6:6 */
    cs_uint16 TXFIFOECCERR3        :  1 ; /* bits 7:7 */
    cs_uint16 TXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 TXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 TXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 TXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOINTRPTS_t;

#define SPI4P2_TXFIFOINTRPTEN                    0x18061
#define SPI4P2_TXFIFOINTRPTEN_dft                0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 TXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 TXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 TXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 TXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 TXFIFOECCERR3        :  1 ; /* bits 7:7 */
    cs_uint16 TXFIFOECCERR2        :  1 ; /* bits 6:6 */
    cs_uint16 TXFIFOECCERR1        :  1 ; /* bits 5:5 */
    cs_uint16 TXFIFOECCERR0        :  1 ; /* bits 4:4 */
    cs_uint16 TXFIFOECCFIX3        :  1 ; /* bits 3:3 */
    cs_uint16 TXFIFOECCFIX2        :  1 ; /* bits 2:2 */
    cs_uint16 TXFIFOECCFIX1        :  1 ; /* bits 1:1 */
    cs_uint16 TXFIFOECCFIX0        :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXFIFOECCFIX0        :  1 ; /* bits 0:0 */
    cs_uint16 TXFIFOECCFIX1        :  1 ; /* bits 1:1 */
    cs_uint16 TXFIFOECCFIX2        :  1 ; /* bits 2:2 */
    cs_uint16 TXFIFOECCFIX3        :  1 ; /* bits 3:3 */
    cs_uint16 TXFIFOECCERR0        :  1 ; /* bits 4:4 */
    cs_uint16 TXFIFOECCERR1        :  1 ; /* bits 5:5 */
    cs_uint16 TXFIFOECCERR2        :  1 ; /* bits 6:6 */
    cs_uint16 TXFIFOECCERR3        :  1 ; /* bits 7:7 */
    cs_uint16 TXFIFOOVRFLW0        :  1 ; /* bits 8:8 */
    cs_uint16 TXFIFOOVRFLW1        :  1 ; /* bits 9:9 */
    cs_uint16 TXFIFOOVRFLW2        :  1 ; /* bits 10:10 */
    cs_uint16 TXFIFOOVRFLW3        :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOINTRPTEN_t;

#define SPI4P2_TXFIFOERRCTRL                     0x18062
#define SPI4P2_TXFIFOERRCTRL_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 CONSTERR3            :  1 ; /* bits 15:15 */
    cs_uint16 INSERTERR3           :  1 ; /* bits 14:14 */
    cs_uint16 CONSTFIX3            :  1 ; /* bits 13:13 */
    cs_uint16 INSERTFIX3           :  1 ; /* bits 12:12 */
    cs_uint16 CONSTERR2            :  1 ; /* bits 11:11 */
    cs_uint16 INSERTERR2           :  1 ; /* bits 10:10 */
    cs_uint16 CONSTFIX2            :  1 ; /* bits 9:9 */
    cs_uint16 INSERTFIX2           :  1 ; /* bits 8:8 */
    cs_uint16 CONSTERR1            :  1 ; /* bits 7:7 */
    cs_uint16 INSERTERR1           :  1 ; /* bits 6:6 */
    cs_uint16 CONSTFIX1            :  1 ; /* bits 5:5 */
    cs_uint16 INSERTFIX1           :  1 ; /* bits 4:4 */
    cs_uint16 CONSTERR0            :  1 ; /* bits 3:3 */
    cs_uint16 INSERTERR0           :  1 ; /* bits 2:2 */
    cs_uint16 CONSTFIX0            :  1 ; /* bits 1:1 */
    cs_uint16 INSERTFIX0           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 INSERTFIX0           :  1 ; /* bits 0:0 */
    cs_uint16 CONSTFIX0            :  1 ; /* bits 1:1 */
    cs_uint16 INSERTERR0           :  1 ; /* bits 2:2 */
    cs_uint16 CONSTERR0            :  1 ; /* bits 3:3 */
    cs_uint16 INSERTFIX1           :  1 ; /* bits 4:4 */
    cs_uint16 CONSTFIX1            :  1 ; /* bits 5:5 */
    cs_uint16 INSERTERR1           :  1 ; /* bits 6:6 */
    cs_uint16 CONSTERR1            :  1 ; /* bits 7:7 */
    cs_uint16 INSERTFIX2           :  1 ; /* bits 8:8 */
    cs_uint16 CONSTFIX2            :  1 ; /* bits 9:9 */
    cs_uint16 INSERTERR2           :  1 ; /* bits 10:10 */
    cs_uint16 CONSTERR2            :  1 ; /* bits 11:11 */
    cs_uint16 INSERTFIX3           :  1 ; /* bits 12:12 */
    cs_uint16 CONSTFIX3            :  1 ; /* bits 13:13 */
    cs_uint16 INSERTERR3           :  1 ; /* bits 14:14 */
    cs_uint16 CONSTERR3            :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOERRCTRL_t;

#define SPI4P2_TXPARERRCTRL                      0x18063
#define SPI4P2_TXPARERRCTRL_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 CONTERR              :  1 ; /* bits 1:1 */
    cs_uint16 SNGLERR              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SNGLERR              :  1 ; /* bits 0:0 */
    cs_uint16 CONTERR              :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXPARERRCTRL_t;

#define SPI4P2_TXFIFOOVFLWCNT0                   0x18064
#define SPI4P2_TXFIFOOVFLWCNT0_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOOVFLWCNT0_t;

#define SPI4P2_TXFIFOOVFLWCNT1                   0x18065
#define SPI4P2_TXFIFOOVFLWCNT1_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOOVFLWCNT1_t;

#define SPI4P2_TXFIFOOVFLWCNT2                   0x18066
#define SPI4P2_TXFIFOOVFLWCNT2_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOOVFLWCNT2_t;

#define SPI4P2_TXFIFOOVFLWCNT3                   0x18067
#define SPI4P2_TXFIFOOVFLWCNT3_dft               0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOOVFLWCNT3_t;

#define SPI4P2_TXFIFOECCFIX0                     0x18068
#define SPI4P2_TXFIFOECCFIX0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCFIX0_t;

#define SPI4P2_TXFIFOECCFIX1                     0x18069
#define SPI4P2_TXFIFOECCFIX1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCFIX1_t;

#define SPI4P2_TXFIFOECCFIX2                     0x1806a
#define SPI4P2_TXFIFOECCFIX2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCFIX2_t;

#define SPI4P2_TXFIFOECCFIX3                     0x1806b
#define SPI4P2_TXFIFOECCFIX3_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCFIX3_t;

#define SPI4P2_TXFIFOECCERR0                     0x1806c
#define SPI4P2_TXFIFOECCERR0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCERR0_t;

#define SPI4P2_TXFIFOECCERR1                     0x1806d
#define SPI4P2_TXFIFOECCERR1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCERR1_t;

#define SPI4P2_TXFIFOECCERR2                     0x1806e
#define SPI4P2_TXFIFOECCERR2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCERR2_t;

#define SPI4P2_TXFIFOECCERR3                     0x1806f
#define SPI4P2_TXFIFOECCERR3_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFIFOECCERR3_t;

#define SPI4P2_RXPLLCONTROL1                     0x18070
#define SPI4P2_RXPLLCONTROL1_dft                 0x8010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FREQTUNE             :  4 ; /* bits 15:12 */
    cs_uint16 TCKO_EN              :  1 ; /* bits 11:11 */
    cs_uint16 TCKO_SEL             :  3 ; /* bits 10:8 */
    cs_uint16 TCKI_EN              :  1 ; /* bits 7:7 */
    cs_uint16 CHPI50UA_EN          :  1 ; /* bits 6:6 */
    cs_uint16 PWRDWN               :  1 ; /* bits 5:5 */
    cs_uint16 INT_FILTER_EN        :  1 ; /* bits 4:4 */
    cs_uint16 MULTSEL              :  2 ; /* bits 3:2 */
    cs_uint16 SPARE_REG            :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG            :  2 ; /* bits 1:0 */
    cs_uint16 MULTSEL              :  2 ; /* bits 3:2 */
    cs_uint16 INT_FILTER_EN        :  1 ; /* bits 4:4 */
    cs_uint16 PWRDWN               :  1 ; /* bits 5:5 */
    cs_uint16 CHPI50UA_EN          :  1 ; /* bits 6:6 */
    cs_uint16 TCKI_EN              :  1 ; /* bits 7:7 */
    cs_uint16 TCKO_SEL             :  3 ; /* bits 10:8 */
    cs_uint16 TCKO_EN              :  1 ; /* bits 11:11 */
    cs_uint16 FREQTUNE             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXPLLCONTROL1_t;
#define     TCKO_SEL_DIV1                                 0x00
#define     TCKO_SEL_DIV2                                 0x04
#define     TCKO_SEL_DIV4                                 0x05
#define     TCKO_SEL_DIV8                                 0x06
#define     TCKO_SEL_DIV16                                0x07
#define     CHPI50UA_EN_low                               0x00
#define     CHPI50UA_EN_high                              0x01
#define     MULTSEL_RSVD                                  0x03
#define     MULTSEL_DIV8                                  0x02
#define     MULTSEL_DIV4                                  0x01
#define     MULTSEL_DIV2                                  0x00

#define SPI4P2_RXPLLCONTROL2                     0x18071
#define SPI4P2_RXPLLCONTROL2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 CKOUT_DIV_EN         :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 FILTPN_EN            :  1 ; /* bits 1:1 */
    cs_uint16 BYPASS_LOOP_RES      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BYPASS_LOOP_RES      :  1 ; /* bits 0:0 */
    cs_uint16 FILTPN_EN            :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 CKOUT_DIV_EN         :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXPLLCONTROL2_t;
#define     CKOUT_DIV_EN_DIV16                            0x08
#define     CKOUT_DIV_EN_DIV8                             0x04
#define     CKOUT_DIV_EN_DIV4                             0x02
#define     CKOUT_DIV_EN_DIV2                             0x01
#define     CKOUT_DIV_EN_DISABLE                          0x00

#define SPI4P2_TXPLLCONTROL1                     0x18072
#define SPI4P2_TXPLLCONTROL1_dft                 0x8010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 FREQTUNE             :  4 ; /* bits 15:12 */
    cs_uint16 TCKO_EN              :  1 ; /* bits 11:11 */
    cs_uint16 TCKO_SEL             :  3 ; /* bits 10:8 */
    cs_uint16 TCKI_EN              :  1 ; /* bits 7:7 */
    cs_uint16 CHPI50UA_EN          :  1 ; /* bits 6:6 */
    cs_uint16 PWRDWN               :  1 ; /* bits 5:5 */
    cs_uint16 INT_FILTER_EN        :  1 ; /* bits 4:4 */
    cs_uint16 MULTSEL              :  2 ; /* bits 3:2 */
    cs_uint16 SPARE_REG            :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE_REG            :  2 ; /* bits 1:0 */
    cs_uint16 MULTSEL              :  2 ; /* bits 3:2 */
    cs_uint16 INT_FILTER_EN        :  1 ; /* bits 4:4 */
    cs_uint16 PWRDWN               :  1 ; /* bits 5:5 */
    cs_uint16 CHPI50UA_EN          :  1 ; /* bits 6:6 */
    cs_uint16 TCKI_EN              :  1 ; /* bits 7:7 */
    cs_uint16 TCKO_SEL             :  3 ; /* bits 10:8 */
    cs_uint16 TCKO_EN              :  1 ; /* bits 11:11 */
    cs_uint16 FREQTUNE             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXPLLCONTROL1_t;

#define SPI4P2_TXPLLCONTROL2                     0x18073
#define SPI4P2_TXPLLCONTROL2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 CKOUT_DIV_EN         :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 FILTPN_EN            :  1 ; /* bits 1:1 */
    cs_uint16 BYPASS_LOOP_RES      :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BYPASS_LOOP_RES      :  1 ; /* bits 0:0 */
    cs_uint16 FILTPN_EN            :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 CKOUT_DIV_EN         :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXPLLCONTROL2_t;

#define SPI4P2_LOOPBACKS                         0x18074
#define SPI4P2_LOOPBACKS_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 LB                   :  1 ; /* bits 2:2 */
    cs_uint16 BERTLB               :  1 ; /* bits 1:1 */
    cs_uint16 BISTMODE             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 BISTMODE             :  1 ; /* bits 0:0 */
    cs_uint16 BERTLB               :  1 ; /* bits 1:1 */
    cs_uint16 LB                   :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_LOOPBACKS_t;

#define SPI4P2_QTR_RATE                          0x18075
#define SPI4P2_QTR_RATE_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 VALUE                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_QTR_RATE_t;

#define SPI4P2_FMROSEL                           0x18076
#define SPI4P2_FMROSEL_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 VALUE                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_FMROSEL_t;
#define     VALUE_fmrobus0                                0x00
#define     VALUE_fmrobus1                                0x01
#define     VALUE_fmrobus2                                0x02
#define     VALUE_fmrobus3                                0x03
#define     VALUE_fmrobus4                                0x04
#define     VALUE_fmrobus5                                0x05
#define     VALUE_fmrobus6                                0x06
#define     VALUE_fmroclk0                                0x00
#define     VALUE_fmroclk1                                0x01
#define     VALUE_fmroclk2                                0x02
#define     VALUE_fmroclk3                                0x03
#define     VALUE_fmroclk4                                0x04
#define     VALUE_fmroclk5                                0x05
#define     VALUE_fmroclk6                                0x06
#define     VALUE_fmroclk8                                0x08
#define     VALUE_fmroclk9                                0x09
#define     VALUE_fmroclk10                               0x0a

#define SPI4P2_RXPHASEADJ1                       0x18080
#define SPI4P2_RXPHASEADJ1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 RDAT3                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT2                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT1                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT0                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RDAT0                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT1                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT2                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT3                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXPHASEADJ1_t;
#define     RDAT3_PHASE0                                  0x00
#define     RDAT3_PHASE1                                  0x01
#define     RDAT3_PHASE2                                  0x03
#define     RDAT3_PHASE3                                  0x02
#define     RDAT3_PHASE4                                  0x06
#define     RDAT3_PHASE5                                  0x07
#define     RDAT3_PHASE6                                  0x05
#define     RDAT3_PHASE7                                  0x04
#define     RDAT2_PHASE0                                  0x00
#define     RDAT2_PHASE1                                  0x01
#define     RDAT2_PHASE2                                  0x03
#define     RDAT2_PHASE3                                  0x02
#define     RDAT2_PHASE4                                  0x06
#define     RDAT2_PHASE5                                  0x07
#define     RDAT2_PHASE6                                  0x05
#define     RDAT2_PHASE7                                  0x04
#define     RDAT1_PHASE0                                  0x00
#define     RDAT1_PHASE1                                  0x01
#define     RDAT1_PHASE2                                  0x03
#define     RDAT1_PHASE3                                  0x02
#define     RDAT1_PHASE4                                  0x06
#define     RDAT1_PHASE5                                  0x07
#define     RDAT1_PHASE6                                  0x05
#define     RDAT1_PHASE7                                  0x04
#define     RDAT0_PHASE0                                  0x00
#define     RDAT0_PHASE1                                  0x01
#define     RDAT0_PHASE2                                  0x03
#define     RDAT0_PHASE3                                  0x02
#define     RDAT0_PHASE4                                  0x06
#define     RDAT0_PHASE5                                  0x07
#define     RDAT0_PHASE6                                  0x05
#define     RDAT0_PHASE7                                  0x04

#define SPI4P2_RXPHASEADJ2                       0x18081
#define SPI4P2_RXPHASEADJ2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 RDAT7                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT6                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT5                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT4                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RDAT4                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT5                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT6                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT7                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXPHASEADJ2_t;
#define     RDAT7_PHASE0                                  0x00
#define     RDAT7_PHASE1                                  0x01
#define     RDAT7_PHASE2                                  0x03
#define     RDAT7_PHASE3                                  0x02
#define     RDAT7_PHASE4                                  0x06
#define     RDAT7_PHASE5                                  0x07
#define     RDAT7_PHASE6                                  0x05
#define     RDAT7_PHASE7                                  0x04
#define     RDAT6_PHASE0                                  0x00
#define     RDAT6_PHASE1                                  0x01
#define     RDAT6_PHASE2                                  0x03
#define     RDAT6_PHASE3                                  0x02
#define     RDAT6_PHASE4                                  0x06
#define     RDAT6_PHASE5                                  0x07
#define     RDAT6_PHASE6                                  0x05
#define     RDAT6_PHASE7                                  0x04
#define     RDAT5_PHASE0                                  0x00
#define     RDAT5_PHASE1                                  0x01
#define     RDAT5_PHASE2                                  0x03
#define     RDAT5_PHASE3                                  0x02
#define     RDAT5_PHASE4                                  0x06
#define     RDAT5_PHASE5                                  0x07
#define     RDAT5_PHASE6                                  0x05
#define     RDAT5_PHASE7                                  0x04
#define     RDAT4_PHASE0                                  0x00
#define     RDAT4_PHASE1                                  0x01
#define     RDAT4_PHASE2                                  0x03
#define     RDAT4_PHASE3                                  0x02
#define     RDAT4_PHASE4                                  0x06
#define     RDAT4_PHASE5                                  0x07
#define     RDAT4_PHASE6                                  0x05
#define     RDAT4_PHASE7                                  0x04

#define SPI4P2_RXPHASEADJ3                       0x18082
#define SPI4P2_RXPHASEADJ3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 RDAT11               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT10               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT9                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT8                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RDAT8                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT9                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT10               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT11               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXPHASEADJ3_t;
#define     RDAT11_PHASE0                                 0x00
#define     RDAT11_PHASE1                                 0x01
#define     RDAT11_PHASE2                                 0x03
#define     RDAT11_PHASE3                                 0x02
#define     RDAT11_PHASE4                                 0x06
#define     RDAT11_PHASE5                                 0x07
#define     RDAT11_PHASE6                                 0x05
#define     RDAT11_PHASE7                                 0x04
#define     RDAT10_PHASE0                                 0x00
#define     RDAT10_PHASE1                                 0x01
#define     RDAT10_PHASE2                                 0x03
#define     RDAT10_PHASE3                                 0x02
#define     RDAT10_PHASE4                                 0x06
#define     RDAT10_PHASE5                                 0x07
#define     RDAT10_PHASE6                                 0x05
#define     RDAT10_PHASE7                                 0x04
#define     RDAT9_PHASE0                                  0x00
#define     RDAT9_PHASE1                                  0x01
#define     RDAT9_PHASE2                                  0x03
#define     RDAT9_PHASE3                                  0x02
#define     RDAT9_PHASE4                                  0x06
#define     RDAT9_PHASE5                                  0x07
#define     RDAT9_PHASE6                                  0x05
#define     RDAT9_PHASE7                                  0x04
#define     RDAT8_PHASE0                                  0x00
#define     RDAT8_PHASE1                                  0x01
#define     RDAT8_PHASE2                                  0x03
#define     RDAT8_PHASE3                                  0x02
#define     RDAT8_PHASE4                                  0x06
#define     RDAT8_PHASE5                                  0x07
#define     RDAT8_PHASE6                                  0x05
#define     RDAT8_PHASE7                                  0x04

#define SPI4P2_RXPHASEADJ4                       0x18083
#define SPI4P2_RXPHASEADJ4_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 RDAT15               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT14               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT13               :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT12               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RDAT12               :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDAT13               :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 RDAT14               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 RDAT15               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXPHASEADJ4_t;
#define     RDAT15_PHASE0                                 0x00
#define     RDAT15_PHASE1                                 0x01
#define     RDAT15_PHASE2                                 0x03
#define     RDAT15_PHASE3                                 0x02
#define     RDAT15_PHASE4                                 0x06
#define     RDAT15_PHASE5                                 0x07
#define     RDAT15_PHASE6                                 0x05
#define     RDAT15_PHASE7                                 0x04
#define     RDAT14_PHASE0                                 0x00
#define     RDAT14_PHASE1                                 0x01
#define     RDAT14_PHASE2                                 0x03
#define     RDAT14_PHASE3                                 0x02
#define     RDAT14_PHASE4                                 0x06
#define     RDAT14_PHASE5                                 0x07
#define     RDAT14_PHASE6                                 0x05
#define     RDAT14_PHASE7                                 0x04
#define     RDAT13_PHASE0                                 0x00
#define     RDAT13_PHASE1                                 0x01
#define     RDAT13_PHASE2                                 0x03
#define     RDAT13_PHASE3                                 0x02
#define     RDAT13_PHASE4                                 0x06
#define     RDAT13_PHASE5                                 0x07
#define     RDAT13_PHASE6                                 0x05
#define     RDAT13_PHASE7                                 0x04
#define     RDAT12_PHASE0                                 0x00
#define     RDAT12_PHASE1                                 0x01
#define     RDAT12_PHASE2                                 0x03
#define     RDAT12_PHASE3                                 0x02
#define     RDAT12_PHASE4                                 0x06
#define     RDAT12_PHASE5                                 0x07
#define     RDAT12_PHASE6                                 0x05
#define     RDAT12_PHASE7                                 0x04

#define SPI4P2_RXPHASEADJ5                       0x18084
#define SPI4P2_RXPHASEADJ5_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  9 ;
    cs_uint16 RDCLK                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RCTL                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RCTL                 :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RDCLK                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXPHASEADJ5_t;
#define     RDCLK_PHASE0                                  0x00
#define     RDCLK_PHASE1                                  0x01
#define     RDCLK_PHASE2                                  0x03
#define     RDCLK_PHASE3                                  0x02
#define     RDCLK_PHASE4                                  0x06
#define     RDCLK_PHASE5                                  0x07
#define     RDCLK_PHASE6                                  0x05
#define     RDCLK_PHASE7                                  0x04
#define     RCTL_PHASE0                                   0x00
#define     RCTL_PHASE1                                   0x01
#define     RCTL_PHASE2                                   0x03
#define     RCTL_PHASE3                                   0x02
#define     RCTL_PHASE4                                   0x06
#define     RCTL_PHASE5                                   0x07
#define     RCTL_PHASE6                                   0x05
#define     RCTL_PHASE7                                   0x04

#define SPI4P2_RXINTRPTS2                        0x1808a
#define SPI4P2_RXINTRPTS2_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 RXFIFOPERR3          :  1 ; /* bits 3:3 */
    cs_uint16 RXFIFOPERR2          :  1 ; /* bits 2:2 */
    cs_uint16 RXFIFOPERR1          :  1 ; /* bits 1:1 */
    cs_uint16 RXFIFOPERR0          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXFIFOPERR0          :  1 ; /* bits 0:0 */
    cs_uint16 RXFIFOPERR1          :  1 ; /* bits 1:1 */
    cs_uint16 RXFIFOPERR2          :  1 ; /* bits 2:2 */
    cs_uint16 RXFIFOPERR3          :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXINTRPTS2_t;

#define SPI4P2_RXINTRPTEN2                       0x1808b
#define SPI4P2_RXINTRPTEN2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 RXFIFOPERR3          :  1 ; /* bits 3:3 */
    cs_uint16 RXFIFOPERR2          :  1 ; /* bits 2:2 */
    cs_uint16 RXFIFOPERR1          :  1 ; /* bits 1:1 */
    cs_uint16 RXFIFOPERR0          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXFIFOPERR0          :  1 ; /* bits 0:0 */
    cs_uint16 RXFIFOPERR1          :  1 ; /* bits 1:1 */
    cs_uint16 RXFIFOPERR2          :  1 ; /* bits 2:2 */
    cs_uint16 RXFIFOPERR3          :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXINTRPTEN2_t;

#define SPI4P2_RXFIFOPERR0                       0x1808c
#define SPI4P2_RXFIFOPERR0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOPERR0_t;

#define SPI4P2_RXFIFOPERR1                       0x1808d
#define SPI4P2_RXFIFOPERR1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOPERR1_t;

#define SPI4P2_RXFIFOPERR2                       0x1808e
#define SPI4P2_RXFIFOPERR2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOPERR2_t;

#define SPI4P2_RXFIFOPERR3                       0x1808f
#define SPI4P2_RXFIFOPERR3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXFIFOPERR3_t;

#define SPI4P2_TXDRCTRL                          0x18090
#define SPI4P2_TXDRCTRL_dft                      0x5c01
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TXHYSTERESIS         :  4 ; /* bits 15:12 */
    cs_uint16 TXMAPSEL             :  1 ; /* bits 11:11 */
    cs_uint16 TXWDENABLE           :  1 ; /* bits 10:10 */
    cs_uint16 TXREGCONTROL         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXREGCONTROL         : 10 ; /* bits 9:0 */
    cs_uint16 TXWDENABLE           :  1 ; /* bits 10:10 */
    cs_uint16 TXMAPSEL             :  1 ; /* bits 11:11 */
    cs_uint16 TXHYSTERESIS         :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXDRCTRL_t;
#define     TXHYSTERESIS_32X                              0x00
#define     TXHYSTERESIS_17X                              0x01
#define     TXHYSTERESIS_8X                               0x02
#define     TXHYSTERESIS_4X                               0x03
#define     TXHYSTERESIS_2X                               0x04
#define     TXHYSTERESIS_1X                               0x05

#define SPI4P2_TXOVERRIDE1                       0x18091
#define SPI4P2_TXOVERRIDE1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TDAT3                :  4 ; /* bits 15:12 */
    cs_uint16 TDAT2                :  4 ; /* bits 11:8 */
    cs_uint16 TDAT1                :  4 ; /* bits 7:4 */
    cs_uint16 TDAT0                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT0                :  4 ; /* bits 3:0 */
    cs_uint16 TDAT1                :  4 ; /* bits 7:4 */
    cs_uint16 TDAT2                :  4 ; /* bits 11:8 */
    cs_uint16 TDAT3                :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXOVERRIDE1_t;

#define SPI4P2_TXOVERRIDE2                       0x18092
#define SPI4P2_TXOVERRIDE2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TDAT7                :  4 ; /* bits 15:12 */
    cs_uint16 TDAT6                :  4 ; /* bits 11:8 */
    cs_uint16 TDAT5                :  4 ; /* bits 7:4 */
    cs_uint16 TDAT4                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT4                :  4 ; /* bits 3:0 */
    cs_uint16 TDAT5                :  4 ; /* bits 7:4 */
    cs_uint16 TDAT6                :  4 ; /* bits 11:8 */
    cs_uint16 TDAT7                :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXOVERRIDE2_t;

#define SPI4P2_TXOVERRIDE3                       0x18093
#define SPI4P2_TXOVERRIDE3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TDAT11               :  4 ; /* bits 15:12 */
    cs_uint16 TDAT10               :  4 ; /* bits 11:8 */
    cs_uint16 TDAT9                :  4 ; /* bits 7:4 */
    cs_uint16 TDAT8                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT8                :  4 ; /* bits 3:0 */
    cs_uint16 TDAT9                :  4 ; /* bits 7:4 */
    cs_uint16 TDAT10               :  4 ; /* bits 11:8 */
    cs_uint16 TDAT11               :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXOVERRIDE3_t;

#define SPI4P2_TXOVERRIDE4                       0x18094
#define SPI4P2_TXOVERRIDE4_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TDAT15               :  4 ; /* bits 15:12 */
    cs_uint16 TDAT14               :  4 ; /* bits 11:8 */
    cs_uint16 TDAT13               :  4 ; /* bits 7:4 */
    cs_uint16 TDAT12               :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT12               :  4 ; /* bits 3:0 */
    cs_uint16 TDAT13               :  4 ; /* bits 7:4 */
    cs_uint16 TDAT14               :  4 ; /* bits 11:8 */
    cs_uint16 TDAT15               :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXOVERRIDE4_t;

#define SPI4P2_TXOVERRIDE5                       0x18095
#define SPI4P2_TXOVERRIDE5_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 SPAREIN              :  4 ; /* bits 7:4 */
    cs_uint16 TCTL                 :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TCTL                 :  4 ; /* bits 3:0 */
    cs_uint16 SPAREIN              :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXOVERRIDE5_t;

#define SPI4P2_TXFREEZE1                         0x18096
#define SPI4P2_TXFREEZE1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TDAT15               : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT15               : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFREEZE1_t;

#define SPI4P2_TXFREEZE2                         0x18097
#define SPI4P2_TXFREEZE2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 SPARE                :  1 ; /* bits 1:1 */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
    cs_uint16 SPARE                :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXFREEZE2_t;

#define SPI4P2_TXSPARE                           0x18098
#define SPI4P2_TXSPARE_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 SPARE                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SPARE                :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXSPARE_t;

#define SPI4P2_TXCURPHASE1                       0x1809a
#define SPI4P2_TXCURPHASE1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 TDAT3                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT2                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT1                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT0                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT0                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT1                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT2                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT3                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCURPHASE1_t;

#define SPI4P2_TXCURPHASE2                       0x1809b
#define SPI4P2_TXCURPHASE2_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 TDAT7                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT6                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT5                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT4                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT4                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT5                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT6                :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT7                :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCURPHASE2_t;

#define SPI4P2_TXCURPHASE3                       0x1809c
#define SPI4P2_TXCURPHASE3_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 TDAT11               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT10               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT9                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT8                :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT8                :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT9                :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT10               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT11               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCURPHASE3_t;

#define SPI4P2_TXCURPHASE4                       0x1809d
#define SPI4P2_TXCURPHASE4_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 TDAT15               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT14               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT13               :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT12               :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TDAT12               :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TDAT13               :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TDAT14               :  3 ; /* bits 10:8 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 TDAT15               :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd4               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCURPHASE4_t;

#define SPI4P2_TXCURPHASE5                       0x1809e
#define SPI4P2_TXCURPHASE5_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  9 ;
    cs_uint16 SPAREIN              :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TCTL                 :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TCTL                 :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SPAREIN              :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd2               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCURPHASE5_t;

#define SPI4P2_BISTSTART                         0x180a0
#define SPI4P2_BISTSTART_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 START                :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 START                :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTSTART_t;

#define SPI4P2_BISTENABLE0                       0x180a1
#define SPI4P2_BISTENABLE0_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTENABLE0_t;

#define SPI4P2_BISTENABLE1                       0x180a2
#define SPI4P2_BISTENABLE1_dft                   0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 DCLK                 :  1 ; /* bits 1:1 */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
    cs_uint16 DCLK                 :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTENABLE1_t;

#define SPI4P2_BISTDONE0                         0x180a3
#define SPI4P2_BISTDONE0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTDONE0_t;

#define SPI4P2_BISTDONE1                         0x180a4
#define SPI4P2_BISTDONE1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 DCLK                 :  1 ; /* bits 1:1 */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
    cs_uint16 DCLK                 :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTDONE1_t;

#define SPI4P2_BISTPASS0                         0x180a5
#define SPI4P2_BISTPASS0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPASS0_t;

#define SPI4P2_BISTPASS1                         0x180a6
#define SPI4P2_BISTPASS1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 SPARE                :  1 ; /* bits 1:1 */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
    cs_uint16 SPARE                :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPASS1_t;

#define SPI4P2_TXCH0_SOP_MS                      0x180b0
#define SPI4P2_TXCH0_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_SOP_MS_t;

#define SPI4P2_TXCH0_SOP_LS                      0x180b1
#define SPI4P2_TXCH0_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_SOP_LS_t;

#define SPI4P2_TXCH1_SOP_MS                      0x180b2
#define SPI4P2_TXCH1_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_SOP_MS_t;

#define SPI4P2_TXCH1_SOP_LS                      0x180b3
#define SPI4P2_TXCH1_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_SOP_LS_t;

#define SPI4P2_TXCH2_SOP_MS                      0x180b4
#define SPI4P2_TXCH2_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_SOP_MS_t;

#define SPI4P2_TXCH2_SOP_LS                      0x180b5
#define SPI4P2_TXCH2_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_SOP_LS_t;

#define SPI4P2_TXCH3_SOP_MS                      0x180b6
#define SPI4P2_TXCH3_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_SOP_MS_t;

#define SPI4P2_TXCH3_SOP_LS                      0x180b7
#define SPI4P2_TXCH3_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_SOP_LS_t;

#define SPI4P2_TXCH0_EOP_MS                      0x180b8
#define SPI4P2_TXCH0_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_EOP_MS_t;

#define SPI4P2_TXCH0_EOP_LS                      0x180b9
#define SPI4P2_TXCH0_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_EOP_LS_t;

#define SPI4P2_TXCH1_EOP_MS                      0x180ba
#define SPI4P2_TXCH1_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_EOP_MS_t;

#define SPI4P2_TXCH1_EOP_LS                      0x180bb
#define SPI4P2_TXCH1_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_EOP_LS_t;

#define SPI4P2_TXCH2_EOP_MS                      0x180bc
#define SPI4P2_TXCH2_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_EOP_MS_t;

#define SPI4P2_TXCH2_EOP_LS                      0x180bd
#define SPI4P2_TXCH2_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_EOP_LS_t;

#define SPI4P2_TXCH3_EOP_MS                      0x180be
#define SPI4P2_TXCH3_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_EOP_MS_t;

#define SPI4P2_TXCH3_EOP_LS                      0x180bf
#define SPI4P2_TXCH3_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_EOP_LS_t;

#define SPI4P2_TXCH0_ERR_MS                      0x180c0
#define SPI4P2_TXCH0_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_ERR_MS_t;

#define SPI4P2_TXCH0_ERR_LS                      0x180c1
#define SPI4P2_TXCH0_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_ERR_LS_t;

#define SPI4P2_TXCH1_ERR_MS                      0x180c2
#define SPI4P2_TXCH1_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_ERR_MS_t;

#define SPI4P2_TXCH1_ERR_LS                      0x180c3
#define SPI4P2_TXCH1_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_ERR_LS_t;

#define SPI4P2_TXCH2_ERR_MS                      0x180c4
#define SPI4P2_TXCH2_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_ERR_MS_t;

#define SPI4P2_TXCH2_ERR_LS                      0x180c5
#define SPI4P2_TXCH2_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_ERR_LS_t;

#define SPI4P2_TXCH3_ERR_MS                      0x180c6
#define SPI4P2_TXCH3_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_ERR_MS_t;

#define SPI4P2_TXCH3_ERR_LS                      0x180c7
#define SPI4P2_TXCH3_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_ERR_LS_t;

#define SPI4P2_TXCH0_BYTE_C2                     0x180c8
#define SPI4P2_TXCH0_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_BYTE_C2_t;

#define SPI4P2_TXCH0_BYTE_C1                     0x180c9
#define SPI4P2_TXCH0_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_BYTE_C1_t;

#define SPI4P2_TXCH0_BYTE_C0                     0x180ca
#define SPI4P2_TXCH0_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH0_BYTE_C0_t;

#define SPI4P2_TXCH1_BYTE_C2                     0x180cb
#define SPI4P2_TXCH1_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_BYTE_C2_t;

#define SPI4P2_TXCH1_BYTE_C1                     0x180cc
#define SPI4P2_TXCH1_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_BYTE_C1_t;

#define SPI4P2_TXCH1_BYTE_C0                     0x180cd
#define SPI4P2_TXCH1_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH1_BYTE_C0_t;

#define SPI4P2_RXCH0_SOP_MS                      0x180d0
#define SPI4P2_RXCH0_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_SOP_MS_t;

#define SPI4P2_RXCH0_SOP_LS                      0x180d1
#define SPI4P2_RXCH0_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_SOP_LS_t;

#define SPI4P2_RXCH1_SOP_MS                      0x180d2
#define SPI4P2_RXCH1_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_SOP_MS_t;

#define SPI4P2_RXCH1_SOP_LS                      0x180d3
#define SPI4P2_RXCH1_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_SOP_LS_t;

#define SPI4P2_RXCH2_SOP_MS                      0x180d4
#define SPI4P2_RXCH2_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_SOP_MS_t;

#define SPI4P2_RXCH2_SOP_LS                      0x180d5
#define SPI4P2_RXCH2_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_SOP_LS_t;

#define SPI4P2_RXCH3_SOP_MS                      0x180d6
#define SPI4P2_RXCH3_SOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_SOP_MS_t;

#define SPI4P2_RXCH3_SOP_LS                      0x180d7
#define SPI4P2_RXCH3_SOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_SOP_LS_t;

#define SPI4P2_RXCH0_EOP_MS                      0x180d8
#define SPI4P2_RXCH0_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_EOP_MS_t;

#define SPI4P2_RXCH0_EOP_LS                      0x180d9
#define SPI4P2_RXCH0_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_EOP_LS_t;

#define SPI4P2_RXCH1_EOP_MS                      0x180da
#define SPI4P2_RXCH1_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_EOP_MS_t;

#define SPI4P2_RXCH1_EOP_LS                      0x180db
#define SPI4P2_RXCH1_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_EOP_LS_t;

#define SPI4P2_RXCH2_EOP_MS                      0x180dc
#define SPI4P2_RXCH2_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_EOP_MS_t;

#define SPI4P2_RXCH2_EOP_LS                      0x180dd
#define SPI4P2_RXCH2_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_EOP_LS_t;

#define SPI4P2_RXCH3_EOP_MS                      0x180de
#define SPI4P2_RXCH3_EOP_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_EOP_MS_t;

#define SPI4P2_RXCH3_EOP_LS                      0x180df
#define SPI4P2_RXCH3_EOP_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_EOP_LS_t;

#define SPI4P2_RXCH0_ERR_MS                      0x180e0
#define SPI4P2_RXCH0_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_ERR_MS_t;

#define SPI4P2_RXCH0_ERR_LS                      0x180e1
#define SPI4P2_RXCH0_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_ERR_LS_t;

#define SPI4P2_RXCH1_ERR_MS                      0x180e2
#define SPI4P2_RXCH1_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_ERR_MS_t;

#define SPI4P2_RXCH1_ERR_LS                      0x180e3
#define SPI4P2_RXCH1_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_ERR_LS_t;

#define SPI4P2_RXCH2_ERR_MS                      0x180e4
#define SPI4P2_RXCH2_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_ERR_MS_t;

#define SPI4P2_RXCH2_ERR_LS                      0x180e5
#define SPI4P2_RXCH2_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_ERR_LS_t;

#define SPI4P2_RXCH3_ERR_MS                      0x180e6
#define SPI4P2_RXCH3_ERR_MS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_ERR_MS_t;

#define SPI4P2_RXCH3_ERR_LS                      0x180e7
#define SPI4P2_RXCH3_ERR_LS_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_ERR_LS_t;

#define SPI4P2_RXCH0_BYTE_C2                     0x180e8
#define SPI4P2_RXCH0_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_BYTE_C2_t;

#define SPI4P2_RXCH0_BYTE_C1                     0x180e9
#define SPI4P2_RXCH0_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_BYTE_C1_t;

#define SPI4P2_RXCH0_BYTE_C0                     0x180ea
#define SPI4P2_RXCH0_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH0_BYTE_C0_t;

#define SPI4P2_RXCH1_BYTE_C2                     0x180eb
#define SPI4P2_RXCH1_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_BYTE_C2_t;

#define SPI4P2_RXCH1_BYTE_C1                     0x180ec
#define SPI4P2_RXCH1_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_BYTE_C1_t;

#define SPI4P2_RXCH1_BYTE_C0                     0x180ed
#define SPI4P2_RXCH1_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH1_BYTE_C0_t;

#define SPI4P2_RXCH2_BYTE_C2                     0x180ee
#define SPI4P2_RXCH2_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_BYTE_C2_t;

#define SPI4P2_RXCH2_BYTE_C1                     0x180ef
#define SPI4P2_RXCH2_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_BYTE_C1_t;

#define SPI4P2_RXCH2_BYTE_C0                     0x180f0
#define SPI4P2_RXCH2_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH2_BYTE_C0_t;

#define SPI4P2_RXCH3_BYTE_C2                     0x180f1
#define SPI4P2_RXCH3_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_BYTE_C2_t;

#define SPI4P2_RXCH3_BYTE_C1                     0x180f2
#define SPI4P2_RXCH3_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_BYTE_C1_t;

#define SPI4P2_RXCH3_BYTE_C0                     0x180f3
#define SPI4P2_RXCH3_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_RXCH3_BYTE_C0_t;

#define SPI4P2_BISTPHASEOVERRIDE0                0x18100
#define SPI4P2_BISTPHASEOVERRIDE0_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 DAT                  : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPHASEOVERRIDE0_t;

#define SPI4P2_BISTPHASEOVERRIDE1                0x18101
#define SPI4P2_BISTPHASEOVERRIDE1_dft            0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 DCLK                 :  1 ; /* bits 1:1 */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 CTL                  :  1 ; /* bits 0:0 */
    cs_uint16 DCLK                 :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPHASEOVERRIDE1_t;

#define SPI4P2_BISTTESTTIME                      0x18102
#define SPI4P2_BISTTESTTIME_dft                  0xf000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TESTTIME             : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TESTTIME             : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTTESTTIME_t;

#define SPI4P2_BISTSETTLETIME                    0x18103
#define SPI4P2_BISTSETTLETIME_dft                0x0200
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SETTLETIME           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SETTLETIME           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTSETTLETIME_t;

#define SPI4P2_BISTPATTERN0                      0x18104
#define SPI4P2_BISTPATTERN0_dft                  0xb5a0
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPATTERN0_t;

#define SPI4P2_BISTPATTERN1                      0x18105
#define SPI4P2_BISTPATTERN1_dft                  0xfd37
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPATTERN1_t;

#define SPI4P2_BISTPATTERN2                      0x18106
#define SPI4P2_BISTPATTERN2_dft                  0x8264
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPATTERN2_t;

#define SPI4P2_BISTPATTERN3                      0x18107
#define SPI4P2_BISTPATTERN3_dft                  0xded6
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPATTERN3_t;

#define SPI4P2_BISTPATTERN4                      0x18108
#define SPI4P2_BISTPATTERN4_dft                  0x93f4
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPATTERN4_t;

#define SPI4P2_BISTPATTERN5                      0x18109
#define SPI4P2_BISTPATTERN5_dft                  0x5a09
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PATTERN              : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTPATTERN5_t;

#define SPI4P2_BISTERROR0                        0x1810a
#define SPI4P2_BISTERROR0_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ERROR2               :  5 ; /* bits 14:10 */
    cs_uint16 ERROR1               :  5 ; /* bits 9:5 */
    cs_uint16 ERROR0               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERROR0               :  5 ; /* bits 4:0 */
    cs_uint16 ERROR1               :  5 ; /* bits 9:5 */
    cs_uint16 ERROR2               :  5 ; /* bits 14:10 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTERROR0_t;

#define SPI4P2_BISTERROR1                        0x1810b
#define SPI4P2_BISTERROR1_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ERROR5               :  5 ; /* bits 14:10 */
    cs_uint16 ERROR4               :  5 ; /* bits 9:5 */
    cs_uint16 ERROR3               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERROR3               :  5 ; /* bits 4:0 */
    cs_uint16 ERROR4               :  5 ; /* bits 9:5 */
    cs_uint16 ERROR5               :  5 ; /* bits 14:10 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTERROR1_t;

#define SPI4P2_BISTERROR2                        0x1810c
#define SPI4P2_BISTERROR2_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ERROR8               :  5 ; /* bits 14:10 */
    cs_uint16 ERROR7               :  5 ; /* bits 9:5 */
    cs_uint16 ERROR6               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERROR6               :  5 ; /* bits 4:0 */
    cs_uint16 ERROR7               :  5 ; /* bits 9:5 */
    cs_uint16 ERROR8               :  5 ; /* bits 14:10 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTERROR2_t;

#define SPI4P2_BISTERROR3                        0x1810d
#define SPI4P2_BISTERROR3_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ERROR11              :  5 ; /* bits 14:10 */
    cs_uint16 ERROR10              :  5 ; /* bits 9:5 */
    cs_uint16 ERROR9               :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERROR9               :  5 ; /* bits 4:0 */
    cs_uint16 ERROR10              :  5 ; /* bits 9:5 */
    cs_uint16 ERROR11              :  5 ; /* bits 14:10 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTERROR3_t;

#define SPI4P2_BISTERROR4                        0x1810e
#define SPI4P2_BISTERROR4_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ERROR14              :  5 ; /* bits 14:10 */
    cs_uint16 ERROR13              :  5 ; /* bits 9:5 */
    cs_uint16 ERROR12              :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERROR12              :  5 ; /* bits 4:0 */
    cs_uint16 ERROR13              :  5 ; /* bits 9:5 */
    cs_uint16 ERROR14              :  5 ; /* bits 14:10 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTERROR4_t;

#define SPI4P2_BISTERROR5                        0x1810f
#define SPI4P2_BISTERROR5_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ERROR17              :  5 ; /* bits 14:10 */
    cs_uint16 ERROR16              :  5 ; /* bits 9:5 */
    cs_uint16 ERROR15              :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERROR15              :  5 ; /* bits 4:0 */
    cs_uint16 ERROR16              :  5 ; /* bits 9:5 */
    cs_uint16 ERROR17              :  5 ; /* bits 14:10 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_BISTERROR5_t;

#define SPI4P2_TXCH2_BYTE_C2                     0x18110
#define SPI4P2_TXCH2_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_BYTE_C2_t;

#define SPI4P2_TXCH2_BYTE_C1                     0x18111
#define SPI4P2_TXCH2_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_BYTE_C1_t;

#define SPI4P2_TXCH2_BYTE_C0                     0x18112
#define SPI4P2_TXCH2_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH2_BYTE_C0_t;

#define SPI4P2_TXCH3_BYTE_C2                     0x18113
#define SPI4P2_TXCH3_BYTE_C2_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_BYTE_C2_t;

#define SPI4P2_TXCH3_BYTE_C1                     0x18114
#define SPI4P2_TXCH3_BYTE_C1_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_BYTE_C1_t;

#define SPI4P2_TXCH3_BYTE_C0                     0x18115
#define SPI4P2_TXCH3_BYTE_C0_dft                 0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 COUNT                : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} SPI4P2_TXCH3_BYTE_C0_t;


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* SPI4P2 */

typedef struct {
  SPI4P2_STATUS_t                          STATUS;                        /* addr: 0x0000 */
  SPI4P2_CONTROL_t                         CONTROL;                       /* addr: 0x0001 */
  SPI4P2_SCRATCH_t                         SCRATCH;                       /* addr: 0x0002 */
  cs_uint16                                rsrvd1[13];
  SPI4P2_NUMDIP2ERR_t                      NUMDIP2ERR;                    /* addr: 0x0010 */
  SPI4P2_NUMDIP2MATCH_t                    NUMDIP2MATCH;                  /* addr: 0x0011 */
  SPI4P2_STATLVDS_t                        STATLVDS;                      /* addr: 0x0012 */
  SPI4P2_ALPHA_t                           ALPHA;                         /* addr: 0x0013 */
  SPI4P2_DATAMAXT_t                        DATAMAXT;                      /* addr: 0x0014 */
  SPI4P2_RXCAL_t                           RXCAL;                         /* addr: 0x0015 */
  SPI4P2_RXCAL_M_t                         RXCAL_M;                       /* addr: 0x0016 */
  SPI4P2_RXCAL_LEN_t                       RXCAL_LEN;                     /* addr: 0x0017 */
  SPI4P2_BURSTSIZE_t                       BURSTSIZE;                     /* addr: 0x0018 */
  SPI4P2_MAXBURST1_t                       MAXBURST1;                     /* addr: 0x0019 */
  SPI4P2_MAXBURST2_t                       MAXBURST2;                     /* addr: 0x001a */
  SPI4P2_RXFIFOALMOSTFULL_t                RXFIFOALMOSTFULL;              /* addr: 0x001b */
  SPI4P2_RXFIFOALMOSTEMPTY_t               RXFIFOALMOSTEMPTY;             /* addr: 0x001c */
  SPI4P2_DIP4ERRCTRL_t                     DIP4ERRCTRL;                   /* addr: 0x001d */
  cs_uint16                                rsrvd2[2];
  SPI4P2_RXINTRPTS_t                       RXINTRPTS;                     /* addr: 0x0020 */
  SPI4P2_RXINTRPTEN_t                      RXINTRPTEN;                    /* addr: 0x0021 */
  SPI4P2_RXLOSCNT_t                        RXLOSCNT;                      /* addr: 0x0022 */
  SPI4P2_DIP2ERRCNT_t                      DIP2ERRCNT;                    /* addr: 0x0023 */
  SPI4P2_RXFIFOOVFLWCNT0_t                 RXFIFOOVFLWCNT0;               /* addr: 0x0024 */
  SPI4P2_RXFIFOOVFLWCNT1_t                 RXFIFOOVFLWCNT1;               /* addr: 0x0025 */
  SPI4P2_RXFIFOOVFLWCNT2_t                 RXFIFOOVFLWCNT2;               /* addr: 0x0026 */
  SPI4P2_RXFIFOOVFLWCNT3_t                 RXFIFOOVFLWCNT3;               /* addr: 0x0027 */
  SPI4P2_RXADDRERRCNT_t                    RXADDRERRCNT;                  /* addr: 0x0028 */
  cs_uint16                                rsrvd3[7];
  SPI4P2_NUMDIP4ERR_t                      NUMDIP4ERR;                    /* addr: 0x0030 */
  SPI4P2_NUMDIP4MATCH_t                    NUMDIP4MATCH;                  /* addr: 0x0031 */
  SPI4P2_DYNALIGN_t                        DYNALIGN;                      /* addr: 0x0032 */
  SPI4P2_TXCAL_t                           TXCAL;                         /* addr: 0x0033 */
  SPI4P2_TXCAL_M_t                         TXCAL_M;                       /* addr: 0x0034 */
  SPI4P2_TXCAL_LEN_t                       TXCAL_LEN;                     /* addr: 0x0035 */
  SPI4P2_TXCAL_BURST_t                     TXCAL_BURST;                   /* addr: 0x0036 */
  SPI4P2_TXCH_MODE_t                       TXCH_MODE;                     /* addr: 0x0037 */
  SPI4P2_TXCH_THRESHLO_t                   TXCH_THRESHLO;                 /* addr: 0x0038 */
  SPI4P2_TXFIFOALMOSTFULL_t                TXFIFOALMOSTFULL;              /* addr: 0x0039 */
  SPI4P2_TXFIFOALMOSTEMPTY_t               TXFIFOALMOSTEMPTY;             /* addr: 0x003a */
  SPI4P2_TXSTOPDISABLE_t                   TXSTOPDISABLE;                 /* addr: 0x003b */
  SPI4P2_DIP2ERRCTRL_t                     DIP2ERRCTRL;                   /* addr: 0x003c */
  cs_uint16                                rsrvd4[3];
  SPI4P2_TXDSKWOVERRIDEEN0_t               TXDSKWOVERRIDEEN0;             /* addr: 0x0040 */
  SPI4P2_TXDSKWOVERRIDEEN1_t               TXDSKWOVERRIDEEN1;             /* addr: 0x0041 */
  SPI4P2_TXDSKWOVERRIDE0_t                 TXDSKWOVERRIDE0;               /* addr: 0x0042 */
  SPI4P2_TXDSKWOVERRIDE1_t                 TXDSKWOVERRIDE1;               /* addr: 0x0043 */
  SPI4P2_TXDSKWOVERRIDE2_t                 TXDSKWOVERRIDE2;               /* addr: 0x0044 */
  SPI4P2_TXDSKWOVERRIDE3_t                 TXDSKWOVERRIDE3;               /* addr: 0x0045 */
  SPI4P2_TXDSKWOVERRIDE4_t                 TXDSKWOVERRIDE4;               /* addr: 0x0046 */
  SPI4P2_TXDSKW0_t                         TXDSKW0;                       /* addr: 0x0047 */
  SPI4P2_TXDSKW1_t                         TXDSKW1;                       /* addr: 0x0048 */
  SPI4P2_TXDSKW2_t                         TXDSKW2;                       /* addr: 0x0049 */
  SPI4P2_TXDSKW3_t                         TXDSKW3;                       /* addr: 0x004a */
  SPI4P2_TXDSKW4_t                         TXDSKW4;                       /* addr: 0x004b */
  cs_uint16                                rsrvd5[4];
  SPI4P2_TXINTRPTS_t                       TXINTRPTS;                     /* addr: 0x0050 */
  SPI4P2_TXINTRPTEN_t                      TXINTRPTEN;                    /* addr: 0x0051 */
  SPI4P2_TXLOSCNT_t                        TXLOSCNT;                      /* addr: 0x0052 */
  SPI4P2_DIP4ERRCNT_t                      DIP4ERRCNT;                    /* addr: 0x0053 */
  cs_uint16                                rsrvd6[4];
  SPI4P2_TXBURSTSIZEERR_t                  TXBURSTSIZEERR;                /* addr: 0x0058 */
  SPI4P2_TXMISSEOP_t                       TXMISSEOP;                     /* addr: 0x0059 */
  SPI4P2_TXMISSSOP_t                       TXMISSSOP;                     /* addr: 0x005a */
  SPI4P2_TXMISSVLD_t                       TXMISSVLD;                     /* addr: 0x005b */
  SPI4P2_TXSOPDISTERR_t                    TXSOPDISTERR;                  /* addr: 0x005c */
  SPI4P2_TXRSVCTRLWD_t                     TXRSVCTRLWD;                   /* addr: 0x005d */
  cs_uint16                                rsrvd7;
  SPI4P2_TXADDRERRCNT_t                    TXADDRERRCNT;                  /* addr: 0x005f */
  SPI4P2_TXFIFOINTRPTS_t                   TXFIFOINTRPTS;                 /* addr: 0x0060 */
  SPI4P2_TXFIFOINTRPTEN_t                  TXFIFOINTRPTEN;                /* addr: 0x0061 */
  SPI4P2_TXFIFOERRCTRL_t                   TXFIFOERRCTRL;                 /* addr: 0x0062 */
  SPI4P2_TXPARERRCTRL_t                    TXPARERRCTRL;                  /* addr: 0x0063 */
  SPI4P2_TXFIFOOVFLWCNT0_t                 TXFIFOOVFLWCNT0;               /* addr: 0x0064 */
  SPI4P2_TXFIFOOVFLWCNT1_t                 TXFIFOOVFLWCNT1;               /* addr: 0x0065 */
  SPI4P2_TXFIFOOVFLWCNT2_t                 TXFIFOOVFLWCNT2;               /* addr: 0x0066 */
  SPI4P2_TXFIFOOVFLWCNT3_t                 TXFIFOOVFLWCNT3;               /* addr: 0x0067 */
  SPI4P2_TXFIFOECCFIX0_t                   TXFIFOECCFIX0;                 /* addr: 0x0068 */
  SPI4P2_TXFIFOECCFIX1_t                   TXFIFOECCFIX1;                 /* addr: 0x0069 */
  SPI4P2_TXFIFOECCFIX2_t                   TXFIFOECCFIX2;                 /* addr: 0x006a */
  SPI4P2_TXFIFOECCFIX3_t                   TXFIFOECCFIX3;                 /* addr: 0x006b */
  SPI4P2_TXFIFOECCERR0_t                   TXFIFOECCERR0;                 /* addr: 0x006c */
  SPI4P2_TXFIFOECCERR1_t                   TXFIFOECCERR1;                 /* addr: 0x006d */
  SPI4P2_TXFIFOECCERR2_t                   TXFIFOECCERR2;                 /* addr: 0x006e */
  SPI4P2_TXFIFOECCERR3_t                   TXFIFOECCERR3;                 /* addr: 0x006f */
  SPI4P2_RXPLLCONTROL1_t                   RXPLLCONTROL1;                 /* addr: 0x0070 */
  SPI4P2_RXPLLCONTROL2_t                   RXPLLCONTROL2;                 /* addr: 0x0071 */
  SPI4P2_TXPLLCONTROL1_t                   TXPLLCONTROL1;                 /* addr: 0x0072 */
  SPI4P2_TXPLLCONTROL2_t                   TXPLLCONTROL2;                 /* addr: 0x0073 */
  SPI4P2_LOOPBACKS_t                       LOOPBACKS;                     /* addr: 0x0074 */
  SPI4P2_QTR_RATE_t                        QTR_RATE;                      /* addr: 0x0075 */
  SPI4P2_FMROSEL_t                         FMROSEL;                       /* addr: 0x0076 */
  cs_uint16                                rsrvd8[9];
  SPI4P2_RXPHASEADJ1_t                     RXPHASEADJ1;                   /* addr: 0x0080 */
  SPI4P2_RXPHASEADJ2_t                     RXPHASEADJ2;                   /* addr: 0x0081 */
  SPI4P2_RXPHASEADJ3_t                     RXPHASEADJ3;                   /* addr: 0x0082 */
  SPI4P2_RXPHASEADJ4_t                     RXPHASEADJ4;                   /* addr: 0x0083 */
  SPI4P2_RXPHASEADJ5_t                     RXPHASEADJ5;                   /* addr: 0x0084 */
  cs_uint16                                rsrvd9[5];
  SPI4P2_RXINTRPTS2_t                      RXINTRPTS2;                    /* addr: 0x008a */
  SPI4P2_RXINTRPTEN2_t                     RXINTRPTEN2;                   /* addr: 0x008b */
  SPI4P2_RXFIFOPERR0_t                     RXFIFOPERR0;                   /* addr: 0x008c */
  SPI4P2_RXFIFOPERR1_t                     RXFIFOPERR1;                   /* addr: 0x008d */
  SPI4P2_RXFIFOPERR2_t                     RXFIFOPERR2;                   /* addr: 0x008e */
  SPI4P2_RXFIFOPERR3_t                     RXFIFOPERR3;                   /* addr: 0x008f */
  SPI4P2_TXDRCTRL_t                        TXDRCTRL;                      /* addr: 0x0090 */
  SPI4P2_TXOVERRIDE1_t                     TXOVERRIDE1;                   /* addr: 0x0091 */
  SPI4P2_TXOVERRIDE2_t                     TXOVERRIDE2;                   /* addr: 0x0092 */
  SPI4P2_TXOVERRIDE3_t                     TXOVERRIDE3;                   /* addr: 0x0093 */
  SPI4P2_TXOVERRIDE4_t                     TXOVERRIDE4;                   /* addr: 0x0094 */
  SPI4P2_TXOVERRIDE5_t                     TXOVERRIDE5;                   /* addr: 0x0095 */
  SPI4P2_TXFREEZE1_t                       TXFREEZE1;                     /* addr: 0x0096 */
  SPI4P2_TXFREEZE2_t                       TXFREEZE2;                     /* addr: 0x0097 */
  SPI4P2_TXSPARE_t                         TXSPARE;                       /* addr: 0x0098 */
  cs_uint16                                rsrvd10;
  SPI4P2_TXCURPHASE1_t                     TXCURPHASE1;                   /* addr: 0x009a */
  SPI4P2_TXCURPHASE2_t                     TXCURPHASE2;                   /* addr: 0x009b */
  SPI4P2_TXCURPHASE3_t                     TXCURPHASE3;                   /* addr: 0x009c */
  SPI4P2_TXCURPHASE4_t                     TXCURPHASE4;                   /* addr: 0x009d */
  SPI4P2_TXCURPHASE5_t                     TXCURPHASE5;                   /* addr: 0x009e */
  cs_uint16                                rsrvd11;
  SPI4P2_BISTSTART_t                       BISTSTART;                     /* addr: 0x00a0 */
  SPI4P2_BISTENABLE0_t                     BISTENABLE0;                   /* addr: 0x00a1 */
  SPI4P2_BISTENABLE1_t                     BISTENABLE1;                   /* addr: 0x00a2 */
  SPI4P2_BISTDONE0_t                       BISTDONE0;                     /* addr: 0x00a3 */
  SPI4P2_BISTDONE1_t                       BISTDONE1;                     /* addr: 0x00a4 */
  SPI4P2_BISTPASS0_t                       BISTPASS0;                     /* addr: 0x00a5 */
  SPI4P2_BISTPASS1_t                       BISTPASS1;                     /* addr: 0x00a6 */
  cs_uint16                                rsrvd12[9];
  SPI4P2_TXCH0_SOP_MS_t                    TXCH0_SOP_MS;                  /* addr: 0x00b0 */
  SPI4P2_TXCH0_SOP_LS_t                    TXCH0_SOP_LS;                  /* addr: 0x00b1 */
  SPI4P2_TXCH1_SOP_MS_t                    TXCH1_SOP_MS;                  /* addr: 0x00b2 */
  SPI4P2_TXCH1_SOP_LS_t                    TXCH1_SOP_LS;                  /* addr: 0x00b3 */
  SPI4P2_TXCH2_SOP_MS_t                    TXCH2_SOP_MS;                  /* addr: 0x00b4 */
  SPI4P2_TXCH2_SOP_LS_t                    TXCH2_SOP_LS;                  /* addr: 0x00b5 */
  SPI4P2_TXCH3_SOP_MS_t                    TXCH3_SOP_MS;                  /* addr: 0x00b6 */
  SPI4P2_TXCH3_SOP_LS_t                    TXCH3_SOP_LS;                  /* addr: 0x00b7 */
  SPI4P2_TXCH0_EOP_MS_t                    TXCH0_EOP_MS;                  /* addr: 0x00b8 */
  SPI4P2_TXCH0_EOP_LS_t                    TXCH0_EOP_LS;                  /* addr: 0x00b9 */
  SPI4P2_TXCH1_EOP_MS_t                    TXCH1_EOP_MS;                  /* addr: 0x00ba */
  SPI4P2_TXCH1_EOP_LS_t                    TXCH1_EOP_LS;                  /* addr: 0x00bb */
  SPI4P2_TXCH2_EOP_MS_t                    TXCH2_EOP_MS;                  /* addr: 0x00bc */
  SPI4P2_TXCH2_EOP_LS_t                    TXCH2_EOP_LS;                  /* addr: 0x00bd */
  SPI4P2_TXCH3_EOP_MS_t                    TXCH3_EOP_MS;                  /* addr: 0x00be */
  SPI4P2_TXCH3_EOP_LS_t                    TXCH3_EOP_LS;                  /* addr: 0x00bf */
  SPI4P2_TXCH0_ERR_MS_t                    TXCH0_ERR_MS;                  /* addr: 0x00c0 */
  SPI4P2_TXCH0_ERR_LS_t                    TXCH0_ERR_LS;                  /* addr: 0x00c1 */
  SPI4P2_TXCH1_ERR_MS_t                    TXCH1_ERR_MS;                  /* addr: 0x00c2 */
  SPI4P2_TXCH1_ERR_LS_t                    TXCH1_ERR_LS;                  /* addr: 0x00c3 */
  SPI4P2_TXCH2_ERR_MS_t                    TXCH2_ERR_MS;                  /* addr: 0x00c4 */
  SPI4P2_TXCH2_ERR_LS_t                    TXCH2_ERR_LS;                  /* addr: 0x00c5 */
  SPI4P2_TXCH3_ERR_MS_t                    TXCH3_ERR_MS;                  /* addr: 0x00c6 */
  SPI4P2_TXCH3_ERR_LS_t                    TXCH3_ERR_LS;                  /* addr: 0x00c7 */
  SPI4P2_TXCH0_BYTE_C2_t                   TXCH0_BYTE_C2;                 /* addr: 0x00c8 */
  SPI4P2_TXCH0_BYTE_C1_t                   TXCH0_BYTE_C1;                 /* addr: 0x00c9 */
  SPI4P2_TXCH0_BYTE_C0_t                   TXCH0_BYTE_C0;                 /* addr: 0x00ca */
  SPI4P2_TXCH1_BYTE_C2_t                   TXCH1_BYTE_C2;                 /* addr: 0x00cb */
  SPI4P2_TXCH1_BYTE_C1_t                   TXCH1_BYTE_C1;                 /* addr: 0x00cc */
  SPI4P2_TXCH1_BYTE_C0_t                   TXCH1_BYTE_C0;                 /* addr: 0x00cd */
  cs_uint16                                rsrvd13[2];
  SPI4P2_RXCH0_SOP_MS_t                    RXCH0_SOP_MS;                  /* addr: 0x00d0 */
  SPI4P2_RXCH0_SOP_LS_t                    RXCH0_SOP_LS;                  /* addr: 0x00d1 */
  SPI4P2_RXCH1_SOP_MS_t                    RXCH1_SOP_MS;                  /* addr: 0x00d2 */
  SPI4P2_RXCH1_SOP_LS_t                    RXCH1_SOP_LS;                  /* addr: 0x00d3 */
  SPI4P2_RXCH2_SOP_MS_t                    RXCH2_SOP_MS;                  /* addr: 0x00d4 */
  SPI4P2_RXCH2_SOP_LS_t                    RXCH2_SOP_LS;                  /* addr: 0x00d5 */
  SPI4P2_RXCH3_SOP_MS_t                    RXCH3_SOP_MS;                  /* addr: 0x00d6 */
  SPI4P2_RXCH3_SOP_LS_t                    RXCH3_SOP_LS;                  /* addr: 0x00d7 */
  SPI4P2_RXCH0_EOP_MS_t                    RXCH0_EOP_MS;                  /* addr: 0x00d8 */
  SPI4P2_RXCH0_EOP_LS_t                    RXCH0_EOP_LS;                  /* addr: 0x00d9 */
  SPI4P2_RXCH1_EOP_MS_t                    RXCH1_EOP_MS;                  /* addr: 0x00da */
  SPI4P2_RXCH1_EOP_LS_t                    RXCH1_EOP_LS;                  /* addr: 0x00db */
  SPI4P2_RXCH2_EOP_MS_t                    RXCH2_EOP_MS;                  /* addr: 0x00dc */
  SPI4P2_RXCH2_EOP_LS_t                    RXCH2_EOP_LS;                  /* addr: 0x00dd */
  SPI4P2_RXCH3_EOP_MS_t                    RXCH3_EOP_MS;                  /* addr: 0x00de */
  SPI4P2_RXCH3_EOP_LS_t                    RXCH3_EOP_LS;                  /* addr: 0x00df */
  SPI4P2_RXCH0_ERR_MS_t                    RXCH0_ERR_MS;                  /* addr: 0x00e0 */
  SPI4P2_RXCH0_ERR_LS_t                    RXCH0_ERR_LS;                  /* addr: 0x00e1 */
  SPI4P2_RXCH1_ERR_MS_t                    RXCH1_ERR_MS;                  /* addr: 0x00e2 */
  SPI4P2_RXCH1_ERR_LS_t                    RXCH1_ERR_LS;                  /* addr: 0x00e3 */
  SPI4P2_RXCH2_ERR_MS_t                    RXCH2_ERR_MS;                  /* addr: 0x00e4 */
  SPI4P2_RXCH2_ERR_LS_t                    RXCH2_ERR_LS;                  /* addr: 0x00e5 */
  SPI4P2_RXCH3_ERR_MS_t                    RXCH3_ERR_MS;                  /* addr: 0x00e6 */
  SPI4P2_RXCH3_ERR_LS_t                    RXCH3_ERR_LS;                  /* addr: 0x00e7 */
  SPI4P2_RXCH0_BYTE_C2_t                   RXCH0_BYTE_C2;                 /* addr: 0x00e8 */
  SPI4P2_RXCH0_BYTE_C1_t                   RXCH0_BYTE_C1;                 /* addr: 0x00e9 */
  SPI4P2_RXCH0_BYTE_C0_t                   RXCH0_BYTE_C0;                 /* addr: 0x00ea */
  SPI4P2_RXCH1_BYTE_C2_t                   RXCH1_BYTE_C2;                 /* addr: 0x00eb */
  SPI4P2_RXCH1_BYTE_C1_t                   RXCH1_BYTE_C1;                 /* addr: 0x00ec */
  SPI4P2_RXCH1_BYTE_C0_t                   RXCH1_BYTE_C0;                 /* addr: 0x00ed */
  SPI4P2_RXCH2_BYTE_C2_t                   RXCH2_BYTE_C2;                 /* addr: 0x00ee */
  SPI4P2_RXCH2_BYTE_C1_t                   RXCH2_BYTE_C1;                 /* addr: 0x00ef */
  SPI4P2_RXCH2_BYTE_C0_t                   RXCH2_BYTE_C0;                 /* addr: 0x00f0 */
  SPI4P2_RXCH3_BYTE_C2_t                   RXCH3_BYTE_C2;                 /* addr: 0x00f1 */
  SPI4P2_RXCH3_BYTE_C1_t                   RXCH3_BYTE_C1;                 /* addr: 0x00f2 */
  SPI4P2_RXCH3_BYTE_C0_t                   RXCH3_BYTE_C0;                 /* addr: 0x00f3 */
  cs_uint16                                rsrvd14[12];
  SPI4P2_BISTPHASEOVERRIDE0_t              BISTPHASEOVERRIDE0;            /* addr: 0x0100 */
  SPI4P2_BISTPHASEOVERRIDE1_t              BISTPHASEOVERRIDE1;            /* addr: 0x0101 */
  SPI4P2_BISTTESTTIME_t                    BISTTESTTIME;                  /* addr: 0x0102 */
  SPI4P2_BISTSETTLETIME_t                  BISTSETTLETIME;                /* addr: 0x0103 */
  SPI4P2_BISTPATTERN0_t                    BISTPATTERN0;                  /* addr: 0x0104 */
  SPI4P2_BISTPATTERN1_t                    BISTPATTERN1;                  /* addr: 0x0105 */
  SPI4P2_BISTPATTERN2_t                    BISTPATTERN2;                  /* addr: 0x0106 */
  SPI4P2_BISTPATTERN3_t                    BISTPATTERN3;                  /* addr: 0x0107 */
  SPI4P2_BISTPATTERN4_t                    BISTPATTERN4;                  /* addr: 0x0108 */
  SPI4P2_BISTPATTERN5_t                    BISTPATTERN5;                  /* addr: 0x0109 */
  SPI4P2_BISTERROR0_t                      BISTERROR0;                    /* addr: 0x010a */
  SPI4P2_BISTERROR1_t                      BISTERROR1;                    /* addr: 0x010b */
  SPI4P2_BISTERROR2_t                      BISTERROR2;                    /* addr: 0x010c */
  SPI4P2_BISTERROR3_t                      BISTERROR3;                    /* addr: 0x010d */
  SPI4P2_BISTERROR4_t                      BISTERROR4;                    /* addr: 0x010e */
  SPI4P2_BISTERROR5_t                      BISTERROR5;                    /* addr: 0x010f */
  SPI4P2_TXCH2_BYTE_C2_t                   TXCH2_BYTE_C2;                 /* addr: 0x0110 */
  SPI4P2_TXCH2_BYTE_C1_t                   TXCH2_BYTE_C1;                 /* addr: 0x0111 */
  SPI4P2_TXCH2_BYTE_C0_t                   TXCH2_BYTE_C0;                 /* addr: 0x0112 */
  SPI4P2_TXCH3_BYTE_C2_t                   TXCH3_BYTE_C2;                 /* addr: 0x0113 */
  SPI4P2_TXCH3_BYTE_C1_t                   TXCH3_BYTE_C1;                 /* addr: 0x0114 */
  SPI4P2_TXCH3_BYTE_C0_t                   TXCH3_BYTE_C0;                 /* addr: 0x0115 */
} SPI4P2_t;

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * XGXS::mp
 */

#define XGXS_MP_MnCntrl0                         0x1a000
#define XGXS_MP_MnCntrl0_dft                     0x0202
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  3 ;
    cs_uint16 xgxs_rx_tx_lb        :  1 ; /* bits 12:12 */
    cs_uint16 rx_clock_sel         :  2 ; /* bits 11:10 */
    cs_uint16 rx_clock_ena         :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd3               :  3 ;
    cs_uint16 xgxs_pa_enable       :  1 ; /* bits 5:5 */
    cs_uint16 xgxs_tx_rx_lb        :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 tx_clock_ena         :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 tx_clock_ena         :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 xgxs_tx_rx_lb        :  1 ; /* bits 4:4 */
    cs_uint16 xgxs_pa_enable       :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd3               :  3 ;
    cs_uint16 rx_clock_ena         :  1 ; /* bits 9:9 */
    cs_uint16 rx_clock_sel         :  2 ; /* bits 11:10 */
    cs_uint16 xgxs_rx_tx_lb        :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd4               :  3 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_MnCntrl0_t;
#define     rx_clock_sel_Lane_0                           0x00
#define     rx_clock_sel_Lane_1                           0x01
#define     rx_clock_sel_Lane_2                           0x02
#define     rx_clock_sel_Lane_3                           0x03

#define XGXS_MP_MnSta0                           0x1a001
#define XGXS_MP_MnSta0_dft                       0x00f0
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xaui_rx_lck_det      :  4 ; /* bits 15:12 */
    cs_uint16 lock_det             :  4 ; /* bits 11:8 */
    cs_uint16 data_det             :  4 ; /* bits 7:4 */
    cs_uint16 no_clock             :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 no_clock             :  4 ; /* bits 3:0 */
    cs_uint16 data_det             :  4 ; /* bits 7:4 */
    cs_uint16 lock_det             :  4 ; /* bits 11:8 */
    cs_uint16 xaui_rx_lck_det      :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_MnSta0_t;

#define XGXS_MP_MnInt0                           0x1a002
#define XGXS_MP_MnInt0_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 LckDet3I             :  1 ; /* bits 11:11 */
    cs_uint16 LckDet2I             :  1 ; /* bits 10:10 */
    cs_uint16 LckDet1I             :  1 ; /* bits 9:9 */
    cs_uint16 LckDet0I             :  1 ; /* bits 8:8 */
    cs_uint16 DatDet3I             :  1 ; /* bits 7:7 */
    cs_uint16 DatDet2I             :  1 ; /* bits 6:6 */
    cs_uint16 DatDet1I             :  1 ; /* bits 5:5 */
    cs_uint16 DatDet0I             :  1 ; /* bits 4:4 */
    cs_uint16 NoClk3I              :  1 ; /* bits 3:3 */
    cs_uint16 NoClk2I              :  1 ; /* bits 2:2 */
    cs_uint16 NoClk1I              :  1 ; /* bits 1:1 */
    cs_uint16 NoClk0I              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NoClk0I              :  1 ; /* bits 0:0 */
    cs_uint16 NoClk1I              :  1 ; /* bits 1:1 */
    cs_uint16 NoClk2I              :  1 ; /* bits 2:2 */
    cs_uint16 NoClk3I              :  1 ; /* bits 3:3 */
    cs_uint16 DatDet0I             :  1 ; /* bits 4:4 */
    cs_uint16 DatDet1I             :  1 ; /* bits 5:5 */
    cs_uint16 DatDet2I             :  1 ; /* bits 6:6 */
    cs_uint16 DatDet3I             :  1 ; /* bits 7:7 */
    cs_uint16 LckDet0I             :  1 ; /* bits 8:8 */
    cs_uint16 LckDet1I             :  1 ; /* bits 9:9 */
    cs_uint16 LckDet2I             :  1 ; /* bits 10:10 */
    cs_uint16 LckDet3I             :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_MnInt0_t;

#define XGXS_MP_MnIntMask0                       0x1a003
#define XGXS_MP_MnIntMask0_dft                   0x0fff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 LckDet3M             :  1 ; /* bits 11:11 */
    cs_uint16 LckDet2M             :  1 ; /* bits 10:10 */
    cs_uint16 LckDet1M             :  1 ; /* bits 9:9 */
    cs_uint16 LckDet0M             :  1 ; /* bits 8:8 */
    cs_uint16 DatDet3M             :  1 ; /* bits 7:7 */
    cs_uint16 DatDet2M             :  1 ; /* bits 6:6 */
    cs_uint16 DatDet1M             :  1 ; /* bits 5:5 */
    cs_uint16 DatDet0M             :  1 ; /* bits 4:4 */
    cs_uint16 NoClk3M              :  1 ; /* bits 3:3 */
    cs_uint16 NoClk2M              :  1 ; /* bits 2:2 */
    cs_uint16 NoClk1M              :  1 ; /* bits 1:1 */
    cs_uint16 NoClk0M              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 NoClk0M              :  1 ; /* bits 0:0 */
    cs_uint16 NoClk1M              :  1 ; /* bits 1:1 */
    cs_uint16 NoClk2M              :  1 ; /* bits 2:2 */
    cs_uint16 NoClk3M              :  1 ; /* bits 3:3 */
    cs_uint16 DatDet0M             :  1 ; /* bits 4:4 */
    cs_uint16 DatDet1M             :  1 ; /* bits 5:5 */
    cs_uint16 DatDet2M             :  1 ; /* bits 6:6 */
    cs_uint16 DatDet3M             :  1 ; /* bits 7:7 */
    cs_uint16 LckDet0M             :  1 ; /* bits 8:8 */
    cs_uint16 LckDet1M             :  1 ; /* bits 9:9 */
    cs_uint16 LckDet2M             :  1 ; /* bits 10:10 */
    cs_uint16 LckDet3M             :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_MnIntMask0_t;

#define XGXS_MP_MnSta1                           0x1a004
#define XGXS_MP_MnSta1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  6 ;
    cs_uint16 rx_no_clock          :  1 ; /* bits 9:9 */
    cs_uint16 tx_no_clock          :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  8 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 tx_no_clock          :  1 ; /* bits 8:8 */
    cs_uint16 rx_no_clock          :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd2               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_MnSta1_t;

#define XGXS_MP_MnInt1                           0x1a005
#define XGXS_MP_MnInt1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 RxNoClkI             :  1 ; /* bits 9:9 */
    cs_uint16 TxNoClkI             :  1 ; /* bits 8:8 */
    cs_uint16 RxPCPAI              :  1 ; /* bits 7:7 */
    cs_uint16 RxLBPAI              :  1 ; /* bits 6:6 */
    cs_uint16 TxLnPAI              :  1 ; /* bits 5:5 */
    cs_uint16 TxLBPAI              :  1 ; /* bits 4:4 */
    cs_uint16 RxL3PAI              :  1 ; /* bits 3:3 */
    cs_uint16 RxL2PAI              :  1 ; /* bits 2:2 */
    cs_uint16 RxL1PAI              :  1 ; /* bits 1:1 */
    cs_uint16 RxL0PAI              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RxL0PAI              :  1 ; /* bits 0:0 */
    cs_uint16 RxL1PAI              :  1 ; /* bits 1:1 */
    cs_uint16 RxL2PAI              :  1 ; /* bits 2:2 */
    cs_uint16 RxL3PAI              :  1 ; /* bits 3:3 */
    cs_uint16 TxLBPAI              :  1 ; /* bits 4:4 */
    cs_uint16 TxLnPAI              :  1 ; /* bits 5:5 */
    cs_uint16 RxLBPAI              :  1 ; /* bits 6:6 */
    cs_uint16 RxPCPAI              :  1 ; /* bits 7:7 */
    cs_uint16 TxNoClkI             :  1 ; /* bits 8:8 */
    cs_uint16 RxNoClkI             :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_MnInt1_t;

#define XGXS_MP_MnIntMask1                       0x1a006
#define XGXS_MP_MnIntMask1_dft                   0x03ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 RxNoClkM             :  1 ; /* bits 9:9 */
    cs_uint16 TxNoClkM             :  1 ; /* bits 8:8 */
    cs_uint16 RxPCPAM              :  1 ; /* bits 7:7 */
    cs_uint16 RxLBPAM              :  1 ; /* bits 6:6 */
    cs_uint16 TxLnPAM              :  1 ; /* bits 5:5 */
    cs_uint16 TxLBPAM              :  1 ; /* bits 4:4 */
    cs_uint16 RxL3PAM              :  1 ; /* bits 3:3 */
    cs_uint16 RxL2PAM              :  1 ; /* bits 2:2 */
    cs_uint16 RxL1PAM              :  1 ; /* bits 1:1 */
    cs_uint16 RxL0PAM              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RxL0PAM              :  1 ; /* bits 0:0 */
    cs_uint16 RxL1PAM              :  1 ; /* bits 1:1 */
    cs_uint16 RxL2PAM              :  1 ; /* bits 2:2 */
    cs_uint16 RxL3PAM              :  1 ; /* bits 3:3 */
    cs_uint16 TxLBPAM              :  1 ; /* bits 4:4 */
    cs_uint16 TxLnPAM              :  1 ; /* bits 5:5 */
    cs_uint16 RxLBPAM              :  1 ; /* bits 6:6 */
    cs_uint16 RxPCPAM              :  1 ; /* bits 7:7 */
    cs_uint16 TxNoClkM             :  1 ; /* bits 8:8 */
    cs_uint16 RxNoClkM             :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_MnIntMask1_t;

#define XGXS_MP_TxLnCtl                          0x1a007
#define XGXS_MP_TxLnCtl_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_tx_lswap        :  1 ; /* bits 8:8 */
    cs_uint16 xgxs_tx_invert       :  4 ; /* bits 7:4 */
    cs_uint16 xgxs_tx_bswap        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_tx_bswap        :  4 ; /* bits 3:0 */
    cs_uint16 xgxs_tx_invert       :  4 ; /* bits 7:4 */
    cs_uint16 xgxs_tx_lswap        :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_TxLnCtl_t;

#define XGXS_MP_RxLnCtl                          0x1a008
#define XGXS_MP_RxLnCtl_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_rx_lswap        :  1 ; /* bits 8:8 */
    cs_uint16 xgxs_rx_invert       :  4 ; /* bits 7:4 */
    cs_uint16 xgxs_rx_bswap        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_rx_bswap        :  4 ; /* bits 3:0 */
    cs_uint16 xgxs_rx_invert       :  4 ; /* bits 7:4 */
    cs_uint16 xgxs_rx_lswap        :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_RxLnCtl_t;

#define XGXS_MP_ESINIT                           0x1a009
#define XGXS_MP_ESINIT_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RxPCRPR              :  1 ; /* bits 7:7 */
    cs_uint16 RxLBRPR              :  1 ; /* bits 6:6 */
    cs_uint16 TxLnRPR              :  1 ; /* bits 5:5 */
    cs_uint16 TxLBRPR              :  1 ; /* bits 4:4 */
    cs_uint16 RxL3RPR              :  1 ; /* bits 3:3 */
    cs_uint16 RxL2RPR              :  1 ; /* bits 2:2 */
    cs_uint16 RxL1RPR              :  1 ; /* bits 1:1 */
    cs_uint16 RxL0RPR              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RxL0RPR              :  1 ; /* bits 0:0 */
    cs_uint16 RxL1RPR              :  1 ; /* bits 1:1 */
    cs_uint16 RxL2RPR              :  1 ; /* bits 2:2 */
    cs_uint16 RxL3RPR              :  1 ; /* bits 3:3 */
    cs_uint16 TxLBRPR              :  1 ; /* bits 4:4 */
    cs_uint16 TxLnRPR              :  1 ; /* bits 5:5 */
    cs_uint16 RxLBRPR              :  1 ; /* bits 6:6 */
    cs_uint16 RxPCRPR              :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_ESINIT_t;

#define XGXS_MP_XAUI0                            0x1a00a
#define XGXS_MP_XAUI0_dft                        0x0010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 xaui_tx_ckref_d      :  2 ; /* bits 7:6 */
    cs_uint16 xaui_rx_loopbk       :  1 ; /* bits 5:5 */
    cs_uint16 xaui_data_lock       :  1 ; /* bits 4:4 */
    cs_uint16 xaui_tx_lptime       :  1 ; /* bits 3:3 */
    cs_uint16 xaui_sfi             :  1 ; /* bits 2:2 */
    cs_uint16 xaui_tx_pd           :  1 ; /* bits 1:1 */
    cs_uint16 xaui_rx_pd           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_rx_pd           :  1 ; /* bits 0:0 */
    cs_uint16 xaui_tx_pd           :  1 ; /* bits 1:1 */
    cs_uint16 xaui_sfi             :  1 ; /* bits 2:2 */
    cs_uint16 xaui_tx_lptime       :  1 ; /* bits 3:3 */
    cs_uint16 xaui_data_lock       :  1 ; /* bits 4:4 */
    cs_uint16 xaui_rx_loopbk       :  1 ; /* bits 5:5 */
    cs_uint16 xaui_tx_ckref_d      :  2 ; /* bits 7:6 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI0_t;

#define XGXS_MP_XAUI1                            0x1a00b
#define XGXS_MP_XAUI1_dft                        0x0032
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 xaui_tx_t311men      :  1 ; /* bits 13:13 */
    cs_uint16 xaui_tx_t78men       :  1 ; /* bits 12:12 */
    cs_uint16 xaui_tx_tckien       :  1 ; /* bits 11:11 */
    cs_uint16 xaui_tx_tckoen       :  1 ; /* bits 10:10 */
    cs_uint16 xaui_tx_tckosel      :  2 ; /* bits 9:8 */
    cs_uint16 xaui_tx_div_rov      :  1 ; /* bits 7:7 */
    cs_uint16 xaui_tx_div_ror      :  1 ; /* bits 6:6 */
    cs_uint16 xaui_tx_clken        :  1 ; /* bits 5:5 */
    cs_uint16 xaui_tx_level        :  3 ; /* bits 4:2 */
    cs_uint16 xaui_tx_peak         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_tx_peak         :  2 ; /* bits 1:0 */
    cs_uint16 xaui_tx_level        :  3 ; /* bits 4:2 */
    cs_uint16 xaui_tx_clken        :  1 ; /* bits 5:5 */
    cs_uint16 xaui_tx_div_ror      :  1 ; /* bits 6:6 */
    cs_uint16 xaui_tx_div_rov      :  1 ; /* bits 7:7 */
    cs_uint16 xaui_tx_tckosel      :  2 ; /* bits 9:8 */
    cs_uint16 xaui_tx_tckoen       :  1 ; /* bits 10:10 */
    cs_uint16 xaui_tx_tckien       :  1 ; /* bits 11:11 */
    cs_uint16 xaui_tx_t78men       :  1 ; /* bits 12:12 */
    cs_uint16 xaui_tx_t311men      :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI1_t;

#define XGXS_MP_XAUI2                            0x1a00c
#define XGXS_MP_XAUI2_dft                        0x0032
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 xaui_tx_ac_cpl       :  2 ; /* bits 5:4 */
    cs_uint16 xaui_tx_filtr        :  2 ; /* bits 3:2 */
    cs_uint16 xaui_tx_filtint      :  1 ; /* bits 1:1 */
    cs_uint16 xaui_tx_filten       :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_tx_filten       :  1 ; /* bits 0:0 */
    cs_uint16 xaui_tx_filtint      :  1 ; /* bits 1:1 */
    cs_uint16 xaui_tx_filtr        :  2 ; /* bits 3:2 */
    cs_uint16 xaui_tx_ac_cpl       :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI2_t;

#define XGXS_MP_XAUI3                            0x1a00d
#define XGXS_MP_XAUI3_dft                        0x8000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xaui_rx_clken        :  1 ; /* bits 15:15 */
    cs_uint16 xaui_rx_t78men       :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 xaui_rx_tckoen       :  1 ; /* bits 12:12 */
    cs_uint16 xaui_rx_tckien       :  1 ; /* bits 11:11 */
    cs_uint16 xaui_rx_tckosel      :  2 ; /* bits 10:9 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xaui_rx_frc_lck      :  4 ; /* bits 7:4 */
    cs_uint16 xaui_rx_frc_pd       :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_rx_frc_pd       :  4 ; /* bits 3:0 */
    cs_uint16 xaui_rx_frc_lck      :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xaui_rx_tckosel      :  2 ; /* bits 10:9 */
    cs_uint16 xaui_rx_tckien       :  1 ; /* bits 11:11 */
    cs_uint16 xaui_rx_tckoen       :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 xaui_rx_t78men       :  1 ; /* bits 14:14 */
    cs_uint16 xaui_rx_clken        :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI3_t;

#define XGXS_MP_XAUI4                            0x1a00e
#define XGXS_MP_XAUI4_dft                        0x0f0b
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xaui_rx_amp_pd       :  1 ; /* bits 14:14 */
    cs_uint16 xaui_rx_phsel        :  6 ; /* bits 13:8 */
    cs_uint16 xaui_rx_eqadj        :  4 ; /* bits 7:4 */
    cs_uint16 xaui_rx_cpcurr       :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_rx_cpcurr       :  4 ; /* bits 3:0 */
    cs_uint16 xaui_rx_eqadj        :  4 ; /* bits 7:4 */
    cs_uint16 xaui_rx_phsel        :  6 ; /* bits 13:8 */
    cs_uint16 xaui_rx_amp_pd       :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI4_t;

#define XGXS_MP_XAUI5                            0x1a00f
#define XGXS_MP_XAUI5_dft                        0x4f83
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 xaui_rx_datadl       :  3 ; /* bits 14:12 */
    cs_uint16 xaui_rx_cpoff        :  4 ; /* bits 11:8 */
    cs_uint16 xaui_rx_filtint      :  1 ; /* bits 7:7 */
    cs_uint16 xaui_rx_filten       :  1 ; /* bits 6:6 */
    cs_uint16 xaui_rx_div_rov      :  1 ; /* bits 5:5 */
    cs_uint16 xaui_rx_div_ror      :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xaui_rx_filtr        :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_rx_filtr        :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xaui_rx_div_ror      :  1 ; /* bits 4:4 */
    cs_uint16 xaui_rx_div_rov      :  1 ; /* bits 5:5 */
    cs_uint16 xaui_rx_filten       :  1 ; /* bits 6:6 */
    cs_uint16 xaui_rx_filtint      :  1 ; /* bits 7:7 */
    cs_uint16 xaui_rx_cpoff        :  4 ; /* bits 11:8 */
    cs_uint16 xaui_rx_datadl       :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI5_t;

#define XGXS_MP_XAUI6                            0x1a010
#define XGXS_MP_XAUI6_dft                        0xcc3c
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xaui_rx_freq         :  8 ; /* bits 15:8 */
    cs_uint16 xaui_tx_freq         :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_tx_freq         :  8 ; /* bits 7:0 */
    cs_uint16 xaui_rx_freq         :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI6_t;

#define XGXS_MP_XAUI7                            0x1a011
#define XGXS_MP_XAUI7_dft                        0x001a
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 xaui_tx_p1_freq      :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_tx_p1_freq      :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI7_t;

#define XGXS_MP_XAUI8                            0x1a012
#define XGXS_MP_XAUI8_dft                        0x6140
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xaui_rx_p2_freq      : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_rx_p2_freq      : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI8_t;

#define XGXS_MP_XAUI9                            0x1a013
#define XGXS_MP_XAUI9_dft                        0x00ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xaui_rx_spare        :  8 ; /* bits 15:8 */
    cs_uint16 xaui_tx_spare        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xaui_tx_spare        :  8 ; /* bits 7:0 */
    cs_uint16 xaui_rx_spare        :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_XAUI9_t;

#define XGXS_MP_FMRO                             0x1a014
#define XGXS_MP_FMRO_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 fmro_view_sel        :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 fmro_div_clk         :  1 ; /* bits 1:1 */
    cs_uint16 fmro_rx_view         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 fmro_rx_view         :  1 ; /* bits 0:0 */
    cs_uint16 fmro_div_clk         :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 fmro_view_sel        :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_MP_FMRO_t;
#define     fmro_view_sel_XGXS_XGMII_0                    0x00
#define     fmro_view_sel_XGXS_XGMII_1                    0x01
#define     fmro_view_sel_XGXS_XGMII_2                    0x02
#define     fmro_view_sel_XGXS_XGMII_3                    0x03
#define     fmro_view_sel_XGXS_CODE_0                     0x04
#define     fmro_view_sel_XGXS_CODE_1                     0x05
#define     fmro_view_sel_XGXS_CODE_2                     0x06
#define     fmro_view_sel_XGXS_CODE_3                     0x07
#define     fmro_view_sel_XGXS_LINE_0                     0x08
#define     fmro_view_sel_XGXS_LINE_1                     0x09
#define     fmro_view_sel_XGXS_LINE_2                     0x0a
#define     fmro_view_sel_XGXS_LINE_3                     0x0b
#define     fmro_div_clk_Clock_div_1                      0x00
#define     fmro_div_clk_Clock_div_4                      0x01
#define     fmro_rx_view_XGXS_Transmit                    0x00
#define     fmro_rx_view_XGXS_Receive                     0x01


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * XGXS::tx
 */

#define XGXS_TX_TxCntrl0                         0x1a020
#define XGXS_TX_TxCntrl0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_fpat_sel        :  8 ; /* bits 15:8 */
    cs_uint16 xgxs_tx_err_inj      :  4 ; /* bits 7:4 */
    cs_uint16 xgxs_tx_random_6     :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xgxs_tx_mode         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_tx_mode         :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xgxs_tx_random_6     :  1 ; /* bits 3:3 */
    cs_uint16 xgxs_tx_err_inj      :  4 ; /* bits 7:4 */
    cs_uint16 xgxs_fpat_sel        :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl0_t;
#define     xgxs_fpat_sel_Register                        0x00
#define     xgxs_fpat_sel_High                            0x01
#define     xgxs_fpat_sel_Low                             0x02
#define     xgxs_fpat_sel_Mixed                           0x03
#define     xgxs_tx_mode_Data                             0x00
#define     xgxs_tx_mode_Frequency                        0x01
#define     xgxs_tx_mode_Random                           0x02
#define     xgxs_tx_mode_Jitter                           0x03

#define XGXS_TX_TxCntrl1                         0x1a021
#define XGXS_TX_TxCntrl1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_0          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_0          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl1_t;

#define XGXS_TX_TxCntrl2                         0x1a022
#define XGXS_TX_TxCntrl2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_1          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_1          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl2_t;

#define XGXS_TX_TxCntrl3                         0x1a023
#define XGXS_TX_TxCntrl3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_2          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_2          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl3_t;

#define XGXS_TX_TxCntrl4                         0x1a024
#define XGXS_TX_TxCntrl4_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_3          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_3          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl4_t;

#define XGXS_TX_TxCntrl5                         0x1a025
#define XGXS_TX_TxCntrl5_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_tx_fone         :  4 ; /* bits 15:12 */
    cs_uint16 xgxs_tx_fzero        :  4 ; /* bits 11:8 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 xgxs_tx_phase        :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_tx_phase        :  4 ; /* bits 3:0 */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 xgxs_tx_fzero        :  4 ; /* bits 11:8 */
    cs_uint16 xgxs_tx_fone         :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl5_t;

#define XGXS_TX_TxCntrl6                         0x1a026
#define XGXS_TX_TxCntrl6_dft                     0x0003
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 xgxs_resolution      :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_resolution      :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl6_t;
#define     xgxs_resolution_Res_0                         0x00
#define     xgxs_resolution_Res_1                         0x01
#define     xgxs_resolution_Res_2                         0x02
#define     xgxs_resolution_Res_3                         0x03

#define XGXS_TX_TxCntrl7                         0x1a027
#define XGXS_TX_TxCntrl7_dft                     0x2111
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_offset          :  8 ; /* bits 15:8 */
    cs_uint16 xgxs_threshold       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_threshold       :  8 ; /* bits 7:0 */
    cs_uint16 xgxs_offset          :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxCntrl7_t;

#define XGXS_TX_TxSta                            0x1a028
#define XGXS_TX_TxSta_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               : 13 ;
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxSta_t;

#define XGXS_TX_TxInt                            0x1a029
#define XGXS_TX_TxInt_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxInt_t;

#define XGXS_TX_TxIntMask                        0x1a02a
#define XGXS_TX_TxIntMask_dft                    0x0007
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_TxIntMask_t;

#define XGXS_TX_GoodPkt                          0x1a02b
#define XGXS_TX_GoodPkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 good_pkt_tx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 good_pkt_tx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_GoodPkt_t;

#define XGXS_TX_ErrPkt                           0x1a02c
#define XGXS_TX_ErrPkt_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_pkt_tx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_pkt_tx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_TX_ErrPkt_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * XGXS::rx
 */

#define XGXS_RX_RxCntrl0                         0x1a040
#define XGXS_RX_RxCntrl0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_fpat_sel        :  8 ; /* bits 15:8 */
    cs_uint16 xgxs_ddsa_enable     :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 xgxs_lf_enable       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xgxs_rx_mode         :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_rx_mode         :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 xgxs_lf_enable       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 xgxs_ddsa_enable     :  1 ; /* bits 7:7 */
    cs_uint16 xgxs_fpat_sel        :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxCntrl0_t;
#define     xgxs_rx_mode_Data                             0x00
#define     xgxs_rx_mode_Frequency                        0x01
#define     xgxs_rx_mode_Random                           0x02
#define     xgxs_rx_mode_Jitter                           0x03

#define XGXS_RX_RxCntrl1                         0x1a041
#define XGXS_RX_RxCntrl1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_0          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_0          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxCntrl1_t;

#define XGXS_RX_RxCntrl2                         0x1a042
#define XGXS_RX_RxCntrl2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_1          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_1          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxCntrl2_t;

#define XGXS_RX_RxCntrl3                         0x1a043
#define XGXS_RX_RxCntrl3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_2          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_2          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxCntrl3_t;

#define XGXS_RX_RxCntrl4                         0x1a044
#define XGXS_RX_RxCntrl4_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  7 ;
    cs_uint16 xgxs_fpat_3          :  9 ; /* bits 8:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_fpat_3          :  9 ; /* bits 8:0 */
    cs_uint16 rsrvd1               :  7 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxCntrl4_t;

#define XGXS_RX_RxSta                            0x1a045
#define XGXS_RX_RxSta_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd5               :  2 ;
    cs_uint16 xgxs_cpat_lock       :  1 ; /* bits 13:13 */
    cs_uint16 xgxs_align_det       :  1 ; /* bits 12:12 */
    cs_uint16 SyncDet3             :  1 ; /* bits 11:11 */
    cs_uint16 SyncDet2             :  1 ; /* bits 10:10 */
    cs_uint16 SyncDet1             :  1 ; /* bits 9:9 */
    cs_uint16 SyncDet0             :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 PatErrSat            :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 InvCodeSat           :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 InvCodeSat           :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 PatErrSat            :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 SyncDet0             :  1 ; /* bits 8:8 */
    cs_uint16 SyncDet1             :  1 ; /* bits 9:9 */
    cs_uint16 SyncDet2             :  1 ; /* bits 10:10 */
    cs_uint16 SyncDet3             :  1 ; /* bits 11:11 */
    cs_uint16 xgxs_align_det       :  1 ; /* bits 12:12 */
    cs_uint16 xgxs_cpat_lock       :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd5               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxSta_t;

#define XGXS_RX_RxInt                            0x1a046
#define XGXS_RX_RxInt_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 PatLockDetI          :  1 ; /* bits 13:13 */
    cs_uint16 AlignDetI            :  1 ; /* bits 12:12 */
    cs_uint16 SyncDet3I            :  1 ; /* bits 11:11 */
    cs_uint16 SyncDet2I            :  1 ; /* bits 10:10 */
    cs_uint16 SyncDet1I            :  1 ; /* bits 9:9 */
    cs_uint16 SyncDet0I            :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 PatErrSatI           :  1 ; /* bits 6:6 */
    cs_uint16 PatErrI              :  1 ; /* bits 5:5 */
    cs_uint16 InvCodeSatI          :  1 ; /* bits 4:4 */
    cs_uint16 InvCodeI             :  1 ; /* bits 3:3 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 InvCodeI             :  1 ; /* bits 3:3 */
    cs_uint16 InvCodeSatI          :  1 ; /* bits 4:4 */
    cs_uint16 PatErrI              :  1 ; /* bits 5:5 */
    cs_uint16 PatErrSatI           :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SyncDet0I            :  1 ; /* bits 8:8 */
    cs_uint16 SyncDet1I            :  1 ; /* bits 9:9 */
    cs_uint16 SyncDet2I            :  1 ; /* bits 10:10 */
    cs_uint16 SyncDet3I            :  1 ; /* bits 11:11 */
    cs_uint16 AlignDetI            :  1 ; /* bits 12:12 */
    cs_uint16 PatLockDetI          :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxInt_t;

#define XGXS_RX_RxIntMask                        0x1a047
#define XGXS_RX_RxIntMask_dft                    0x3f7f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 PatLockDetM          :  1 ; /* bits 13:13 */
    cs_uint16 AlignDetM            :  1 ; /* bits 12:12 */
    cs_uint16 SyncDet3M            :  1 ; /* bits 11:11 */
    cs_uint16 SyncDet2M            :  1 ; /* bits 10:10 */
    cs_uint16 SyncDet1M            :  1 ; /* bits 9:9 */
    cs_uint16 SyncDet0M            :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 PatErrSatM           :  1 ; /* bits 6:6 */
    cs_uint16 PatErrM              :  1 ; /* bits 5:5 */
    cs_uint16 InvCodeSatM          :  1 ; /* bits 4:4 */
    cs_uint16 InvCodeM             :  1 ; /* bits 3:3 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 InvCodeM             :  1 ; /* bits 3:3 */
    cs_uint16 InvCodeSatM          :  1 ; /* bits 4:4 */
    cs_uint16 PatErrM              :  1 ; /* bits 5:5 */
    cs_uint16 PatErrSatM           :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SyncDet0M            :  1 ; /* bits 8:8 */
    cs_uint16 SyncDet1M            :  1 ; /* bits 9:9 */
    cs_uint16 SyncDet2M            :  1 ; /* bits 10:10 */
    cs_uint16 SyncDet3M            :  1 ; /* bits 11:11 */
    cs_uint16 AlignDetM            :  1 ; /* bits 12:12 */
    cs_uint16 PatLockDetM          :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_RxIntMask_t;

#define XGXS_RX_GoodPkt                          0x1a048
#define XGXS_RX_GoodPkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 good_pkt_rx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 good_pkt_rx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_GoodPkt_t;

#define XGXS_RX_ErrPkt                           0x1a049
#define XGXS_RX_ErrPkt_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_pkt_rx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_pkt_rx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_ErrPkt_t;

#define XGXS_RX_ICC0                             0x1a04a
#define XGXS_RX_ICC0_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_icc_0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_icc_0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_ICC0_t;

#define XGXS_RX_ICC1                             0x1a04b
#define XGXS_RX_ICC1_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_icc_1           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_icc_1           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_ICC1_t;

#define XGXS_RX_ICC2                             0x1a04c
#define XGXS_RX_ICC2_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_icc_2           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_icc_2           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_ICC2_t;

#define XGXS_RX_ICC3                             0x1a04d
#define XGXS_RX_ICC3_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_icc_3           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_icc_3           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_ICC3_t;

#define XGXS_RX_PEC0                             0x1a04e
#define XGXS_RX_PEC0_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_pec_0           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_pec_0           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_PEC0_t;

#define XGXS_RX_PEC1                             0x1a04f
#define XGXS_RX_PEC1_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_pec_1           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_pec_1           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_PEC1_t;

#define XGXS_RX_PEC2                             0x1a050
#define XGXS_RX_PEC2_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_pec_2           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_pec_2           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_PEC2_t;

#define XGXS_RX_PEC3                             0x1a051
#define XGXS_RX_PEC3_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 xgxs_pec_3           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 xgxs_pec_3           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XGXS_RX_PEC3_t;


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* XGXS */

typedef struct {
  XGXS_MP_MnCntrl0_t                       MnCntrl0;                      /* addr: 0x0000 */
  XGXS_MP_MnSta0_t                         MnSta0;                        /* addr: 0x0001 */
  XGXS_MP_MnInt0_t                         MnInt0;                        /* addr: 0x0002 */
  XGXS_MP_MnIntMask0_t                     MnIntMask0;                    /* addr: 0x0003 */
  XGXS_MP_MnSta1_t                         MnSta1;                        /* addr: 0x0004 */
  XGXS_MP_MnInt1_t                         MnInt1;                        /* addr: 0x0005 */
  XGXS_MP_MnIntMask1_t                     MnIntMask1;                    /* addr: 0x0006 */
  XGXS_MP_TxLnCtl_t                        TxLnCtl;                       /* addr: 0x0007 */
  XGXS_MP_RxLnCtl_t                        RxLnCtl;                       /* addr: 0x0008 */
  XGXS_MP_ESINIT_t                         ESINIT;                        /* addr: 0x0009 */
  XGXS_MP_XAUI0_t                          XAUI0;                         /* addr: 0x000a */
  XGXS_MP_XAUI1_t                          XAUI1;                         /* addr: 0x000b */
  XGXS_MP_XAUI2_t                          XAUI2;                         /* addr: 0x000c */
  XGXS_MP_XAUI3_t                          XAUI3;                         /* addr: 0x000d */
  XGXS_MP_XAUI4_t                          XAUI4;                         /* addr: 0x000e */
  XGXS_MP_XAUI5_t                          XAUI5;                         /* addr: 0x000f */
  XGXS_MP_XAUI6_t                          XAUI6;                         /* addr: 0x0010 */
  XGXS_MP_XAUI7_t                          XAUI7;                         /* addr: 0x0011 */
  XGXS_MP_XAUI8_t                          XAUI8;                         /* addr: 0x0012 */
  XGXS_MP_XAUI9_t                          XAUI9;                         /* addr: 0x0013 */
  XGXS_MP_FMRO_t                           FMRO;                          /* addr: 0x0014 */
  cs_uint16                                rsrvd1[11];
  XGXS_TX_TxCntrl0_t                       TxCntrl0;                      /* addr: 0x0020 */
  XGXS_TX_TxCntrl1_t                       TxCntrl1;                      /* addr: 0x0021 */
  XGXS_TX_TxCntrl2_t                       TxCntrl2;                      /* addr: 0x0022 */
  XGXS_TX_TxCntrl3_t                       TxCntrl3;                      /* addr: 0x0023 */
  XGXS_TX_TxCntrl4_t                       TxCntrl4;                      /* addr: 0x0024 */
  XGXS_TX_TxCntrl5_t                       TxCntrl5;                      /* addr: 0x0025 */
  XGXS_TX_TxCntrl6_t                       TxCntrl6;                      /* addr: 0x0026 */
  XGXS_TX_TxCntrl7_t                       TxCntrl7;                      /* addr: 0x0027 */
  XGXS_TX_TxSta_t                          TxSta;                         /* addr: 0x0028 */
  XGXS_TX_TxInt_t                          TxInt;                         /* addr: 0x0029 */
  XGXS_TX_TxIntMask_t                      TxIntMask;                     /* addr: 0x002a */
  XGXS_TX_GoodPkt_t                        tx_GoodPkt;                    /* addr: 0x002b */
  XGXS_TX_ErrPkt_t                         tx_ErrPkt;                     /* addr: 0x002c */
  cs_uint16                                rsrvd2[19];
  XGXS_RX_RxCntrl0_t                       RxCntrl0;                      /* addr: 0x0040 */
  XGXS_RX_RxCntrl1_t                       RxCntrl1;                      /* addr: 0x0041 */
  XGXS_RX_RxCntrl2_t                       RxCntrl2;                      /* addr: 0x0042 */
  XGXS_RX_RxCntrl3_t                       RxCntrl3;                      /* addr: 0x0043 */
  XGXS_RX_RxCntrl4_t                       RxCntrl4;                      /* addr: 0x0044 */
  XGXS_RX_RxSta_t                          RxSta;                         /* addr: 0x0045 */
  XGXS_RX_RxInt_t                          RxInt;                         /* addr: 0x0046 */
  XGXS_RX_RxIntMask_t                      RxIntMask;                     /* addr: 0x0047 */
  XGXS_RX_GoodPkt_t                        rx_GoodPkt;                    /* addr: 0x0048 */
  XGXS_RX_ErrPkt_t                         rx_ErrPkt;                     /* addr: 0x0049 */
  XGXS_RX_ICC0_t                           ICC0;                          /* addr: 0x004a */
  XGXS_RX_ICC1_t                           ICC1;                          /* addr: 0x004b */
  XGXS_RX_ICC2_t                           ICC2;                          /* addr: 0x004c */
  XGXS_RX_ICC3_t                           ICC3;                          /* addr: 0x004d */
  XGXS_RX_PEC0_t                           PEC0;                          /* addr: 0x004e */
  XGXS_RX_PEC1_t                           PEC1;                          /* addr: 0x004f */
  XGXS_RX_PEC2_t                           PEC2;                          /* addr: 0x0050 */
  XGXS_RX_PEC3_t                           PEC3;                          /* addr: 0x0051 */
} XGXS_t;

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * LIF::lif
 */

#define LIF_SRST                                 0x1c000
#define LIF_SRST_dft                             0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 15 ;
    cs_uint16 SRST                 :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SRST                 :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               : 15 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SRST_t;

#define LIF_STATUS1                              0x1c001
#define LIF_STATUS1_dft                          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 sDATA_DT             :  4 ; /* bits 15:12 */
    cs_uint16 sSYNC                :  4 ; /* bits 11:8 */
    cs_uint16 sBAD_VCOCLK          :  4 ; /* bits 7:4 */
    cs_uint16 sLOCK                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sLOCK                :  4 ; /* bits 3:0 */
    cs_uint16 sBAD_VCOCLK          :  4 ; /* bits 7:4 */
    cs_uint16 sSYNC                :  4 ; /* bits 11:8 */
    cs_uint16 sDATA_DT             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_STATUS1_t;

#define LIF_MASK1                                0x1c002
#define LIF_MASK1_dft                            0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 mDATA_DT             :  4 ; /* bits 15:12 */
    cs_uint16 mSYNC                :  4 ; /* bits 11:8 */
    cs_uint16 mBAD_VCOCLK          :  4 ; /* bits 7:4 */
    cs_uint16 mLOCK                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 mLOCK                :  4 ; /* bits 3:0 */
    cs_uint16 mBAD_VCOCLK          :  4 ; /* bits 7:4 */
    cs_uint16 mSYNC                :  4 ; /* bits 11:8 */
    cs_uint16 mDATA_DT             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_MASK1_t;

#define LIF_INTERRUPT1                           0x1c003
#define LIF_INTERRUPT1_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 iDATA_DT             :  4 ; /* bits 15:12 */
    cs_uint16 iSYNC                :  4 ; /* bits 11:8 */
    cs_uint16 iBAD_VCOCLK          :  4 ; /* bits 7:4 */
    cs_uint16 iLOCK                :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 iLOCK                :  4 ; /* bits 3:0 */
    cs_uint16 iBAD_VCOCLK          :  4 ; /* bits 7:4 */
    cs_uint16 iSYNC                :  4 ; /* bits 11:8 */
    cs_uint16 iDATA_DT             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_INTERRUPT1_t;

#define LIF_GPCTRL                               0x1c004
#define LIF_GPCTRL_dft                           0x4480
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXBIT_INV            :  1 ; /* bits 15:15 */
    cs_uint16 RXDSRC_EN            :  1 ; /* bits 14:14 */
    cs_uint16 RXLANE_SWAP          :  1 ; /* bits 13:13 */
    cs_uint16 RXBIT_SWAP           :  1 ; /* bits 12:12 */
    cs_uint16 TXBIT_INV            :  1 ; /* bits 11:11 */
    cs_uint16 TXSCR_EN             :  1 ; /* bits 10:10 */
    cs_uint16 TXLANE_SWAP          :  1 ; /* bits 9:9 */
    cs_uint16 TXBIT_SWAP           :  1 ; /* bits 8:8 */
    cs_uint16 SFI42_XAUI           :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 LANELB_EN            :  1 ; /* bits 3:3 */
    cs_uint16 PRBSCNT_LAT          :  1 ; /* bits 2:2 */
    cs_uint16 PRBS_EN              :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 PRBS_EN              :  1 ; /* bits 1:1 */
    cs_uint16 PRBSCNT_LAT          :  1 ; /* bits 2:2 */
    cs_uint16 LANELB_EN            :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 SFI42_XAUI           :  1 ; /* bits 7:7 */
    cs_uint16 TXBIT_SWAP           :  1 ; /* bits 8:8 */
    cs_uint16 TXLANE_SWAP          :  1 ; /* bits 9:9 */
    cs_uint16 TXSCR_EN             :  1 ; /* bits 10:10 */
    cs_uint16 TXBIT_INV            :  1 ; /* bits 11:11 */
    cs_uint16 RXBIT_SWAP           :  1 ; /* bits 12:12 */
    cs_uint16 RXLANE_SWAP          :  1 ; /* bits 13:13 */
    cs_uint16 RXDSRC_EN            :  1 ; /* bits 14:14 */
    cs_uint16 RXBIT_INV            :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_GPCTRL_t;

#define LIF_RXCTRL1                              0x1c005
#define LIF_RXCTRL1_dft                          0x0021
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 LOCK_OFF             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOCK_OFF             :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXCTRL1_t;

#define LIF_RXCTRL2                              0x1c006
#define LIF_RXCTRL2_dft                          0x0011
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 LOCK_THR             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOCK_THR             :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXCTRL2_t;

#define LIF_RXCTRL3                              0x1c007
#define LIF_RXCTRL3_dft                          0x0003
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 LOCK_RES             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 LOCK_RES             :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXCTRL3_t;
#define     LOCK_RES_LOW_RES                              0x00
#define     LOCK_RES_MED_RES                              0x01
#define     LOCK_RES_HIGH_RES                             0x02
#define     LOCK_RES_VERYHIGH_RES                         0x03

#define LIF_RXCTRL4                              0x1c008
#define LIF_RXCTRL4_dft                          0x603f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SYNC_BIT             :  2 ; /* bits 15:14 */
    cs_uint16 OOS_THR              :  6 ; /* bits 13:8 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 IS_THR               :  7 ; /* bits 6:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 IS_THR               :  7 ; /* bits 6:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 OOS_THR              :  6 ; /* bits 13:8 */
    cs_uint16 SYNC_BIT             :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXCTRL4_t;

#define LIF_PRIVATE                              0x1c009
#define LIF_PRIVATE_dft                          0x0c20
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 iRXLANE_SYNC_FAIL    :  1 ; /* bits 15:15 */
    cs_uint16 iTXLANE_SYNC_FAIL    :  1 ; /* bits 14:14 */
    cs_uint16 sRXLANE_SYNC_FAIL    :  1 ; /* bits 13:13 */
    cs_uint16 sTXLANE_SYNC_FAIL    :  1 ; /* bits 12:12 */
    cs_uint16 mRXLANE_SYNC_FAIL    :  1 ; /* bits 11:11 */
    cs_uint16 mTXLANE_SYNC_FAIL    :  1 ; /* bits 10:10 */
    cs_uint16 RXRESYNC_EN          :  1 ; /* bits 9:9 */
    cs_uint16 TXRESYNC_EN          :  1 ; /* bits 8:8 */
    cs_uint16 RXONESHOT_SYNC_EN    :  1 ; /* bits 7:7 */
    cs_uint16 TXONESHOT_SYNC_EN    :  1 ; /* bits 6:6 */
    cs_uint16 USE_DATA_DETECT      :  1 ; /* bits 5:5 */
    cs_uint16 TXLAUNCH_EARLY_EN    :  1 ; /* bits 4:4 */
    cs_uint16 RXSAMPLE_DLY_EN      :  1 ; /* bits 3:3 */
    cs_uint16 TXSYNCBIT_INV        :  1 ; /* bits 2:2 */
    cs_uint16 PRBS_ERR_INJ         :  1 ; /* bits 1:1 */
    cs_uint16 ALT_SYNCMON_MODE     :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ALT_SYNCMON_MODE     :  1 ; /* bits 0:0 */
    cs_uint16 PRBS_ERR_INJ         :  1 ; /* bits 1:1 */
    cs_uint16 TXSYNCBIT_INV        :  1 ; /* bits 2:2 */
    cs_uint16 RXSAMPLE_DLY_EN      :  1 ; /* bits 3:3 */
    cs_uint16 TXLAUNCH_EARLY_EN    :  1 ; /* bits 4:4 */
    cs_uint16 USE_DATA_DETECT      :  1 ; /* bits 5:5 */
    cs_uint16 TXONESHOT_SYNC_EN    :  1 ; /* bits 6:6 */
    cs_uint16 RXONESHOT_SYNC_EN    :  1 ; /* bits 7:7 */
    cs_uint16 TXRESYNC_EN          :  1 ; /* bits 8:8 */
    cs_uint16 RXRESYNC_EN          :  1 ; /* bits 9:9 */
    cs_uint16 mTXLANE_SYNC_FAIL    :  1 ; /* bits 10:10 */
    cs_uint16 mRXLANE_SYNC_FAIL    :  1 ; /* bits 11:11 */
    cs_uint16 sTXLANE_SYNC_FAIL    :  1 ; /* bits 12:12 */
    cs_uint16 sRXLANE_SYNC_FAIL    :  1 ; /* bits 13:13 */
    cs_uint16 iTXLANE_SYNC_FAIL    :  1 ; /* bits 14:14 */
    cs_uint16 iRXLANE_SYNC_FAIL    :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRIVATE_t;

#define LIF_RXADJUST1                            0x1c00a
#define LIF_RXADJUST1_dft                        0x8000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SRX_CLK_EN           :  1 ; /* bits 15:15 */
    cs_uint16 SRX_TCK78M_EN        :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 SRX_TCKO_EN          :  1 ; /* bits 12:12 */
    cs_uint16 SRX_TCKI_EN          :  1 ; /* bits 11:11 */
    cs_uint16 SRX_TCKO_SEL         :  2 ; /* bits 10:9 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SRX_FORCE_LOCK       :  4 ; /* bits 7:4 */
    cs_uint16 SRX_PD_MODE          :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SRX_PD_MODE          :  4 ; /* bits 3:0 */
    cs_uint16 SRX_FORCE_LOCK       :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SRX_TCKO_SEL         :  2 ; /* bits 10:9 */
    cs_uint16 SRX_TCKI_EN          :  1 ; /* bits 11:11 */
    cs_uint16 SRX_TCKO_EN          :  1 ; /* bits 12:12 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 SRX_TCK78M_EN        :  1 ; /* bits 14:14 */
    cs_uint16 SRX_CLK_EN           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST1_t;
#define     SRX_TCKO_SEL_7776MHz                          0x00
#define     SRX_TCKO_SEL_3888MHz                          0x01
#define     SRX_TCKO_SEL_2566GHz                          0x02
#define     SRX_TCKO_SEL_UNUSED                           0x03

#define LIF_RXADJUST2                            0x1c00b
#define LIF_RXADJUST2_dft                        0x0f0b
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SRX_AMP_PD           :  1 ; /* bits 14:14 */
    cs_uint16 SRX_PH_SEL           :  6 ; /* bits 13:8 */
    cs_uint16 SRX_EQADJ            :  4 ; /* bits 7:4 */
    cs_uint16 SRX_CPCURR           :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SRX_CPCURR           :  4 ; /* bits 3:0 */
    cs_uint16 SRX_EQADJ            :  4 ; /* bits 7:4 */
    cs_uint16 SRX_PH_SEL           :  6 ; /* bits 13:8 */
    cs_uint16 SRX_AMP_PD           :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST2_t;

#define LIF_RXADJUST3                            0x1c00c
#define LIF_RXADJUST3_dft                        0x4f83
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 SRX_DATADL           :  3 ; /* bits 14:12 */
    cs_uint16 SRX_CPOFF            :  4 ; /* bits 11:8 */
    cs_uint16 SRX_FILTINT          :  1 ; /* bits 7:7 */
    cs_uint16 SRX_FILT_EN          :  1 ; /* bits 6:6 */
    cs_uint16 SRX_DIV_RSTVAL       :  1 ; /* bits 5:5 */
    cs_uint16 SRX_DIV_RSTOR        :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SRX_FILTR            :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SRX_FILTR            :  3 ; /* bits 2:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 SRX_DIV_RSTOR        :  1 ; /* bits 4:4 */
    cs_uint16 SRX_DIV_RSTVAL       :  1 ; /* bits 5:5 */
    cs_uint16 SRX_FILT_EN          :  1 ; /* bits 6:6 */
    cs_uint16 SRX_FILTINT          :  1 ; /* bits 7:7 */
    cs_uint16 SRX_CPOFF            :  4 ; /* bits 11:8 */
    cs_uint16 SRX_DATADL           :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd2               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST3_t;

#define LIF_TXADJUST1                            0x1c00d
#define LIF_TXADJUST1_dft                        0x0028
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 STX_T311M_EN         :  1 ; /* bits 13:13 */
    cs_uint16 STX_T78M_EN          :  1 ; /* bits 12:12 */
    cs_uint16 STX_TCKI_EN          :  1 ; /* bits 11:11 */
    cs_uint16 STX_TCKO_EN          :  1 ; /* bits 10:10 */
    cs_uint16 STX_TCKO_SEL         :  2 ; /* bits 9:8 */
    cs_uint16 STX_DIV_RSTVAL       :  1 ; /* bits 7:7 */
    cs_uint16 STX_DIV_RSTOR        :  1 ; /* bits 6:6 */
    cs_uint16 STX_CLK_EN           :  1 ; /* bits 5:5 */
    cs_uint16 STX_LEVEL            :  3 ; /* bits 4:2 */
    cs_uint16 STX_PEAK             :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STX_PEAK             :  2 ; /* bits 1:0 */
    cs_uint16 STX_LEVEL            :  3 ; /* bits 4:2 */
    cs_uint16 STX_CLK_EN           :  1 ; /* bits 5:5 */
    cs_uint16 STX_DIV_RSTOR        :  1 ; /* bits 6:6 */
    cs_uint16 STX_DIV_RSTVAL       :  1 ; /* bits 7:7 */
    cs_uint16 STX_TCKO_SEL         :  2 ; /* bits 9:8 */
    cs_uint16 STX_TCKO_EN          :  1 ; /* bits 10:10 */
    cs_uint16 STX_TCKI_EN          :  1 ; /* bits 11:11 */
    cs_uint16 STX_T78M_EN          :  1 ; /* bits 12:12 */
    cs_uint16 STX_T311M_EN         :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd1               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_TXADJUST1_t;
#define     STX_TCKO_SEL_2566GHz                          0x00
#define     STX_TCKO_SEL_UNUSED0                          0x01
#define     STX_TCKO_SEL_UNUSED1                          0x02
#define     STX_TCKO_SEL_3888MHz                          0x03

#define LIF_TXADJUST2                            0x1c00e
#define LIF_TXADJUST2_dft                        0x0012
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 STX_AC_COUPLE        :  2 ; /* bits 5:4 */
    cs_uint16 STX_FILTR            :  2 ; /* bits 3:2 */
    cs_uint16 STX_FILTINT          :  1 ; /* bits 1:1 */
    cs_uint16 STX_FILT_EN          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STX_FILT_EN          :  1 ; /* bits 0:0 */
    cs_uint16 STX_FILTINT          :  1 ; /* bits 1:1 */
    cs_uint16 STX_FILTR            :  2 ; /* bits 3:2 */
    cs_uint16 STX_AC_COUPLE        :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_TXADJUST2_t;
#define     STX_AC_COUPLE_BIAS_OFF                        0x00
#define     STX_AC_COUPLE_BIAS_LOW                        0x01
#define     STX_AC_COUPLE_BIAS_RSVD                       0x02
#define     STX_AC_COUPLE_BIAS_HIGH                       0x03

#define LIF_PWRDWN                               0x1c00f
#define LIF_PWRDWN_dft                           0x000f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 STX_XGPD             :  1 ; /* bits 3:3 */
    cs_uint16 SRX_XGPD             :  1 ; /* bits 2:2 */
    cs_uint16 STX_PD               :  1 ; /* bits 1:1 */
    cs_uint16 SRX_PD               :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SRX_PD               :  1 ; /* bits 0:0 */
    cs_uint16 STX_PD               :  1 ; /* bits 1:1 */
    cs_uint16 SRX_XGPD             :  1 ; /* bits 2:2 */
    cs_uint16 STX_XGPD             :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PWRDWN_t;

#define LIF_VCOFREQ                              0x1c010
#define LIF_VCOFREQ_dft                          0xc838
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SRX_FREQ             :  8 ; /* bits 15:8 */
    cs_uint16 STX_FREQ             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STX_FREQ             :  8 ; /* bits 7:0 */
    cs_uint16 SRX_FREQ             :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_VCOFREQ_t;

#define LIF_PLL1FREQ                             0x1c011
#define LIF_PLL1FREQ_dft                         0x001a
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 STX_PLL1_FREQ        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STX_PLL1_FREQ        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PLL1FREQ_t;

#define LIF_PLL2FREQ                             0x1c012
#define LIF_PLL2FREQ_dft                         0x2140
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SRX_PLL2_FREQ        : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SRX_PLL2_FREQ        : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PLL2FREQ_t;

#define LIF_SPARE                                0x1c013
#define LIF_SPARE_dft                            0x01ff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 SRX_SPARE            :  8 ; /* bits 15:8 */
    cs_uint16 STX_SPARE            :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 STX_SPARE            :  8 ; /* bits 7:0 */
    cs_uint16 SRX_SPARE            :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SPARE_t;

#define LIF_PRBSCNT0                             0x1c014
#define LIF_PRBSCNT0_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PRBS_SYNC0           :  1 ; /* bits 15:15 */
    cs_uint16 ERR_CNT0             : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERR_CNT0             : 15 ; /* bits 14:0 */
    cs_uint16 PRBS_SYNC0           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBSCNT0_t;

#define LIF_PRBSCNT1                             0x1c015
#define LIF_PRBSCNT1_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PRBS_SYNC1           :  1 ; /* bits 15:15 */
    cs_uint16 ERR_CNT1             : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERR_CNT1             : 15 ; /* bits 14:0 */
    cs_uint16 PRBS_SYNC1           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBSCNT1_t;

#define LIF_PRBSCNT2                             0x1c016
#define LIF_PRBSCNT2_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PRBS_SYNC2           :  1 ; /* bits 15:15 */
    cs_uint16 ERR_CNT2             : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERR_CNT2             : 15 ; /* bits 14:0 */
    cs_uint16 PRBS_SYNC2           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBSCNT2_t;

#define LIF_PRBSCNT3                             0x1c017
#define LIF_PRBSCNT3_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PRBS_SYNC3           :  1 ; /* bits 15:15 */
    cs_uint16 ERR_CNT3             : 15 ; /* bits 14:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ERR_CNT3             : 15 ; /* bits 14:0 */
    cs_uint16 PRBS_SYNC3           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBSCNT3_t;

#define LIF_SYNCLOC0                             0x1c018
#define LIF_SYNCLOC0_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 SYNC_SEG0            :  3 ; /* bits 6:4 */
    cs_uint16 SYNC_LOC0            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SYNC_LOC0            :  4 ; /* bits 3:0 */
    cs_uint16 SYNC_SEG0            :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SYNCLOC0_t;

#define LIF_SYNCLOC1                             0x1c019
#define LIF_SYNCLOC1_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 SYNC_SEG1            :  3 ; /* bits 6:4 */
    cs_uint16 SYNC_LOC1            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SYNC_LOC1            :  4 ; /* bits 3:0 */
    cs_uint16 SYNC_SEG1            :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SYNCLOC1_t;

#define LIF_SYNCLOC2                             0x1c01a
#define LIF_SYNCLOC2_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 SYNC_SEG2            :  3 ; /* bits 6:4 */
    cs_uint16 SYNC_LOC2            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SYNC_LOC2            :  4 ; /* bits 3:0 */
    cs_uint16 SYNC_SEG2            :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SYNCLOC2_t;

#define LIF_SYNCLOC3                             0x1c01b
#define LIF_SYNCLOC3_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  9 ;
    cs_uint16 SYNC_SEG3            :  3 ; /* bits 6:4 */
    cs_uint16 SYNC_LOC3            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 SYNC_LOC3            :  4 ; /* bits 3:0 */
    cs_uint16 SYNC_SEG3            :  3 ; /* bits 6:4 */
    cs_uint16 rsrvd1               :  9 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SYNCLOC3_t;

#define LIF_MASK2                                0x1c01c
#define LIF_MASK2_dft                            0xffff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 mSFI41PERR           :  1 ; /* bits 15:15 */
    cs_uint16 mPRBSCNT31           :  1 ; /* bits 14:14 */
    cs_uint16 mPRBSERR             :  1 ; /* bits 13:13 */
    cs_uint16 mXGDATA_DET          :  1 ; /* bits 12:12 */
    cs_uint16 mXGBAD_VCOCLK        :  1 ; /* bits 11:11 */
    cs_uint16 mXGLOCK              :  1 ; /* bits 10:10 */
    cs_uint16 mTXCK_MISS           :  1 ; /* bits 9:9 */
    cs_uint16 mRXCK_MISS           :  1 ; /* bits 8:8 */
    cs_uint16 mTxLnPAI             :  1 ; /* bits 7:7 */
    cs_uint16 mTxLBPAI             :  1 ; /* bits 6:6 */
    cs_uint16 mRxPCPAI             :  1 ; /* bits 5:5 */
    cs_uint16 mRxLBPAI             :  1 ; /* bits 4:4 */
    cs_uint16 mRxL3PAI             :  1 ; /* bits 3:3 */
    cs_uint16 mRxL2PAI             :  1 ; /* bits 2:2 */
    cs_uint16 mRxL1PAI             :  1 ; /* bits 1:1 */
    cs_uint16 mRxL0PAI             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 mRxL0PAI             :  1 ; /* bits 0:0 */
    cs_uint16 mRxL1PAI             :  1 ; /* bits 1:1 */
    cs_uint16 mRxL2PAI             :  1 ; /* bits 2:2 */
    cs_uint16 mRxL3PAI             :  1 ; /* bits 3:3 */
    cs_uint16 mRxLBPAI             :  1 ; /* bits 4:4 */
    cs_uint16 mRxPCPAI             :  1 ; /* bits 5:5 */
    cs_uint16 mTxLBPAI             :  1 ; /* bits 6:6 */
    cs_uint16 mTxLnPAI             :  1 ; /* bits 7:7 */
    cs_uint16 mRXCK_MISS           :  1 ; /* bits 8:8 */
    cs_uint16 mTXCK_MISS           :  1 ; /* bits 9:9 */
    cs_uint16 mXGLOCK              :  1 ; /* bits 10:10 */
    cs_uint16 mXGBAD_VCOCLK        :  1 ; /* bits 11:11 */
    cs_uint16 mXGDATA_DET          :  1 ; /* bits 12:12 */
    cs_uint16 mPRBSERR             :  1 ; /* bits 13:13 */
    cs_uint16 mPRBSCNT31           :  1 ; /* bits 14:14 */
    cs_uint16 mSFI41PERR           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_MASK2_t;

#define LIF_STATUS2                              0x1c01d
#define LIF_STATUS2_dft                          0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 sSFI41PERR           :  1 ; /* bits 15:15 */
    cs_uint16 sPRBSCNT31           :  1 ; /* bits 14:14 */
    cs_uint16 sPRBSERR             :  1 ; /* bits 13:13 */
    cs_uint16 sXGDATA_DET          :  1 ; /* bits 12:12 */
    cs_uint16 sXGBAD_VCOCLK        :  1 ; /* bits 11:11 */
    cs_uint16 sXGLOCK              :  1 ; /* bits 10:10 */
    cs_uint16 sTXCK_MISS           :  1 ; /* bits 9:9 */
    cs_uint16 sRXCK_MISS           :  1 ; /* bits 8:8 */
    cs_uint16 sTxLnPAI             :  1 ; /* bits 7:7 */
    cs_uint16 sTxLBPAI             :  1 ; /* bits 6:6 */
    cs_uint16 sRxPCPAI             :  1 ; /* bits 5:5 */
    cs_uint16 sRxLBPAI             :  1 ; /* bits 4:4 */
    cs_uint16 sRxL3PAI             :  1 ; /* bits 3:3 */
    cs_uint16 sRxL2PAI             :  1 ; /* bits 2:2 */
    cs_uint16 sRxL1PAI             :  1 ; /* bits 1:1 */
    cs_uint16 sRxL0PAI             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sRxL0PAI             :  1 ; /* bits 0:0 */
    cs_uint16 sRxL1PAI             :  1 ; /* bits 1:1 */
    cs_uint16 sRxL2PAI             :  1 ; /* bits 2:2 */
    cs_uint16 sRxL3PAI             :  1 ; /* bits 3:3 */
    cs_uint16 sRxLBPAI             :  1 ; /* bits 4:4 */
    cs_uint16 sRxPCPAI             :  1 ; /* bits 5:5 */
    cs_uint16 sTxLBPAI             :  1 ; /* bits 6:6 */
    cs_uint16 sTxLnPAI             :  1 ; /* bits 7:7 */
    cs_uint16 sRXCK_MISS           :  1 ; /* bits 8:8 */
    cs_uint16 sTXCK_MISS           :  1 ; /* bits 9:9 */
    cs_uint16 sXGLOCK              :  1 ; /* bits 10:10 */
    cs_uint16 sXGBAD_VCOCLK        :  1 ; /* bits 11:11 */
    cs_uint16 sXGDATA_DET          :  1 ; /* bits 12:12 */
    cs_uint16 sPRBSERR             :  1 ; /* bits 13:13 */
    cs_uint16 sPRBSCNT31           :  1 ; /* bits 14:14 */
    cs_uint16 sSFI41PERR           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_STATUS2_t;

#define LIF_INTERRUPT2                           0x1c01e
#define LIF_INTERRUPT2_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 iSFI41PERR           :  1 ; /* bits 15:15 */
    cs_uint16 iPRBSCNT31           :  1 ; /* bits 14:14 */
    cs_uint16 iPRBSERR             :  1 ; /* bits 13:13 */
    cs_uint16 iXGDATA_DET          :  1 ; /* bits 12:12 */
    cs_uint16 iXGBAD_VCOCLK        :  1 ; /* bits 11:11 */
    cs_uint16 iXGLOCK              :  1 ; /* bits 10:10 */
    cs_uint16 iTXCK_MISS           :  1 ; /* bits 9:9 */
    cs_uint16 iRXCK_MISS           :  1 ; /* bits 8:8 */
    cs_uint16 iTxLnPAI             :  1 ; /* bits 7:7 */
    cs_uint16 iTxLBPAI             :  1 ; /* bits 6:6 */
    cs_uint16 iRxPCPAI             :  1 ; /* bits 5:5 */
    cs_uint16 iRxLBPAI             :  1 ; /* bits 4:4 */
    cs_uint16 iRxL3PAI             :  1 ; /* bits 3:3 */
    cs_uint16 iRxL2PAI             :  1 ; /* bits 2:2 */
    cs_uint16 iRxL1PAI             :  1 ; /* bits 1:1 */
    cs_uint16 iRxL0PAI             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 iRxL0PAI             :  1 ; /* bits 0:0 */
    cs_uint16 iRxL1PAI             :  1 ; /* bits 1:1 */
    cs_uint16 iRxL2PAI             :  1 ; /* bits 2:2 */
    cs_uint16 iRxL3PAI             :  1 ; /* bits 3:3 */
    cs_uint16 iRxLBPAI             :  1 ; /* bits 4:4 */
    cs_uint16 iRxPCPAI             :  1 ; /* bits 5:5 */
    cs_uint16 iTxLBPAI             :  1 ; /* bits 6:6 */
    cs_uint16 iTxLnPAI             :  1 ; /* bits 7:7 */
    cs_uint16 iRXCK_MISS           :  1 ; /* bits 8:8 */
    cs_uint16 iTXCK_MISS           :  1 ; /* bits 9:9 */
    cs_uint16 iXGLOCK              :  1 ; /* bits 10:10 */
    cs_uint16 iXGBAD_VCOCLK        :  1 ; /* bits 11:11 */
    cs_uint16 iXGDATA_DET          :  1 ; /* bits 12:12 */
    cs_uint16 iPRBSERR             :  1 ; /* bits 13:13 */
    cs_uint16 iPRBSCNT31           :  1 ; /* bits 14:14 */
    cs_uint16 iSFI41PERR           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_INTERRUPT2_t;

#define LIF_RXADJUST4                            0x1c01f
#define LIF_RXADJUST4_dft                        0x01fd
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_XG_FREQ           :  2 ; /* bits 15:14 */
    cs_uint16 RX_VCOTUNE_FREQ      :  2 ; /* bits 13:12 */
    cs_uint16 RX_EQADJ             :  3 ; /* bits 11:9 */
    cs_uint16 RX_CKEN              :  1 ; /* bits 8:8 */
    cs_uint16 RX_CLKOUT_SEL        :  6 ; /* bits 7:2 */
    cs_uint16 RX_TCKIEN            :  1 ; /* bits 1:1 */
    cs_uint16 RX_CLK_INV           :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_CLK_INV           :  1 ; /* bits 0:0 */
    cs_uint16 RX_TCKIEN            :  1 ; /* bits 1:1 */
    cs_uint16 RX_CLKOUT_SEL        :  6 ; /* bits 7:2 */
    cs_uint16 RX_CKEN              :  1 ; /* bits 8:8 */
    cs_uint16 RX_EQADJ             :  3 ; /* bits 11:9 */
    cs_uint16 RX_VCOTUNE_FREQ      :  2 ; /* bits 13:12 */
    cs_uint16 RX_XG_FREQ           :  2 ; /* bits 15:14 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST4_t;
#define     RX_CLKOUT_SEL_SEL_622                         0x18
#define     RX_CLKOUT_SEL_SEL_38_8                        0x19
#define     RX_CLKOUT_SEL_SEL_155_52                      0x1a
#define     RX_CLKOUT_SEL_SEL_19_44                       0x1d
#define     RX_CLKOUT_SEL_SEL_311                         0x1c
#define     RX_CLKOUT_SEL_SEL_77_76                       0x1e
#define     RX_CLKOUT_SEL_SEL_9_98G                       0x02
#define     RX_CLKOUT_SEL_SEL_9_98Gs                      0x03
#define     RX_TCKIEN_USE_VCO                             0x00
#define     RX_TCKIEN_USE_EXTERNAL                        0x01
#define     RX_CLK_INV_RISING_EDGE                        0x00
#define     RX_CLK_INV_FALLING_EDGE                       0x01

#define LIF_RXADJUST5                            0x1c020
#define LIF_RXADJUST5_dft                        0xabc9
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_FILTINT           :  1 ; /* bits 15:15 */
    cs_uint16 RX_FILTEN            :  1 ; /* bits 14:14 */
    cs_uint16 RX_CPCURR            :  4 ; /* bits 13:10 */
    cs_uint16 RX_CPOFF             :  4 ; /* bits 9:6 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RX_PHSEL             :  5 ; /* bits 4:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_PHSEL             :  5 ; /* bits 4:0 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RX_CPOFF             :  4 ; /* bits 9:6 */
    cs_uint16 RX_CPCURR            :  4 ; /* bits 13:10 */
    cs_uint16 RX_FILTEN            :  1 ; /* bits 14:14 */
    cs_uint16 RX_FILTINT           :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST5_t;
#define     RX_FILTINT_DISABLE_LPFILTER                   0x00
#define     RX_FILTINT_ENABLE_LPFILTER                    0x01

#define LIF_RXADJUST6                            0x1c021
#define LIF_RXADJUST6_dft                        0x32ab
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_DIVRST_V          :  1 ; /* bits 15:15 */
    cs_uint16 RX_DIVRST_OVR        :  1 ; /* bits 14:14 */
    cs_uint16 RX_LOCK_RES          :  2 ; /* bits 13:12 */
    cs_uint16 RX_PD_MODE           :  1 ; /* bits 11:11 */
    cs_uint16 RX_FORCE_LOCK        :  1 ; /* bits 10:10 */
    cs_uint16 RX_PLLCAP            :  1 ; /* bits 9:9 */
    cs_uint16 RX_DIVSEL            :  3 ; /* bits 8:6 */
    cs_uint16 RX_FILTR             :  3 ; /* bits 5:3 */
    cs_uint16 RX_DATADL            :  3 ; /* bits 2:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_DATADL            :  3 ; /* bits 2:0 */
    cs_uint16 RX_FILTR             :  3 ; /* bits 5:3 */
    cs_uint16 RX_DIVSEL            :  3 ; /* bits 8:6 */
    cs_uint16 RX_PLLCAP            :  1 ; /* bits 9:9 */
    cs_uint16 RX_FORCE_LOCK        :  1 ; /* bits 10:10 */
    cs_uint16 RX_PD_MODE           :  1 ; /* bits 11:11 */
    cs_uint16 RX_LOCK_RES          :  2 ; /* bits 13:12 */
    cs_uint16 RX_DIVRST_OVR        :  1 ; /* bits 14:14 */
    cs_uint16 RX_DIVRST_V          :  1 ; /* bits 15:15 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST6_t;
#define     RX_LOCK_RES_LOW_RES                           0x00
#define     RX_LOCK_RES_MED_RES                           0x01
#define     RX_LOCK_RES_HIGH_RES                          0x02
#define     RX_LOCK_RES_VERYHIGH_RES                      0x03
#define     RX_PD_MODE_PFD                                0x00
#define     RX_PD_MODE_PD                                 0x01
#define     RX_FORCE_LOCK_NORMAL                          0x00
#define     RX_FORCE_LOCK_OVERRIDE                        0x01
#define     RX_PLLCAP_LOW                                 0x00
#define     RX_PLLCAP_HIGH                                0x01
#define     RX_DIVSEL_SEL_622                             0x00
#define     RX_DIVSEL_SEL_38_8                            0x01
#define     RX_DIVSEL_SEL_155_52                          0x02
#define     RX_DIVSEL_SEL_19_44                           0x05
#define     RX_DIVSEL_SEL_311                             0x04
#define     RX_DIVSEL_SEL_77_76                           0x06

#define LIF_RXADJUST7                            0x1c022
#define LIF_RXADJUST7_dft                        0x0048
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 RX_AMPPD_OVR         :  2 ; /* bits 14:13 */
    cs_uint16 RX_FLITPN_SHORTOVR   :  2 ; /* bits 12:11 */
    cs_uint16 RX_FREQ_EXT          :  2 ; /* bits 10:9 */
    cs_uint16 RX_FORCE_FREQ        :  1 ; /* bits 8:8 */
    cs_uint16 RX_FREQ_THRESH       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_FREQ_THRESH       :  8 ; /* bits 7:0 */
    cs_uint16 RX_FORCE_FREQ        :  1 ; /* bits 8:8 */
    cs_uint16 RX_FREQ_EXT          :  2 ; /* bits 10:9 */
    cs_uint16 RX_FLITPN_SHORTOVR   :  2 ; /* bits 12:11 */
    cs_uint16 RX_AMPPD_OVR         :  2 ; /* bits 14:13 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST7_t;
#define     RX_AMPPD_OVR_USE_ALGORITHM                    0x00
#define     RX_AMPPD_OVR_FORCE_OFF                        0x02
#define     RX_AMPPD_OVR_FORCE_ON                         0x03
#define     RX_FLITPN_SHORTOVR_USE_ALGORITHM              0x00
#define     RX_FLITPN_SHORTOVR_FORCE_OFF                  0x02
#define     RX_FLITPN_SHORTOVR_FORCE_ON                   0x03
#define     RX_FORCE_FREQ_FROM_ALGORITHM                  0x00
#define     RX_FORCE_FREQ_FROM_RX_FREQ_EXT                0x01

#define LIF_RXADJUST8                            0x1c023
#define LIF_RXADJUST8_dft                        0x1121
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_LOCK_THRESH       :  8 ; /* bits 15:8 */
    cs_uint16 RX_LOCK_OFFSET       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_LOCK_OFFSET       :  8 ; /* bits 7:0 */
    cs_uint16 RX_LOCK_THRESH       :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST8_t;

#define LIF_TXADJUST3                            0x1c024
#define LIF_TXADJUST3_dft                        0x2a58
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TX_CLKREF_SEL        :  1 ; /* bits 14:14 */
    cs_uint16 TX_I400UA_EN         :  1 ; /* bits 13:13 */
    cs_uint16 TX_CLKINV            :  1 ; /* bits 12:12 */
    cs_uint16 TX_CKEN              :  1 ; /* bits 11:11 */
    cs_uint16 TX_CLKOUT_SEL        :  2 ; /* bits 10:9 */
    cs_uint16 TX_CKOUT_EN          :  1 ; /* bits 8:8 */
    cs_uint16 TX_LEVEL             :  5 ; /* bits 7:3 */
    cs_uint16 TX_PEAK              :  2 ; /* bits 2:1 */
    cs_uint16 TX_TCKIEN            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_TCKIEN            :  1 ; /* bits 0:0 */
    cs_uint16 TX_PEAK              :  2 ; /* bits 2:1 */
    cs_uint16 TX_LEVEL             :  5 ; /* bits 7:3 */
    cs_uint16 TX_CKOUT_EN          :  1 ; /* bits 8:8 */
    cs_uint16 TX_CLKOUT_SEL        :  2 ; /* bits 10:9 */
    cs_uint16 TX_CKEN              :  1 ; /* bits 11:11 */
    cs_uint16 TX_CLKINV            :  1 ; /* bits 12:12 */
    cs_uint16 TX_I400UA_EN         :  1 ; /* bits 13:13 */
    cs_uint16 TX_CLKREF_SEL        :  1 ; /* bits 14:14 */
    cs_uint16 rsrvd1               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_TXADJUST3_t;
#define     TX_CLKREF_SEL_PLL_CLKREF                      0x00
#define     TX_CLKREF_SEL_PLL_LOOPTIME                    0x01
#define     TX_I400UA_EN_200uA                            0x00
#define     TX_I400UA_EN_400uA                            0x01
#define     TX_CLKOUT_SEL_USE_STX_CLK                     0x00
#define     TX_CLKOUT_SEL_USE_STX_REF                     0x01
#define     TX_CLKOUT_SEL_USE_155_CLK                     0x02
#define     TX_CLKOUT_SEL_USE_10G_CLK                     0x03
#define     TX_TCKIEN_USE_VCO                             0x00
#define     TX_TCKIEN_USE_EXTERNAL                        0x01

#define LIF_TXADJUST4                            0x1c025
#define LIF_TXADJUST4_dft                        0x0048
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 TX_RES_EN            :  3 ; /* bits 15:13 */
    cs_uint16 TX_FLTPN_OVRIDE      :  2 ; /* bits 12:11 */
    cs_uint16 TX_FREQ_EXT          :  2 ; /* bits 10:9 */
    cs_uint16 TX_FORCE_FREQ        :  1 ; /* bits 8:8 */
    cs_uint16 TX_FREQ_THRESH       :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_FREQ_THRESH       :  8 ; /* bits 7:0 */
    cs_uint16 TX_FORCE_FREQ        :  1 ; /* bits 8:8 */
    cs_uint16 TX_FREQ_EXT          :  2 ; /* bits 10:9 */
    cs_uint16 TX_FLTPN_OVRIDE      :  2 ; /* bits 12:11 */
    cs_uint16 TX_RES_EN            :  3 ; /* bits 15:13 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_TXADJUST4_t;
#define     TX_RES_EN_1Kohm                               0x00
#define     TX_RES_EN_100ohm                              0x04
#define     TX_RES_EN_250ohm                              0x06
#define     TX_RES_EN_80ohm                               0x07
#define     TX_FLTPN_OVRIDE_COURSE                        0x00
#define     TX_FLTPN_OVRIDE_OFF                           0x02
#define     TX_FLTPN_OVRIDE_ON                            0x03
#define     TX_FORCE_FREQ_FROM_ALGORITHM                  0x00
#define     TX_FORCE_FREQ_FROM_TX_FREQ_EXT                0x01

#define LIF_SPARE2                               0x1c026
#define LIF_SPARE2_dft                           0x0f0f
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RX_SPARE             :  8 ; /* bits 15:8 */
    cs_uint16 TX_SPARE             :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_SPARE             :  8 ; /* bits 7:0 */
    cs_uint16 RX_SPARE             :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SPARE2_t;

#define LIF_INTERFACE                            0x1c027
#define LIF_INTERFACE_dft                        0x0002
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 INTERFACE_SEL        :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 INTERFACE_SEL        :  2 ; /* bits 1:0 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_INTERFACE_t;
#define     INTERFACE_SEL_SFI42_XAUI                      0x00
#define     INTERFACE_SEL_SFI41_XSBI                      0x02
#define     INTERFACE_SEL_10G                             0x03

#define LIF_LBSWAP                               0x1c028
#define LIF_LBSWAP_dft                           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 XGE_LPTIME_EN        :  1 ; /* bits 4:4 */
    cs_uint16 TX_LSAWP             :  1 ; /* bits 3:3 */
    cs_uint16 RX_LSWAP             :  1 ; /* bits 2:2 */
    cs_uint16 TX2RX_LB             :  1 ; /* bits 1:1 */
    cs_uint16 RX2TX_LB             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX2TX_LB             :  1 ; /* bits 0:0 */
    cs_uint16 TX2RX_LB             :  1 ; /* bits 1:1 */
    cs_uint16 RX_LSWAP             :  1 ; /* bits 2:2 */
    cs_uint16 TX_LSAWP             :  1 ; /* bits 3:3 */
    cs_uint16 XGE_LPTIME_EN        :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_LBSWAP_t;

#define LIF_CKMASK                               0x1c029
#define LIF_CKMASK_dft                           0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 MASK_AIS             :  1 ; /* bits 2:2 */
    cs_uint16 MASK_LOF             :  1 ; /* bits 1:1 */
    cs_uint16 MASK_LOS             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 MASK_LOS             :  1 ; /* bits 0:0 */
    cs_uint16 MASK_LOF             :  1 ; /* bits 1:1 */
    cs_uint16 MASK_AIS             :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_CKMASK_t;

#define LIF_PRBSCNT_LSB                          0x1c02a
#define LIF_PRBSCNT_LSB_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PRBSCNT_LSB          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PRBSCNT_LSB          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBSCNT_LSB_t;

#define LIF_PRBSCNT_MSB                          0x1c02b
#define LIF_PRBSCNT_MSB_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 PRBSCNT_MSB          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PRBSCNT_MSB          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBSCNT_MSB_t;

#define LIF_PRBSPROV                             0x1c02c
#define LIF_PRBSPROV_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 RXPRBS_EN            :  1 ; /* bits 7:7 */
    cs_uint16 RXPBRS_INV           :  1 ; /* bits 6:6 */
    cs_uint16 RXPRBS_MODE          :  2 ; /* bits 5:4 */
    cs_uint16 TXPRBS_EN            :  1 ; /* bits 3:3 */
    cs_uint16 TXPRBS_INV           :  1 ; /* bits 2:2 */
    cs_uint16 TXPRBS_MODE          :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXPRBS_MODE          :  2 ; /* bits 1:0 */
    cs_uint16 TXPRBS_INV           :  1 ; /* bits 2:2 */
    cs_uint16 TXPRBS_EN            :  1 ; /* bits 3:3 */
    cs_uint16 RXPRBS_MODE          :  2 ; /* bits 5:4 */
    cs_uint16 RXPBRS_INV           :  1 ; /* bits 6:6 */
    cs_uint16 RXPRBS_EN            :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBSPROV_t;
#define     RXPRBS_MODE_PRBS_31                           0x00
#define     RXPRBS_MODE_PRBS_23                           0x01
#define     RXPRBS_MODE_PRBS_15                           0x02
#define     RXPRBS_MODE_PRBS_7                            0x03
#define     TXPRBS_MODE_PRBS_31                           0x00
#define     TXPRBS_MODE_PRBS_23                           0x01
#define     TXPRBS_MODE_PRBS_15                           0x02
#define     TXPRBS_MODE_PRBS_7                            0x03

#define LIF_PRBS_CNTL                            0x1c02d
#define LIF_PRBS_CNTL_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 11 ;
    cs_uint16 LDPRBS_STAT          :  1 ; /* bits 4:4 */
    cs_uint16 INS_ERR              :  1 ; /* bits 3:3 */
    cs_uint16 INSONEBIT_ERR        :  1 ; /* bits 2:2 */
    cs_uint16 INSERR_ONCE          :  1 ; /* bits 1:1 */
    cs_uint16 INSONEBITERR_ONCE    :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 INSONEBITERR_ONCE    :  1 ; /* bits 0:0 */
    cs_uint16 INSERR_ONCE          :  1 ; /* bits 1:1 */
    cs_uint16 INSONEBIT_ERR        :  1 ; /* bits 2:2 */
    cs_uint16 INS_ERR              :  1 ; /* bits 3:3 */
    cs_uint16 LDPRBS_STAT          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               : 11 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRBS_CNTL_t;

#define LIF_XGCNTL1                              0x1c02e
#define LIF_XGCNTL1_dft                          0x001a
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 RX_LPBK              :  1 ; /* bits 5:5 */
    cs_uint16 USE_DATA_DET         :  1 ; /* bits 4:4 */
    cs_uint16 TX_CKREF_DIV2        :  2 ; /* bits 3:2 */
    cs_uint16 TX_CKREF_DIV1        :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_CKREF_DIV1        :  2 ; /* bits 1:0 */
    cs_uint16 TX_CKREF_DIV2        :  2 ; /* bits 3:2 */
    cs_uint16 USE_DATA_DET         :  1 ; /* bits 4:4 */
    cs_uint16 RX_LPBK              :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_XGCNTL1_t;
#define     RX_LPBK_DISABLE                               0x00
#define     RX_LPBK_ENABLE                                0x01
#define     USE_DATA_DET_DISABLE                          0x00
#define     USE_DATA_DET_OVERRIDE                         0x01
#define     TX_CKREF_DIV2_CK155_52                        0x00
#define     TX_CKREF_DIV2_CK311                           0x01
#define     TX_CKREF_DIV2_CK622                           0x02
#define     TX_CKREF_DIV1_CK155_52                        0x00
#define     TX_CKREF_DIV1_CK311                           0x01
#define     TX_CKREF_DIV1_CK622                           0x02

#define LIF_SFI42CNTL                            0x1c02f
#define LIF_SFI42CNTL_dft                        0x0001
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 12 ;
    cs_uint16 USEDATA_DET          :  1 ; /* bits 3:3 */
    cs_uint16 TX2RX_LB             :  1 ; /* bits 2:2 */
    cs_uint16 TXCKREF_DIV          :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXCKREF_DIV          :  2 ; /* bits 1:0 */
    cs_uint16 TX2RX_LB             :  1 ; /* bits 2:2 */
    cs_uint16 USEDATA_DET          :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               : 12 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SFI42CNTL_t;
#define     TX2RX_LB_DISABLE                              0x00
#define     TX2RX_LB_ENABLE                               0x01
#define     TXCKREF_DIV_CK77_76                           0x00
#define     TXCKREF_DIV_CK155_52                          0x01
#define     TXCKREF_DIV_CK311                             0x02
#define     TXCKREF_DIV_CK622                             0x03

#define LIF_SFI41PAR                             0x1c030
#define LIF_SFI41PAR_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 INS_PARERR           :  1 ; /* bits 2:2 */
    cs_uint16 PARDIS               :  1 ; /* bits 1:1 */
    cs_uint16 PAR_MODE             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PAR_MODE             :  1 ; /* bits 0:0 */
    cs_uint16 PARDIS               :  1 ; /* bits 1:1 */
    cs_uint16 INS_PARERR           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_SFI41PAR_t;
#define     PAR_MODE_EVEN                                 0x00
#define     PAR_MODE_ODD                                  0x01

#define LIF_PRIVATE1                             0x1c031
#define LIF_PRIVATE1_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 RXLBSWAP             :  4 ; /* bits 15:12 */
    cs_uint16 RXBINV               :  4 ; /* bits 11:8 */
    cs_uint16 TXLBSWAP             :  4 ; /* bits 7:4 */
    cs_uint16 TXBINV               :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TXBINV               :  4 ; /* bits 3:0 */
    cs_uint16 TXLBSWAP             :  4 ; /* bits 7:4 */
    cs_uint16 RXBINV               :  4 ; /* bits 11:8 */
    cs_uint16 RXLBSWAP             :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRIVATE1_t;

#define LIF_PRIVATE2                             0x1c032
#define LIF_PRIVATE2_dft                         0x0101
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 TxLNRPR              :  1 ; /* bits 11:11 */
    cs_uint16 TxLBRPR              :  1 ; /* bits 10:10 */
    cs_uint16 TXBSWAP              :  1 ; /* bits 9:9 */
    cs_uint16 TXCK_EN              :  1 ; /* bits 8:8 */
    cs_uint16 RxL3RPR              :  1 ; /* bits 7:7 */
    cs_uint16 RxL2RPR              :  1 ; /* bits 6:6 */
    cs_uint16 RxL1RPR              :  1 ; /* bits 5:5 */
    cs_uint16 RxL0RPR              :  1 ; /* bits 4:4 */
    cs_uint16 RxPCRPR              :  1 ; /* bits 3:3 */
    cs_uint16 RxLBRPR              :  1 ; /* bits 2:2 */
    cs_uint16 RXBSWAP              :  1 ; /* bits 1:1 */
    cs_uint16 RXCK_EN              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RXCK_EN              :  1 ; /* bits 0:0 */
    cs_uint16 RXBSWAP              :  1 ; /* bits 1:1 */
    cs_uint16 RxLBRPR              :  1 ; /* bits 2:2 */
    cs_uint16 RxPCRPR              :  1 ; /* bits 3:3 */
    cs_uint16 RxL0RPR              :  1 ; /* bits 4:4 */
    cs_uint16 RxL1RPR              :  1 ; /* bits 5:5 */
    cs_uint16 RxL2RPR              :  1 ; /* bits 6:6 */
    cs_uint16 RxL3RPR              :  1 ; /* bits 7:7 */
    cs_uint16 TXCK_EN              :  1 ; /* bits 8:8 */
    cs_uint16 TXBSWAP              :  1 ; /* bits 9:9 */
    cs_uint16 TxLBRPR              :  1 ; /* bits 10:10 */
    cs_uint16 TxLNRPR              :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_PRIVATE2_t;

#define LIF_RXADJUST9                            0x1c033
#define LIF_RXADJUST9_dft                        0x0008
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 RX_IVCOEN            :  2 ; /* bits 5:4 */
    cs_uint16 RX_FREQ48            :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 RX_FREQ48            :  4 ; /* bits 3:0 */
    cs_uint16 RX_IVCOEN            :  2 ; /* bits 5:4 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_RXADJUST9_t;
#define     RX_IVCOEN_RXNO_INC                            0x00
#define     RX_IVCOEN_RXINC1_350                          0x01
#define     RX_IVCOEN_RXINC2_350                          0x02
#define     RX_IVCOEN_RXINC_700                           0x03

#define LIF_TXADJUST5                            0x1c034
#define LIF_TXADJUST5_dft                        0x0010
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  4 ;
    cs_uint16 TX_XG_FREQ           :  2 ; /* bits 11:10 */
    cs_uint16 TX_VCOTUNE_FREQ      :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TX_IVCOEN            :  2 ; /* bits 6:5 */
    cs_uint16 TX_LOWERCM           :  1 ; /* bits 4:4 */
    cs_uint16 TX_BWREDUCT          :  4 ; /* bits 3:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TX_BWREDUCT          :  4 ; /* bits 3:0 */
    cs_uint16 TX_LOWERCM           :  1 ; /* bits 4:4 */
    cs_uint16 TX_IVCOEN            :  2 ; /* bits 6:5 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 TX_VCOTUNE_FREQ      :  2 ; /* bits 9:8 */
    cs_uint16 TX_XG_FREQ           :  2 ; /* bits 11:10 */
    cs_uint16 rsrvd2               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_TXADJUST5_t;
#define     TX_IVCOEN_TXNO_INC                            0x00
#define     TX_IVCOEN_TXINC1_350                          0x01
#define     TX_IVCOEN_TXINC2_350                          0x02
#define     TX_IVCOEN_TXINC_700                           0x03
#define     TX_LOWERCM_DONT_LOWER                         0x00
#define     TX_LOWERCM_LOWER                              0x01

#define LIF_INT_SOURCE                           0x1c035
#define LIF_INT_SOURCE_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 LIF_INT              :  1 ; /* bits 2:2 */
    cs_uint16 XGXS_INT             :  1 ; /* bits 1:1 */
    cs_uint16 PCS_INT              :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 PCS_INT              :  1 ; /* bits 0:0 */
    cs_uint16 XGXS_INT             :  1 ; /* bits 1:1 */
    cs_uint16 LIF_INT              :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_INT_SOURCE_t;

#define LIF_FMRO_SEL                             0x1c036
#define LIF_FMRO_SEL_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 10 ;
    cs_uint16 FMRO_VIEW            :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 FMRO_VIEW            :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               : 10 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} LIF_FMRO_SEL_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * PCS6::tx
 */

#define PCS6_TX_TxCntrl                          0x1c040
#define PCS6_TX_TxCntrl_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 square_tx_pat        :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 pseudo_tx_inv        :  1 ; /* bits 10:10 */
    cs_uint16 pcs6_tx_test         :  2 ; /* bits 9:8 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 test_tx_err          :  1 ; /* bits 4:4 */
    cs_uint16 scram_tx_dis         :  1 ; /* bits 3:3 */
    cs_uint16 sequ_tx_ena          :  1 ; /* bits 2:2 */
    cs_uint16 txcode_control       :  2 ; /* bits 1:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 txcode_control       :  2 ; /* bits 1:0 */
    cs_uint16 sequ_tx_ena          :  1 ; /* bits 2:2 */
    cs_uint16 scram_tx_dis         :  1 ; /* bits 3:3 */
    cs_uint16 test_tx_err          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 pcs6_tx_test         :  2 ; /* bits 9:8 */
    cs_uint16 pseudo_tx_inv        :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 square_tx_pat        :  3 ; /* bits 14:12 */
    cs_uint16 rsrvd3               :  1 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_TxCntrl_t;
#define     square_tx_pat_Low                             0x00
#define     square_tx_pat_Square1                         0x01
#define     square_tx_pat_Square2                         0x02
#define     square_tx_pat_Square4                         0x03
#define     square_tx_pat_Square8                         0x04
#define     square_tx_pat_Pulse0                          0x05
#define     square_tx_pat_Pulse1                          0x06
#define     square_tx_pat_High                            0x07
#define     pcs6_tx_test_Normal                           0x00
#define     pcs6_tx_test_PRBS31                           0x01
#define     pcs6_tx_test_Square                           0x02
#define     pcs6_tx_test_Pseudo                           0x03
#define     txcode_control_Normal                         0x00
#define     txcode_control_Invert                         0x01
#define     txcode_control_Force_00                       0x02
#define     txcode_control_Force_11                       0x03

#define PCS6_TX_TxSta                            0x1c041
#define PCS6_TX_TxSta_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               : 13 ;
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_TxSta_t;

#define PCS6_TX_TxInt                            0x1c042
#define PCS6_TX_TxInt_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_TxInt_t;

#define PCS6_TX_TxIntMask                        0x1c043
#define PCS6_TX_TxIntMask_dft                    0x0007
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 13 ;
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               : 13 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_TxIntMask_t;

#define PCS6_TX_SOS_A                            0x1c044
#define PCS6_TX_SOS_A_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 sequ_txd_1           :  8 ; /* bits 15:8 */
    cs_uint16 sequ_txd_2           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sequ_txd_2           :  8 ; /* bits 7:0 */
    cs_uint16 sequ_txd_1           :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_SOS_A_t;

#define PCS6_TX_SOS_B                            0x1c045
#define PCS6_TX_SOS_B_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 sequ_txd_3           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sequ_txd_3           :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_SOS_B_t;

#define PCS6_TX_GoodPkt                          0x1c046
#define PCS6_TX_GoodPkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 good_pkt_tx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 good_pkt_tx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_GoodPkt_t;

#define PCS6_TX_ErrPkt                           0x1c047
#define PCS6_TX_ErrPkt_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_pkt_tx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_pkt_tx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_ErrPkt_t;

#define PCS6_TX_Seed_A_3                         0x1c048
#define PCS6_TX_Seed_A_3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 pseudo_tx_A3         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_A3         : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_A_3_t;

#define PCS6_TX_Seed_A_2                         0x1c049
#define PCS6_TX_Seed_A_2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_A2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_A2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_A_2_t;

#define PCS6_TX_Seed_A_1                         0x1c04a
#define PCS6_TX_Seed_A_1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_A1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_A1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_A_1_t;

#define PCS6_TX_Seed_A_0                         0x1c04b
#define PCS6_TX_Seed_A_0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_A0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_A0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_A_0_t;

#define PCS6_TX_Seed_B_3                         0x1c04c
#define PCS6_TX_Seed_B_3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 pseudo_tx_B3         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_B3         : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_B_3_t;

#define PCS6_TX_Seed_B_2                         0x1c04d
#define PCS6_TX_Seed_B_2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_B2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_B2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_B_2_t;

#define PCS6_TX_Seed_B_1                         0x1c04e
#define PCS6_TX_Seed_B_1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_B1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_B1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_B_1_t;

#define PCS6_TX_Seed_B_0                         0x1c04f
#define PCS6_TX_Seed_B_0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_B0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_B0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_B_0_t;

#define PCS6_TX_Seed_D_3                         0x1c050
#define PCS6_TX_Seed_D_3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_D3         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_D3         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_D_3_t;

#define PCS6_TX_Seed_D_2                         0x1c051
#define PCS6_TX_Seed_D_2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_D2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_D2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_D_2_t;

#define PCS6_TX_Seed_D_1                         0x1c052
#define PCS6_TX_Seed_D_1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_D1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_D1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_D_1_t;

#define PCS6_TX_Seed_D_0                         0x1c053
#define PCS6_TX_Seed_D_0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_tx_D0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_tx_D0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_Seed_D_0_t;

#define PCS6_TX_FMRO                             0x1c054
#define PCS6_TX_FMRO_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 fmro_view_sel        :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 fmro_rx_view         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 fmro_rx_view         :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 fmro_view_sel        :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_TX_FMRO_t;
#define     fmro_view_sel_PCS6_XGMII_0                    0x00
#define     fmro_view_sel_PCS6_XGMII_1                    0x01
#define     fmro_view_sel_PCS6_XGMII_2                    0x02
#define     fmro_view_sel_PCS6_XGMII_3                    0x03
#define     fmro_view_sel_PCS6_CODE_0                     0x04
#define     fmro_view_sel_PCS6_CODE_1                     0x05
#define     fmro_view_sel_PCS6_CODE_2                     0x06
#define     fmro_view_sel_PCS6_CODE_3                     0x07
#define     fmro_view_sel_PCS6_LINE_0                     0x08
#define     fmro_view_sel_PCS6_LINE_1                     0x09
#define     fmro_rx_view_PCS6_Transmit                    0x00
#define     fmro_rx_view_PCS6_Receive                     0x01


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * PCS6::rx
 */

#define PCS6_RX_RxCntrl                          0x1c060
#define PCS6_RX_RxCntrl_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  5 ;
    cs_uint16 pseudo_rx_inv        :  1 ; /* bits 10:10 */
    cs_uint16 pcs6_rx_test         :  2 ; /* bits 9:8 */
    cs_uint16 pcs6_ddsa_enable     :  1 ; /* bits 7:7 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 descram_rx_dis       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd1               :  3 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 descram_rx_dis       :  1 ; /* bits 3:3 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 pcs6_ddsa_enable     :  1 ; /* bits 7:7 */
    cs_uint16 pcs6_rx_test         :  2 ; /* bits 9:8 */
    cs_uint16 pseudo_rx_inv        :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd3               :  5 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_RxCntrl_t;
#define     pcs6_rx_test_Normal                           0x00
#define     pcs6_rx_test_PRBS31                           0x01
#define     pcs6_rx_test_Reserved                         0x02
#define     pcs6_rx_test_Pseudo                           0x03

#define PCS6_RX_RxStat                           0x1c061
#define PCS6_RX_RxStat_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd4               :  4 ;
    cs_uint16 PatSyncS             :  1 ; /* bits 11:11 */
    cs_uint16 RxSOSS               :  1 ; /* bits 10:10 */
    cs_uint16 BerHighS             :  1 ; /* bits 9:9 */
    cs_uint16 SyncDetS             :  1 ; /* bits 8:8 */
    cs_uint16 ErrorBERSat          :  1 ; /* bits 7:7 */
    cs_uint16 ErrorPatSat          :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 ErrorDecSat          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 ErrorDecSat          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 ErrorPatSat          :  1 ; /* bits 6:6 */
    cs_uint16 ErrorBERSat          :  1 ; /* bits 7:7 */
    cs_uint16 SyncDetS             :  1 ; /* bits 8:8 */
    cs_uint16 BerHighS             :  1 ; /* bits 9:9 */
    cs_uint16 RxSOSS               :  1 ; /* bits 10:10 */
    cs_uint16 PatSyncS             :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd4               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_RxStat_t;

#define PCS6_RX_RxInt                            0x1c062
#define PCS6_RX_RxInt_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 PatSyncI             :  1 ; /* bits 11:11 */
    cs_uint16 RxSOSI               :  1 ; /* bits 10:10 */
    cs_uint16 BerHighI             :  1 ; /* bits 9:9 */
    cs_uint16 SyncDetI             :  1 ; /* bits 8:8 */
    cs_uint16 ErrorBERSatI         :  1 ; /* bits 7:7 */
    cs_uint16 ErrorPatSatI         :  1 ; /* bits 6:6 */
    cs_uint16 ErrorPatI            :  1 ; /* bits 5:5 */
    cs_uint16 ErrorDecSatI         :  1 ; /* bits 4:4 */
    cs_uint16 ErrorDecI            :  1 ; /* bits 3:3 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorDecI            :  1 ; /* bits 3:3 */
    cs_uint16 ErrorDecSatI         :  1 ; /* bits 4:4 */
    cs_uint16 ErrorPatI            :  1 ; /* bits 5:5 */
    cs_uint16 ErrorPatSatI         :  1 ; /* bits 6:6 */
    cs_uint16 ErrorBERSatI         :  1 ; /* bits 7:7 */
    cs_uint16 SyncDetI             :  1 ; /* bits 8:8 */
    cs_uint16 BerHighI             :  1 ; /* bits 9:9 */
    cs_uint16 RxSOSI               :  1 ; /* bits 10:10 */
    cs_uint16 PatSyncI             :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_RxInt_t;

#define PCS6_RX_RxIntMask                        0x1c063
#define PCS6_RX_RxIntMask_dft                    0x0fff
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 PatSyncM             :  1 ; /* bits 11:11 */
    cs_uint16 RxSOSM               :  1 ; /* bits 10:10 */
    cs_uint16 BerHighM             :  1 ; /* bits 9:9 */
    cs_uint16 SyncDetM             :  1 ; /* bits 8:8 */
    cs_uint16 ErrorBERSatM         :  1 ; /* bits 7:7 */
    cs_uint16 ErrorPatSatM         :  1 ; /* bits 6:6 */
    cs_uint16 ErrorPatM            :  1 ; /* bits 5:5 */
    cs_uint16 ErrorDecSatM         :  1 ; /* bits 4:4 */
    cs_uint16 ErrorDecM            :  1 ; /* bits 3:3 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorDecM            :  1 ; /* bits 3:3 */
    cs_uint16 ErrorDecSatM         :  1 ; /* bits 4:4 */
    cs_uint16 ErrorPatM            :  1 ; /* bits 5:5 */
    cs_uint16 ErrorPatSatM         :  1 ; /* bits 6:6 */
    cs_uint16 ErrorBERSatM         :  1 ; /* bits 7:7 */
    cs_uint16 SyncDetM             :  1 ; /* bits 8:8 */
    cs_uint16 BerHighM             :  1 ; /* bits 9:9 */
    cs_uint16 RxSOSM               :  1 ; /* bits 10:10 */
    cs_uint16 PatSyncM             :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd1               :  4 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_RxIntMask_t;

#define PCS6_RX_SOS_A                            0x1c064
#define PCS6_RX_SOS_A_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 sequ_rxd_1           :  8 ; /* bits 15:8 */
    cs_uint16 sequ_rxd_2           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sequ_rxd_2           :  8 ; /* bits 7:0 */
    cs_uint16 sequ_rxd_1           :  8 ; /* bits 15:8 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_SOS_A_t;

#define PCS6_RX_SOS_B                            0x1c065
#define PCS6_RX_SOS_B_dft                        0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 sequ_rxd_3           :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sequ_rxd_3           :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_SOS_B_t;

#define PCS6_RX_GoodPkt                          0x1c066
#define PCS6_RX_GoodPkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 good_pkt_rx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 good_pkt_rx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_GoodPkt_t;

#define PCS6_RX_ErrPkt                           0x1c067
#define PCS6_RX_ErrPkt_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_pkt_rx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_pkt_rx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_ErrPkt_t;

#define PCS6_RX_ErrPat                           0x1c068
#define PCS6_RX_ErrPat_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_pat_rx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_pat_rx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_ErrPat_t;

#define PCS6_RX_ErrDec                           0x1c069
#define PCS6_RX_ErrDec_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_dec_rx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_dec_rx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_ErrDec_t;

#define PCS6_RX_ErrBer                           0x1c06a
#define PCS6_RX_ErrBer_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_ber_rx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_ber_rx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_ErrBer_t;

#define PCS6_RX_SynOff                           0x1c06b
#define PCS6_RX_SynOff_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 sync_ber_off         :  4 ; /* bits 15:12 */
    cs_uint16 sync_invalid_off     :  4 ; /* bits 11:8 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 sync_valid_off       :  6 ; /* bits 5:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 sync_valid_off       :  6 ; /* bits 5:0 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 sync_invalid_off     :  4 ; /* bits 11:8 */
    cs_uint16 sync_ber_off         :  4 ; /* bits 15:12 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_SynOff_t;

#define PCS6_RX_Seed_A_3                         0x1c06c
#define PCS6_RX_Seed_A_3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 pseudo_rx_A3         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_A3         : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_A_3_t;

#define PCS6_RX_Seed_A_2                         0x1c06d
#define PCS6_RX_Seed_A_2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_A2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_A2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_A_2_t;

#define PCS6_RX_Seed_A_1                         0x1c06e
#define PCS6_RX_Seed_A_1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_A1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_A1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_A_1_t;

#define PCS6_RX_Seed_A_0                         0x1c06f
#define PCS6_RX_Seed_A_0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_A0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_A0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_A_0_t;

#define PCS6_RX_Seed_B_3                         0x1c070
#define PCS6_RX_Seed_B_3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  6 ;
    cs_uint16 pseudo_rx_B3         : 10 ; /* bits 9:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_B3         : 10 ; /* bits 9:0 */
    cs_uint16 rsrvd1               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_B_3_t;

#define PCS6_RX_Seed_B_2                         0x1c071
#define PCS6_RX_Seed_B_2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_B2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_B2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_B_2_t;

#define PCS6_RX_Seed_B_1                         0x1c072
#define PCS6_RX_Seed_B_1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_B1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_B1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_B_1_t;

#define PCS6_RX_Seed_B_0                         0x1c073
#define PCS6_RX_Seed_B_0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_B0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_B0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_B_0_t;

#define PCS6_RX_Seed_D_3                         0x1c074
#define PCS6_RX_Seed_D_3_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_D3         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_D3         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_D_3_t;

#define PCS6_RX_Seed_D_2                         0x1c075
#define PCS6_RX_Seed_D_2_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_D2         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_D2         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_D_2_t;

#define PCS6_RX_Seed_D_1                         0x1c076
#define PCS6_RX_Seed_D_1_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_D1         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_D1         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_D_1_t;

#define PCS6_RX_Seed_D_0                         0x1c077
#define PCS6_RX_Seed_D_0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 pseudo_rx_D0         : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 pseudo_rx_D0         : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} PCS6_RX_Seed_D_0_t;


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* PCS6 */

typedef struct {
  PCS6_TX_TxCntrl_t                        TxCntrl;                       /* addr: 0x0000 */
  PCS6_TX_TxSta_t                          TxSta;                         /* addr: 0x0001 */
  PCS6_TX_TxInt_t                          TxInt;                         /* addr: 0x0002 */
  PCS6_TX_TxIntMask_t                      TxIntMask;                     /* addr: 0x0003 */
  PCS6_TX_SOS_A_t                          tx_SOS_A;                      /* addr: 0x0004 */
  PCS6_TX_SOS_B_t                          tx_SOS_B;                      /* addr: 0x0005 */
  PCS6_TX_GoodPkt_t                        tx_GoodPkt;                    /* addr: 0x0006 */
  PCS6_TX_ErrPkt_t                         tx_ErrPkt;                     /* addr: 0x0007 */
  PCS6_TX_Seed_A_3_t                       tx_Seed_A_3;                   /* addr: 0x0008 */
  PCS6_TX_Seed_A_2_t                       tx_Seed_A_2;                   /* addr: 0x0009 */
  PCS6_TX_Seed_A_1_t                       tx_Seed_A_1;                   /* addr: 0x000a */
  PCS6_TX_Seed_A_0_t                       tx_Seed_A_0;                   /* addr: 0x000b */
  PCS6_TX_Seed_B_3_t                       tx_Seed_B_3;                   /* addr: 0x000c */
  PCS6_TX_Seed_B_2_t                       tx_Seed_B_2;                   /* addr: 0x000d */
  PCS6_TX_Seed_B_1_t                       tx_Seed_B_1;                   /* addr: 0x000e */
  PCS6_TX_Seed_B_0_t                       tx_Seed_B_0;                   /* addr: 0x000f */
  PCS6_TX_Seed_D_3_t                       tx_Seed_D_3;                   /* addr: 0x0010 */
  PCS6_TX_Seed_D_2_t                       tx_Seed_D_2;                   /* addr: 0x0011 */
  PCS6_TX_Seed_D_1_t                       tx_Seed_D_1;                   /* addr: 0x0012 */
  PCS6_TX_Seed_D_0_t                       tx_Seed_D_0;                   /* addr: 0x0013 */
  PCS6_TX_FMRO_t                           FMRO;                          /* addr: 0x0014 */
  cs_uint16                                rsrvd1[11];
  PCS6_RX_RxCntrl_t                        RxCntrl;                       /* addr: 0x0020 */
  PCS6_RX_RxStat_t                         RxStat;                        /* addr: 0x0021 */
  PCS6_RX_RxInt_t                          RxInt;                         /* addr: 0x0022 */
  PCS6_RX_RxIntMask_t                      RxIntMask;                     /* addr: 0x0023 */
  PCS6_RX_SOS_A_t                          rx_SOS_A;                      /* addr: 0x0024 */
  PCS6_RX_SOS_B_t                          rx_SOS_B;                      /* addr: 0x0025 */
  PCS6_RX_GoodPkt_t                        rx_GoodPkt;                    /* addr: 0x0026 */
  PCS6_RX_ErrPkt_t                         rx_ErrPkt;                     /* addr: 0x0027 */
  PCS6_RX_ErrPat_t                         ErrPat;                        /* addr: 0x0028 */
  PCS6_RX_ErrDec_t                         ErrDec;                        /* addr: 0x0029 */
  PCS6_RX_ErrBer_t                         ErrBer;                        /* addr: 0x002a */
  PCS6_RX_SynOff_t                         SynOff;                        /* addr: 0x002b */
  PCS6_RX_Seed_A_3_t                       rx_Seed_A_3;                   /* addr: 0x002c */
  PCS6_RX_Seed_A_2_t                       rx_Seed_A_2;                   /* addr: 0x002d */
  PCS6_RX_Seed_A_1_t                       rx_Seed_A_1;                   /* addr: 0x002e */
  PCS6_RX_Seed_A_0_t                       rx_Seed_A_0;                   /* addr: 0x002f */
  PCS6_RX_Seed_B_3_t                       rx_Seed_B_3;                   /* addr: 0x0030 */
  PCS6_RX_Seed_B_2_t                       rx_Seed_B_2;                   /* addr: 0x0031 */
  PCS6_RX_Seed_B_1_t                       rx_Seed_B_1;                   /* addr: 0x0032 */
  PCS6_RX_Seed_B_0_t                       rx_Seed_B_0;                   /* addr: 0x0033 */
  PCS6_RX_Seed_D_3_t                       rx_Seed_D_3;                   /* addr: 0x0034 */
  PCS6_RX_Seed_D_2_t                       rx_Seed_D_2;                   /* addr: 0x0035 */
  PCS6_RX_Seed_D_1_t                       rx_Seed_D_1;                   /* addr: 0x0036 */
  PCS6_RX_Seed_D_0_t                       rx_Seed_D_0;                   /* addr: 0x0037 */
} PCS6_t;

/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* LIF */

typedef struct {
  LIF_SRST_t                               SRST;                          /* addr: 0x0000 */
  LIF_STATUS1_t                            STATUS1;                       /* addr: 0x0001 */
  LIF_MASK1_t                              MASK1;                         /* addr: 0x0002 */
  LIF_INTERRUPT1_t                         INTERRUPT1;                    /* addr: 0x0003 */
  LIF_GPCTRL_t                             GPCTRL;                        /* addr: 0x0004 */
  LIF_RXCTRL1_t                            RXCTRL1;                       /* addr: 0x0005 */
  LIF_RXCTRL2_t                            RXCTRL2;                       /* addr: 0x0006 */
  LIF_RXCTRL3_t                            RXCTRL3;                       /* addr: 0x0007 */
  LIF_RXCTRL4_t                            RXCTRL4;                       /* addr: 0x0008 */
  LIF_PRIVATE_t                            PRIVATE;                       /* addr: 0x0009 */
  LIF_RXADJUST1_t                          RXADJUST1;                     /* addr: 0x000a */
  LIF_RXADJUST2_t                          RXADJUST2;                     /* addr: 0x000b */
  LIF_RXADJUST3_t                          RXADJUST3;                     /* addr: 0x000c */
  LIF_TXADJUST1_t                          TXADJUST1;                     /* addr: 0x000d */
  LIF_TXADJUST2_t                          TXADJUST2;                     /* addr: 0x000e */
  LIF_PWRDWN_t                             PWRDWN;                        /* addr: 0x000f */
  LIF_VCOFREQ_t                            VCOFREQ;                       /* addr: 0x0010 */
  LIF_PLL1FREQ_t                           PLL1FREQ;                      /* addr: 0x0011 */
  LIF_PLL2FREQ_t                           PLL2FREQ;                      /* addr: 0x0012 */
  LIF_SPARE_t                              SPARE;                         /* addr: 0x0013 */
  LIF_PRBSCNT0_t                           PRBSCNT0;                      /* addr: 0x0014 */
  LIF_PRBSCNT1_t                           PRBSCNT1;                      /* addr: 0x0015 */
  LIF_PRBSCNT2_t                           PRBSCNT2;                      /* addr: 0x0016 */
  LIF_PRBSCNT3_t                           PRBSCNT3;                      /* addr: 0x0017 */
  LIF_SYNCLOC0_t                           SYNCLOC0;                      /* addr: 0x0018 */
  LIF_SYNCLOC1_t                           SYNCLOC1;                      /* addr: 0x0019 */
  LIF_SYNCLOC2_t                           SYNCLOC2;                      /* addr: 0x001a */
  LIF_SYNCLOC3_t                           SYNCLOC3;                      /* addr: 0x001b */
  LIF_MASK2_t                              MASK2;                         /* addr: 0x001c */
  LIF_STATUS2_t                            STATUS2;                       /* addr: 0x001d */
  LIF_INTERRUPT2_t                         INTERRUPT2;                    /* addr: 0x001e */
  LIF_RXADJUST4_t                          RXADJUST4;                     /* addr: 0x001f */
  LIF_RXADJUST5_t                          RXADJUST5;                     /* addr: 0x0020 */
  LIF_RXADJUST6_t                          RXADJUST6;                     /* addr: 0x0021 */
  LIF_RXADJUST7_t                          RXADJUST7;                     /* addr: 0x0022 */
  LIF_RXADJUST8_t                          RXADJUST8;                     /* addr: 0x0023 */
  LIF_TXADJUST3_t                          TXADJUST3;                     /* addr: 0x0024 */
  LIF_TXADJUST4_t                          TXADJUST4;                     /* addr: 0x0025 */
  LIF_SPARE2_t                             SPARE2;                        /* addr: 0x0026 */
  LIF_INTERFACE_t                          INTERF;                     /* addr: 0x0027 */
  LIF_LBSWAP_t                             LBSWAP;                        /* addr: 0x0028 */
  LIF_CKMASK_t                             CKMASK;                        /* addr: 0x0029 */
  LIF_PRBSCNT_LSB_t                        PRBSCNT_LSB;                   /* addr: 0x002a */
  LIF_PRBSCNT_MSB_t                        PRBSCNT_MSB;                   /* addr: 0x002b */
  LIF_PRBSPROV_t                           PRBSPROV;                      /* addr: 0x002c */
  LIF_PRBS_CNTL_t                          PRBS_CNTL;                     /* addr: 0x002d */
  LIF_XGCNTL1_t                            XGCNTL1;                       /* addr: 0x002e */
  LIF_SFI42CNTL_t                          SFI42CNTL;                     /* addr: 0x002f */
  LIF_SFI41PAR_t                           SFI41PAR;                      /* addr: 0x0030 */
  LIF_PRIVATE1_t                           PRIVATE1;                      /* addr: 0x0031 */
  LIF_PRIVATE2_t                           PRIVATE2;                      /* addr: 0x0032 */
  LIF_RXADJUST9_t                          RXADJUST9;                     /* addr: 0x0033 */
  LIF_TXADJUST5_t                          TXADJUST5;                     /* addr: 0x0034 */
  LIF_INT_SOURCE_t                         INT_SOURCE;                    /* addr: 0x0035 */
  LIF_FMRO_SEL_t                           FMRO_SEL;                      /* addr: 0x0036 */
  cs_uint16                                rsrvd1[9];
  PCS6_t                                   PCS6;                          /* addr: 0x00000040 */
  cs_uint16                                rsrvd2[8];
  XGXS_t                                   XGXS;                          /* addr: 0x00000080 */
} LIF_t;

/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * XETH::mp
 */

#define XETH_MP_Control                          0x1e000
#define XETH_MP_Control_dft                      0x1000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  2 ;
    cs_uint16 TxPacketSkid         :  6 ; /* bits 13:8 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TxDropShort          :  1 ; /* bits 6:6 */
    cs_uint16 TxEvenParity         :  1 ; /* bits 5:5 */
    cs_uint16 RxEvenParity         :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  4 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  4 ;
    cs_uint16 RxEvenParity         :  1 ; /* bits 4:4 */
    cs_uint16 TxEvenParity         :  1 ; /* bits 5:5 */
    cs_uint16 TxDropShort          :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 TxPacketSkid         :  6 ; /* bits 13:8 */
    cs_uint16 rsrvd3               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_MP_Control_t;

#define XETH_MP_TxBurstLength                    0x1e001
#define XETH_MP_TxBurstLength_dft                0x0040
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               :  8 ;
    cs_uint16 TxBurstLength        :  8 ; /* bits 7:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxBurstLength        :  8 ; /* bits 7:0 */
    cs_uint16 rsrvd1               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_MP_TxBurstLength_t;

#define XETH_MP_Status                           0x1e002
#define XETH_MP_Status_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd1               : 14 ;
    cs_uint16 rx_no_clock          :  1 ; /* bits 1:1 */
    cs_uint16 tx_no_clock          :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 tx_no_clock          :  1 ; /* bits 0:0 */
    cs_uint16 rx_no_clock          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               : 14 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_MP_Status_t;

#define XETH_MP_Interrupt                        0x1e003
#define XETH_MP_Interrupt_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 TxDataComBadParI     :  1 ; /* bits 13:13 */
    cs_uint16 TxDataComBadFrmI     :  1 ; /* bits 12:12 */
    cs_uint16 TxDataComUndFlwI     :  1 ; /* bits 11:11 */
    cs_uint16 TxDataComOvrFlwI     :  1 ; /* bits 10:10 */
    cs_uint16 RxDataComBadFrmI     :  1 ; /* bits 9:9 */
    cs_uint16 RxDataComOvrFlwI     :  1 ; /* bits 8:8 */
    cs_uint16 RxDataMemParErrI     :  1 ; /* bits 7:7 */
    cs_uint16 TxDataMemParErrI     :  1 ; /* bits 6:6 */
    cs_uint16 RxMessMemParErrI     :  1 ; /* bits 5:5 */
    cs_uint16 TxMessMemParErrI     :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 RxNoClkI             :  1 ; /* bits 1:1 */
    cs_uint16 TxNoClkI             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxNoClkI             :  1 ; /* bits 0:0 */
    cs_uint16 RxNoClkI             :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 TxMessMemParErrI     :  1 ; /* bits 4:4 */
    cs_uint16 RxMessMemParErrI     :  1 ; /* bits 5:5 */
    cs_uint16 TxDataMemParErrI     :  1 ; /* bits 6:6 */
    cs_uint16 RxDataMemParErrI     :  1 ; /* bits 7:7 */
    cs_uint16 RxDataComOvrFlwI     :  1 ; /* bits 8:8 */
    cs_uint16 RxDataComBadFrmI     :  1 ; /* bits 9:9 */
    cs_uint16 TxDataComOvrFlwI     :  1 ; /* bits 10:10 */
    cs_uint16 TxDataComUndFlwI     :  1 ; /* bits 11:11 */
    cs_uint16 TxDataComBadFrmI     :  1 ; /* bits 12:12 */
    cs_uint16 TxDataComBadParI     :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_MP_Interrupt_t;

#define XETH_MP_Mask                             0x1e004
#define XETH_MP_Mask_dft                         0x3ff3
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 TxDataComBadParM     :  1 ; /* bits 13:13 */
    cs_uint16 TxDataComBadFrmM     :  1 ; /* bits 12:12 */
    cs_uint16 TxDataComUndFlwM     :  1 ; /* bits 11:11 */
    cs_uint16 TxDataComOvrFlwM     :  1 ; /* bits 10:10 */
    cs_uint16 RxDataComBadFrmM     :  1 ; /* bits 9:9 */
    cs_uint16 RxDataComOvrFlwM     :  1 ; /* bits 8:8 */
    cs_uint16 RxDataMemParErrM     :  1 ; /* bits 7:7 */
    cs_uint16 TxDataMemParErrM     :  1 ; /* bits 6:6 */
    cs_uint16 RxMessMemParErrM     :  1 ; /* bits 5:5 */
    cs_uint16 TxMessMemParErrM     :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 RxNoClkM             :  1 ; /* bits 1:1 */
    cs_uint16 TxNoClkM             :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 TxNoClkM             :  1 ; /* bits 0:0 */
    cs_uint16 RxNoClkM             :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  2 ;
    cs_uint16 TxMessMemParErrM     :  1 ; /* bits 4:4 */
    cs_uint16 RxMessMemParErrM     :  1 ; /* bits 5:5 */
    cs_uint16 TxDataMemParErrM     :  1 ; /* bits 6:6 */
    cs_uint16 RxDataMemParErrM     :  1 ; /* bits 7:7 */
    cs_uint16 RxDataComOvrFlwM     :  1 ; /* bits 8:8 */
    cs_uint16 RxDataComBadFrmM     :  1 ; /* bits 9:9 */
    cs_uint16 TxDataComOvrFlwM     :  1 ; /* bits 10:10 */
    cs_uint16 TxDataComUndFlwM     :  1 ; /* bits 11:11 */
    cs_uint16 TxDataComBadFrmM     :  1 ; /* bits 12:12 */
    cs_uint16 TxDataComBadParM     :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_MP_Mask_t;

#define XETH_MP_FMRO                             0x1e006
#define XETH_MP_FMRO_dft                         0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  8 ;
    cs_uint16 fmro_view_sel        :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 fmro_rx_view         :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 fmro_rx_view         :  1 ; /* bits 0:0 */
    cs_uint16 rsrvd1               :  3 ;
    cs_uint16 fmro_view_sel        :  4 ; /* bits 7:4 */
    cs_uint16 rsrvd2               :  8 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_MP_FMRO_t;
#define     fmro_view_sel_SPI_64_0                        0x00
#define     fmro_view_sel_SPI_64_1                        0x01
#define     fmro_view_sel_SPI_64_2                        0x02
#define     fmro_view_sel_SPI_64_3                        0x03
#define     fmro_view_sel_SPI_64_4                        0x04
#define     fmro_view_sel_SPI_64_5                        0x05
#define     fmro_view_sel_SPI_64_6                        0x06
#define     fmro_view_sel_SPI_64_7                        0x07
#define     fmro_view_sel_SPI_32_0                        0x08
#define     fmro_view_sel_SPI_32_1                        0x09
#define     fmro_view_sel_SPI_32_2                        0x0a
#define     fmro_view_sel_SPI_32_3                        0x0b
#define     fmro_view_sel_XGMII_0                         0x0c
#define     fmro_view_sel_XGMII_1                         0x0d
#define     fmro_view_sel_XGMII_2                         0x0e
#define     fmro_view_sel_XGMII_3                         0x0f
#define     fmro_rx_view_Transmit                         0x00
#define     fmro_rx_view_Receive                          0x01


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * XETH::tx
 */

#define XETH_TX_Status                           0x1e021
#define XETH_TX_Status_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd7               :  6 ;
    cs_uint16 rsrvd6               :  1 ;
    cs_uint16 rsrvd5               :  1 ;
    cs_uint16 rsrvd4               :  3 ;
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 rsrvd4               :  3 ;
    cs_uint16 rsrvd5               :  1 ;
    cs_uint16 rsrvd6               :  1 ;
    cs_uint16 rsrvd7               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_TX_Status_t;

#define XETH_TX_Interrupt                        0x1e022
#define XETH_TX_Interrupt_dft                    0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  6 ;
    cs_uint16 MsgEmptyI            :  1 ; /* bits 9:9 */
    cs_uint16 SentMsgI             :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 IdlePktSatI          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 IdlePktSatI          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 SentMsgI             :  1 ; /* bits 8:8 */
    cs_uint16 MsgEmptyI            :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd3               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_TX_Interrupt_t;

#define XETH_TX_Mask                             0x1e023
#define XETH_TX_Mask_dft                         0x0317
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd3               :  6 ;
    cs_uint16 MsgEmptyM            :  1 ; /* bits 9:9 */
    cs_uint16 SentMsgM             :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 IdlePktSatM          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 IdlePktSatM          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               :  3 ;
    cs_uint16 SentMsgM             :  1 ; /* bits 8:8 */
    cs_uint16 MsgEmptyM            :  1 ; /* bits 9:9 */
    cs_uint16 rsrvd3               :  6 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_TX_Mask_t;

#define XETH_TX_GoodPkt                          0x1e024
#define XETH_TX_GoodPkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 good_pkt_tx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 good_pkt_tx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_TX_GoodPkt_t;

#define XETH_TX_ErrPkt                           0x1e025
#define XETH_TX_ErrPkt_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_pkt_tx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_pkt_tx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_TX_ErrPkt_t;


/******************************************************************
 *
 * Each register in the map is defined as a struct with bitfields.
 *
 ******************************************************************/


/*
 * XETH::rx
 */

#define XETH_RX_Status_0                         0x1e041
#define XETH_RX_Status_0_dft                     0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd6               :  2 ;
    cs_uint16 MsgBufFull           :  1 ; /* bits 13:13 */
    cs_uint16 ReceivingMsg         :  1 ; /* bits 12:12 */
    cs_uint16 DropPktSat           :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd5               :  2 ;
    cs_uint16 ErrorMatSat          :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 ErrorCRCSat          :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 IdlePktSat           :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 rsrvd1               :  1 ;
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 ErrorPktSat          :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSat           :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 IdlePktSat           :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 ErrorCRCSat          :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 ErrorMatSat          :  1 ; /* bits 8:8 */
    cs_uint16 rsrvd5               :  2 ;
    cs_uint16 DropPktSat           :  1 ; /* bits 11:11 */
    cs_uint16 ReceivingMsg         :  1 ; /* bits 12:12 */
    cs_uint16 MsgBufFull           :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd6               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_RX_Status_0_t;

#define XETH_RX_Interrupt_0                      0x1e042
#define XETH_RX_Interrupt_0_dft                  0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd8               :  2 ;
    cs_uint16 rsrvd7               :  1 ;
    cs_uint16 rsrvd6               :  1 ;
    cs_uint16 DropPktSatI          :  1 ; /* bits 11:11 */
    cs_uint16 DropPktI             :  1 ; /* bits 10:10 */
    cs_uint16 rsrvd5               :  1 ;
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 ErrorCRCSatI         :  1 ; /* bits 6:6 */
    cs_uint16 ErrorCRCI            :  1 ; /* bits 5:5 */
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktI            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatI         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatI          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 rsrvd2               :  1 ;
    cs_uint16 ErrorCRCI            :  1 ; /* bits 5:5 */
    cs_uint16 ErrorCRCSatI         :  1 ; /* bits 6:6 */
    cs_uint16 rsrvd3               :  1 ;
    cs_uint16 rsrvd4               :  1 ;
    cs_uint16 rsrvd5               :  1 ;
    cs_uint16 DropPktI             :  1 ; /* bits 10:10 */
    cs_uint16 DropPktSatI          :  1 ; /* bits 11:11 */
    cs_uint16 rsrvd6               :  1 ;
    cs_uint16 rsrvd7               :  1 ;
    cs_uint16 rsrvd8               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_RX_Interrupt_0_t;

#define XETH_RX_Mask_0                           0x1e043
#define XETH_RX_Mask_0_dft                       0x3ff7
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 rsrvd2               :  2 ;
    cs_uint16 MsgBufFullM          :  1 ; /* bits 13:13 */
    cs_uint16 ReceiveMsgM          :  1 ; /* bits 12:12 */
    cs_uint16 DropPktSatM          :  1 ; /* bits 11:11 */
    cs_uint16 DropPktM             :  1 ; /* bits 10:10 */
    cs_uint16 ErrorAPSFrmM         :  1 ; /* bits 9:9 */
    cs_uint16 ErrorMatSatM         :  1 ; /* bits 8:8 */
    cs_uint16 ErrorMatM            :  1 ; /* bits 7:7 */
    cs_uint16 ErrorCRCM            :  1 ; /* bits 6:6 */
    cs_uint16 ErrorCRCSatM         :  1 ; /* bits 5:5 */
    cs_uint16 IdlePktSatM          :  1 ; /* bits 4:4 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 ErrorPktM            :  1 ; /* bits 0:0 */
    cs_uint16 ErrorPktSatM         :  1 ; /* bits 1:1 */
    cs_uint16 GoodPktSatM          :  1 ; /* bits 2:2 */
    cs_uint16 rsrvd1               :  1 ;
    cs_uint16 IdlePktSatM          :  1 ; /* bits 4:4 */
    cs_uint16 ErrorCRCSatM         :  1 ; /* bits 5:5 */
    cs_uint16 ErrorCRCM            :  1 ; /* bits 6:6 */
    cs_uint16 ErrorMatM            :  1 ; /* bits 7:7 */
    cs_uint16 ErrorMatSatM         :  1 ; /* bits 8:8 */
    cs_uint16 ErrorAPSFrmM         :  1 ; /* bits 9:9 */
    cs_uint16 DropPktM             :  1 ; /* bits 10:10 */
    cs_uint16 DropPktSatM          :  1 ; /* bits 11:11 */
    cs_uint16 ReceiveMsgM          :  1 ; /* bits 12:12 */
    cs_uint16 MsgBufFullM          :  1 ; /* bits 13:13 */
    cs_uint16 rsrvd2               :  2 ;
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_RX_Mask_0_t;

#define XETH_RX_GoodPkt                          0x1e049
#define XETH_RX_GoodPkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 good_pkt_rx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 good_pkt_rx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_RX_GoodPkt_t;

#define XETH_RX_ErrPkt                           0x1e04a
#define XETH_RX_ErrPkt_dft                       0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 err_pkt_rx           : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 err_pkt_rx           : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_RX_ErrPkt_t;

#define XETH_RX_DropPkt                          0x1e04b
#define XETH_RX_DropPkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 drop_pkt_rx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 drop_pkt_rx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_RX_DropPkt_t;

#define XETH_RX_IdlePkt                          0x1e04c
#define XETH_RX_IdlePkt_dft                      0x0000
typedef volatile union {
  struct {
#   ifdef CS_BIG_ENDIAN 
    cs_uint16 idle_pkt_rx          : 16 ; /* bits 15:0 */
#   else /* CS_LITTLE_ENDIAN */
    cs_uint16 idle_pkt_rx          : 16 ; /* bits 15:0 */
#   endif
  } bf ;
  cs_uint16     wrd ;
} XETH_RX_IdlePkt_t;


/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* XETH */

typedef struct {
  XETH_MP_Control_t                        mp_Control;                    /* addr: 0x0000 */
  XETH_MP_TxBurstLength_t                  TxBurstLength;                 /* addr: 0x0001 */
  XETH_MP_Status_t                         mp_Status;                     /* addr: 0x0002 */
  XETH_MP_Interrupt_t                      mp_Interrupt;                  /* addr: 0x0003 */
  XETH_MP_Mask_t                           mp_Mask;                       /* addr: 0x0004 */
  cs_uint16                                rsrvd1;
  XETH_MP_FMRO_t                           FMRO;                          /* addr: 0x0006 */
  cs_uint16                                rsrvd2[25];
  cs_uint16                                rsrvd3;
  XETH_TX_Status_t                         tx_Status;                     /* addr: 0x0021 */
  XETH_TX_Interrupt_t                      tx_Interrupt;                  /* addr: 0x0022 */
  XETH_TX_Mask_t                           tx_Mask;                       /* addr: 0x0023 */
  XETH_TX_GoodPkt_t                        tx_GoodPkt;                    /* addr: 0x0024 */
  XETH_TX_ErrPkt_t                         tx_ErrPkt;                     /* addr: 0x0025 */
  cs_uint16                                rsrvd4;
  cs_uint16                                rsrvd5;
  cs_uint16                                rsrvd6;
  cs_uint16                                rsrvd7;
  cs_uint16                                rsrvd8;
  cs_uint16                                rsrvd9;
  cs_uint16                                rsrvd10;
  cs_uint16                                rsrvd11;
  cs_uint16                                rsrvd12;
  cs_uint16                                rsrvd13;
  cs_uint16                                rsrvd14;
  cs_uint16                                rsrvd15;
  cs_uint16                                rsrvd16[14];
  cs_uint16                                rsrvd17;
  XETH_RX_Status_0_t                       Status_0;                      /* addr: 0x0041 */
  XETH_RX_Interrupt_0_t                    Interrupt_0;                   /* addr: 0x0042 */
  XETH_RX_Mask_0_t                         Mask_0;                        /* addr: 0x0043 */
  cs_uint16                                rsrvd18;
  cs_uint16                                rsrvd19;
  cs_uint16                                rsrvd20;
  cs_uint16                                rsrvd21;
  cs_uint16                                rsrvd22;
  XETH_RX_GoodPkt_t                        rx_GoodPkt;                    /* addr: 0x0049 */
  XETH_RX_ErrPkt_t                         rx_ErrPkt;                     /* addr: 0x004a */
  XETH_RX_DropPkt_t                        DropPkt;                       /* addr: 0x004b */
  XETH_RX_IdlePkt_t                        rx_IdlePkt;                    /* addr: 0x004c */
  cs_uint16                                rsrvd23;
  cs_uint16                                rsrvd24;
  cs_uint16                                rsrvd25;
  cs_uint16                                rsrvd26;
  cs_uint16                                rsrvd27;
  cs_uint16                                rsrvd28;
  cs_uint16                                rsrvd29;
  cs_uint16                                rsrvd30;
  cs_uint16                                rsrvd31;
  cs_uint16                                rsrvd32;
  cs_uint16                                rsrvd33;
  cs_uint16                                rsrvd34;
  cs_uint16                                rsrvd35;
} XETH_t;

/******************************************************************
 *
 * Block declaration.
 *
 ******************************************************************/

/* M2 */

typedef struct {
  PPRBS_t                                  PPRBS;                         /* addr: 0x00002000 */
  cs_uint16                                rsrvd1[24540];
  Framer_t                                 Framer;                        /* addr: 0x00008000 */
  cs_uint16                                rsrvd2[6262];
  RingMAC_t                                RingMAC;                       /* addr: 0x00010000 */
} slice_t;

typedef struct {
  MicroIF_t                                MicroIF;                       /* addr: 0x00000000 */
  cs_uint16                                rsrvd1[8175];
  slice_t                                  slice[1];                      /* addr: 0x00002000 */
  cs_uint16                                rsrvd2[31744];
  SPI4P2_t                                 SPI4P2;                        /* addr: 0x00018000 */
  cs_uint16                                rsrvd3[7914];
  XGXS_t                                   XGXS;                          /* addr: 0x0001a000 */
  cs_uint16                                rsrvd4[8110];
  LIF_t                                    LIF;                           /* addr: 0x0001c000 */
  cs_uint16                                rsrvd5[7982];
  XETH_t                                   XETH;                          /* addr: 0x0001e000 */
} M2R_t;

#endif
